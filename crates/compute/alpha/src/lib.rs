#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A specification of the type and number of accelerator cards attached to the instance."]
pub struct AcceleratorConfig {
    #[serde(rename = "acceleratorCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of the guest accelerator cards exposed to this instance."]
    pub accelerator_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "acceleratorType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types."]
    pub accelerator_type: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Accelerator Type resource.\n\nGoogle Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine. (== resource_for {$api_version}.acceleratorTypes ==)"]
pub struct AcceleratorType {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this accelerator type."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "accelerator_type_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#acceleratorType for accelerator types."]
    pub kind: ::std::string::String,
    #[serde(rename = "maximumCardsPerInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Maximum number of accelerator cards allowed per instance."]
    pub maximum_cards_per_instance: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined, fully qualified URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod accelerator_type_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#acceleratorType")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AcceleratorTypeAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of AcceleratorTypesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<AcceleratorTypesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "accelerator_type_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AcceleratorTypeAggregatedListWarning>,
}
mod accelerator_type_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#acceleratorTypeAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AcceleratorTypeAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AcceleratorTypeAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AcceleratorTypeAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AcceleratorTypeAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AcceleratorTypeAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of accelerator types."]
pub struct AcceleratorTypeList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of AcceleratorType resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorType>>>,
    #[serde(rename = "kind")]
    #[serde(default = "accelerator_type_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AcceleratorTypeListWarning>,
}
mod accelerator_type_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#acceleratorTypeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AcceleratorTypeListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AcceleratorTypeListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AcceleratorTypeListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AcceleratorTypeListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AcceleratorTypeListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AcceleratorTypesScopedList {
    #[serde(rename = "acceleratorTypes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of accelerator types contained in this scope."]
    pub accelerator_types:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorType>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that appears when the accelerator types list is empty."]
    pub warning: ::std::option::Option<AcceleratorTypesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that appears when the accelerator types list is empty."]
pub struct AcceleratorTypesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AcceleratorTypesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AcceleratorTypesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AcceleratorTypesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AcceleratorTypesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An access configuration attached to an instance's network interface. Only one access config per instance is supported."]
pub struct AccessConfig {
    #[serde(rename = "externalIpv6")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically."]
    pub external_ipv6: ::std::option::Option<::std::string::String>,
    #[serde(rename = "externalIpv6PrefixLength")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The prefix length of the external IPv6 range."]
    pub external_ipv6_prefix_length: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "kind")]
    #[serde(default = "access_config_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#accessConfig for access configs."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "natIP")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance."]
    pub nat_ip: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.\n\nIf an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.\n\nIf an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP."]
    pub network_tier: ::std::option::Option<AccessConfigNetworkTierEnum>,
    #[serde(rename = "publicDnsName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The public DNS domain name for the instance."]
    pub public_dns_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "publicPtrDomainName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled."]
    pub public_ptr_domain_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "setPublicDns")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether a public DNS 'A' record should be created for the external IP address of this access configuration."]
    pub set_public_dns: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "setPublicPtr")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name."]
    pub set_public_ptr: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "type")]
    #[serde(default = "access_config_defaults :: _type")]
    #[doc = "The type of configuration. The default and only option is ONE_TO_ONE_NAT."]
    pub _type: AccessConfigTypeEnum,
}
mod access_config_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#accessConfig")
    }
    pub fn _type() -> super::AccessConfigTypeEnum {
        serde_json::from_str(&"ONE_TO_ONE_NAT").unwrap()
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.\n\nIf an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.\n\nIf an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP."]
pub enum AccessConfigNetworkTierEnum {
    #[serde(rename = "FIXED_STANDARD")]
    #[doc = ""]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "SELECT")]
    #[doc = ""]
    Select,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    #[doc = ""]
    StandardOverridesFixedStandard,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of configuration. The default and only option is ONE_TO_ONE_NAT."]
pub enum AccessConfigTypeEnum {
    #[serde(rename = "DIRECT_IPV6")]
    #[doc = ""]
    DirectIpv6,
    #[serde(rename = "ONE_TO_ONE_NAT")]
    #[doc = ""]
    OneToOneNat,
}
impl ::std::default::Default for AccessConfigTypeEnum {
    fn default() -> Self {
        Self::OneToOneNat
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Use global external addresses for GFE-based external HTTP(S) load balancers in Premium Tier.\n\nUse global internal addresses for reserved peering network range.\n\nUse regional external addresses for the following resources:\n\n- External IP addresses for VM instances - Regional external forwarding rules - Cloud NAT external IP addresses - GFE based LBs in Standard Tier - Network LBs in Premium or Standard Tier - Cloud VPN gateways (both Classic and HA)\n\nUse regional internal IP addresses for subnet IP ranges (primary and secondary). This includes:\n\n- Internal IP addresses for VM instances - Alias IP ranges of VM instances (/32 only) - Regional internal forwarding rules - Internal TCP/UDP load balancer addresses - Internal HTTP(S) load balancer addresses - Cloud DNS inbound forwarding IP addresses\n\nFor more information, read reserved IP address.\n\n(== resource_for {$api_version}.addresses ==) (== resource_for {$api_version}.globalAddresses ==)"]
pub struct Address {
    #[serde(rename = "address")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The static IP address represented by this resource."]
    pub address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "addressType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL."]
    pub address_type: ::std::option::Option<AddressAddressTypeEnum>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this field when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipVersion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address."]
    pub ip_version: ::std::option::Option<AddressIpVersionEnum>,
    #[serde(rename = "kind")]
    #[serde(default = "address_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#address for addresses."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this Address, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an Address."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.\n\nIf this field is not specified, it is assumed to be PREMIUM."]
    pub network_tier: ::std::option::Option<AddressNetworkTierEnum>,
    #[serde(rename = "prefixLength")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The prefix length if the resource reprensents an IP range."]
    pub prefix_length: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "purpose")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The purpose of this resource, which can be one of the following values:  \n- `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources. \n- `DNS_RESOLVER` for a DNS resolver address in a subnetwork \n- `VPC_PEERING` for addresses that are reserved for VPC peer networks. \n- `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT. \n- `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec encrypted Interconnect configuration. These addresses are regional resources."]
    pub purpose: ::std::option::Option<AddressPurposeEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. This field is not applicable to global addresses."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available."]
    pub status: ::std::option::Option<AddressStatusEnum>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "users")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URLs of the resources that are using this address."]
    pub users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod address_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#address")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL."]
pub enum AddressAddressTypeEnum {
    #[serde(rename = "DNS_FORWARDING")]
    #[doc = ""]
    DnsForwarding,
    #[serde(rename = "EXTERNAL")]
    #[doc = ""]
    External,
    #[serde(rename = "INTERNAL")]
    #[doc = ""]
    Internal,
    #[serde(rename = "UNSPECIFIED_TYPE")]
    #[doc = ""]
    UnspecifiedType,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address."]
pub enum AddressIpVersionEnum {
    #[serde(rename = "IPV4")]
    #[doc = ""]
    Ipv4,
    #[serde(rename = "IPV6")]
    #[doc = ""]
    Ipv6,
    #[serde(rename = "UNSPECIFIED_VERSION")]
    #[doc = ""]
    UnspecifiedVersion,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.\n\nIf this field is not specified, it is assumed to be PREMIUM."]
pub enum AddressNetworkTierEnum {
    #[serde(rename = "FIXED_STANDARD")]
    #[doc = ""]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "SELECT")]
    #[doc = ""]
    Select,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    #[doc = ""]
    StandardOverridesFixedStandard,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The purpose of this resource, which can be one of the following values:  \n- `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources. \n- `DNS_RESOLVER` for a DNS resolver address in a subnetwork \n- `VPC_PEERING` for addresses that are reserved for VPC peer networks. \n- `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT. \n- `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec encrypted Interconnect configuration. These addresses are regional resources."]
pub enum AddressPurposeEnum {
    #[serde(rename = "DNS_RESOLVER")]
    #[doc = ""]
    DnsResolver,
    #[serde(rename = "GCE_ENDPOINT")]
    #[doc = ""]
    GceEndpoint,
    #[serde(rename = "IPSEC_INTERCONNECT")]
    #[doc = ""]
    IpsecInterconnect,
    #[serde(rename = "NAT_AUTO")]
    #[doc = ""]
    NatAuto,
    #[serde(rename = "PRIVATE_SERVICE_CONNECT")]
    #[doc = ""]
    PrivateServiceConnect,
    #[serde(rename = "PSC_PRODUCER_NAT_RANGE")]
    #[doc = ""]
    PscProducerNatRange,
    #[serde(rename = "SHARED_LOADBALANCER_VIP")]
    #[doc = ""]
    SharedLoadbalancerVip,
    #[serde(rename = "VPC_PEERING")]
    #[doc = ""]
    VpcPeering,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available."]
pub enum AddressStatusEnum {
    #[serde(rename = "IN_USE")]
    #[doc = ""]
    InUse,
    #[serde(rename = "RESERVED")]
    #[doc = ""]
    Reserved,
    #[serde(rename = "RESERVING")]
    #[doc = ""]
    Reserving,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AddressAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of AddressesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<AddressesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "address_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AddressAggregatedListWarning>,
}
mod address_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#addressAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AddressAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AddressAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AddressAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AddressAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AddressAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of addresses."]
pub struct AddressList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Address resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Address>>>,
    #[serde(rename = "kind")]
    #[serde(default = "address_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#addressList for lists of addresses."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AddressListWarning>,
}
mod address_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#addressList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AddressListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AddressListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AddressListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AddressListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AddressListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AddressesScopedList {
    #[serde(rename = "addresses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of addresses contained in this scope."]
    pub addresses: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Address>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<AddressesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
pub struct AddressesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AddressesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AddressesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AddressesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AddressesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled)."]
pub struct AdvancedMachineFeatures {
    #[serde(rename = "enableNestedVirtualization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to enable nested virtualization or not (default is false)."]
    pub enable_nested_virtualization: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "threadsPerCore")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed."]
    pub threads_per_core: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An alias IP range attached to an instance's network interface."]
pub struct AliasIpRange {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24)."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetworkRangeName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used."]
    pub subnetwork_range_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AllocationShareSettings {
    #[serde(rename = "projects")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS."]
    pub projects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "shareType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of sharing for this shared-reservation"]
    pub share_type: ::std::option::Option<AllocationShareSettingsShareTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of sharing for this shared-reservation"]
pub enum AllocationShareSettingsShareTypeEnum {
    #[serde(rename = "ORGANIZATION")]
    #[doc = ""]
    Organization,
    #[serde(rename = "SHARE_TYPE_UNSPECIFIED")]
    #[doc = ""]
    ShareTypeUnspecified,
    #[serde(rename = "SPECIFIC_PROJECTS")]
    #[doc = ""]
    SpecificProjects,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AllocationSpecificSkuAllocationAllocatedInstancePropertiesReservedDisk {
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the size of the disk in base-2 GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance."]
    pub interface: ::std::option::Option<
        AllocationSpecificSkuAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance."]
pub enum AllocationSpecificSkuAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum {
    #[serde(rename = "NVDIMM")]
    #[doc = ""]
    Nvdimm,
    #[serde(rename = "NVME")]
    #[doc = ""]
    Nvme,
    #[serde(rename = "SCSI")]
    #[doc = ""]
    Scsi,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Properties of the SKU instances being reserved. Next ID: 9"]
pub struct AllocationSpecificSkuAllocationReservedInstanceProperties {
    #[serde(rename = "guestAccelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies accelerator type and count."]
    pub guest_accelerators:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "localSsds")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd."]
    pub local_ssds: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<
                AllocationSpecificSkuAllocationAllocatedInstancePropertiesReservedDisk,
            >,
        >,
    >,
    #[serde(rename = "locationHint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API."]
    pub location_hint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "machineType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern."]
    pub machine_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "maintenanceFreezeDurationHours")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the number of hours after reservation creation where instances using the reservation won't be scheduled for maintenance."]
    pub maintenance_freeze_duration_hours: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maintenanceInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether this VM may be a stable fleet VM. Setting this to \"Periodic\" designates this VM as a Stable Fleet VM.\n\nSee go/stable-fleet-ug for more details."]
    pub maintenance_interval: ::std::option::Option<
        AllocationSpecificSkuAllocationReservedInstancePropertiesMaintenanceIntervalEnum,
    >,
    #[serde(rename = "minCpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum cpu platform the reservation."]
    pub min_cpu_platform: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies whether this VM may be a stable fleet VM. Setting this to \"Periodic\" designates this VM as a Stable Fleet VM.\n\nSee go/stable-fleet-ug for more details."]
pub enum AllocationSpecificSkuAllocationReservedInstancePropertiesMaintenanceIntervalEnum {
    #[serde(rename = "PERIODIC")]
    #[doc = ""]
    Periodic,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "This reservation type allows to pre allocate specific instance configuration."]
pub struct AllocationSpecificSkuReservation {
    #[serde(rename = "count")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the number of resources that are allocated."]
    pub count: ::std::option::Option<::std::string::String>,
    #[serde(rename = "inUseCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Indicates how many instances are in use."]
    pub in_use_count: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceProperties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The instance properties for the reservation."]
    pub instance_properties: ::std::option::Option<
        ::std::boxed::Box<AllocationSpecificSkuAllocationReservedInstanceProperties>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\nFoo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... }\n\nExample 2: Pack and unpack a message in Java.\n\nFoo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); }\n\nExample 3: Pack and unpack a message in Python.\n\nfoo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ...\n\nExample 4: Pack and unpack a message in Go\n\nfoo := &pb.Foo{...} any, err := anypb.New(foo) if err != nil { ... } ... foo := &pb.Foo{} if err := any.UnmarshalTo(foo); err != nil { ... }\n\nThe pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".\n\n\n\nJSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:\n\npackage google.profile; message Person { string first_name = 1; string last_name = 2; }\n\n{ \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": , \"lastName\":  }\n\nIf the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):\n\n{ \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }"]
pub struct Any {
    #[serde(rename = "typeUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)\n\nNote: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."]
    pub type_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Must be a valid serialized protocol buffer of the above specified type."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An instance-attached disk resource."]
pub struct AttachedDisk {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance)."]
    pub auto_delete: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "boot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem."]
    pub boot: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "deviceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance.\n\nIf not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks."]
    pub device_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts or decrypts a disk using a customer-supplied encryption key.\n\nIf you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key.\n\nIf you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance.\n\nIf you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.\n\nInstance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group."]
    pub disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The size of the disk in GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "forceAttach")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error."]
    pub force_attach: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options."]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "index")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number."]
    pub index: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "initializeParams")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.\n\nThis property is mutually exclusive with the source property; you can only define one or the other, but not both."]
    pub initialize_params: ::std::option::Option<::std::boxed::Box<AttachedDiskInitializeParams>>,
    #[serde(rename = "interface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance."]
    pub interface: ::std::option::Option<AttachedDiskInterfaceEnum>,
    #[serde(rename = "kind")]
    #[serde(default = "attached_disk_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#attachedDisk for attached disks."]
    pub kind: ::std::string::String,
    #[serde(rename = "licenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Any valid publicly visible licenses."]
    pub licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode."]
    pub mode: ::std::option::Option<AttachedDiskModeEnum>,
    #[serde(rename = "savedState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api."]
    pub saved_state: ::std::option::Option<AttachedDiskSavedStateEnum>,
    #[serde(rename = "shieldedInstanceInitialState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] shielded vm initial state stored on disk"]
    pub shielded_instance_initial_state:
        ::std::option::Option<::std::boxed::Box<InitialStateConfig>>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.\n\nIf desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks.\n\nNote that for InstanceTemplate, specify the disk name, not the URL for the disk."]
    pub source: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT."]
    pub _type: ::std::option::Option<AttachedDiskTypeEnum>,
    #[serde(rename = "userLicenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of user provided licenses. It represents a list of URLs to the license resource. Unlike regular licenses, user provided licenses can be modified after the disk is created."]
    pub user_licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod attached_disk_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#attachedDisk")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance."]
pub enum AttachedDiskInterfaceEnum {
    #[serde(rename = "NVDIMM")]
    #[doc = ""]
    Nvdimm,
    #[serde(rename = "NVME")]
    #[doc = ""]
    Nvme,
    #[serde(rename = "SCSI")]
    #[doc = ""]
    Scsi,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode."]
pub enum AttachedDiskModeEnum {
    #[serde(rename = "READ_ONLY")]
    #[doc = ""]
    ReadOnly,
    #[serde(rename = "READ_WRITE")]
    #[doc = ""]
    ReadWrite,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api."]
pub enum AttachedDiskSavedStateEnum {
    #[serde(rename = "DISK_SAVED_STATE_UNSPECIFIED")]
    #[doc = ""]
    DiskSavedStateUnspecified,
    #[serde(rename = "PRESERVED")]
    #[doc = ""]
    Preserved,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT."]
pub enum AttachedDiskTypeEnum {
    #[serde(rename = "PERSISTENT")]
    #[doc = ""]
    Persistent,
    #[serde(rename = "SCRATCH")]
    #[doc = ""]
    Scratch,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.\n\nThis property is mutually exclusive with the source property; you can only define one or the other, but not both."]
pub struct AttachedDiskInitializeParams {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description. Provide this property when creating the disk."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created."]
    pub disk_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example:\nhttps://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/pd-standard\n\n\nOther values include pd-ssd and local-ssd. If you define this field, you can provide either the full or partial URL. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/diskType \n- projects/project/zones/zone/diskTypes/diskType \n- zones/zone/diskTypes/diskType  Note that for InstanceTemplate, this is the name of the disk type, not URL."]
    pub disk_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.\n\nGuest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures"]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "multiWriter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not the disk can be read/write attached to more than one instance."]
    pub multi_writer: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "onUpdateAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies which action to take on instance update with this disk. Default is to use the existing disk."]
    pub on_update_action: ::std::option::Option<AttachedDiskInitializeParamsOnUpdateActionEnum>,
    #[serde(rename = "provisionedIops")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates how many IOPS must be provisioned for the disk."]
    pub provisioned_iops: ::std::option::Option<::std::string::String>,
    #[serde(rename = "replicaZones")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs of the zones where the disk should be replicated to. Only applicable for regional resources."]
    pub replica_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceImage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.\n\nTo create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image:\nprojects/debian-cloud/global/images/family/debian-9\n\n\nAlternatively, use a specific version of a public operating system image:\nprojects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD\n\n\nTo create a disk with a custom image that you created, specify the image name in the following format:\nglobal/images/my-custom-image\n\n\nYou can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name:\nglobal/images/family/my-image-family\n\n\nIf the source image is deleted later, this field will not be set."]
    pub source_image: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceImageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.\n\nInstance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys."]
    pub source_image_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD.\n\nTo create a disk with a snapshot that you created, specify the snapshot name in the following format:\nglobal/snapshots/my-backup\n\n\nIf the source snapshot is deleted later, this field will not be set."]
    pub source_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceSnapshotEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source snapshot."]
    pub source_snapshot_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies which action to take on instance update with this disk. Default is to use the existing disk."]
pub enum AttachedDiskInitializeParamsOnUpdateActionEnum {
    #[serde(rename = "RECREATE_DISK")]
    #[doc = ""]
    RecreateDisk,
    #[serde(rename = "RECREATE_DISK_IF_SOURCE_CHANGED")]
    #[doc = ""]
    RecreateDiskIfSourceChanged,
    #[serde(rename = "USE_EXISTING_DISK")]
    #[doc = ""]
    UseExistingDisk,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.\n\nIf there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.\n\nExample Policy with multiple AuditConfigs:\n\n{ \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] }\n\nFor sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging."]
pub struct AuditConfig {
    #[serde(rename = "auditLogConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configuration for logging of each type of permission."]
    pub audit_log_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AuditLogConfig>>>,
    #[serde(rename = "exemptedMembers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = ""]
    pub exempted_members: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services."]
    pub service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Provides the configuration for logging a type of permissions. Example:\n\n{ \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] }\n\nThis enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging."]
pub struct AuditLogConfig {
    #[serde(rename = "exemptedMembers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the identities that do not cause logging for this type of permission. Follows the same format of [Binding.members][]."]
    pub exempted_members: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "ignoreChildExemptions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = ""]
    pub ignore_child_exemptions: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "logType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The log type that this config enables."]
    pub log_type: ::std::option::Option<AuditLogConfigLogTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The log type that this config enables."]
pub enum AuditLogConfigLogTypeEnum {
    #[serde(rename = "ADMIN_READ")]
    #[doc = ""]
    AdminRead,
    #[serde(rename = "DATA_READ")]
    #[doc = ""]
    DataRead,
    #[serde(rename = "DATA_WRITE")]
    #[doc = ""]
    DataWrite,
    #[serde(rename = "LOG_TYPE_UNSPECIFIED")]
    #[doc = ""]
    LogTypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] The authentication settings for the backend service. The authentication settings for the backend service."]
pub struct AuthenticationPolicy {
    #[serde(rename = "origins")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of authentication methods that can be used for origin authentication. Similar to peers, these will be evaluated in order the first valid one will be used to set origin identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if origin authentication is not required."]
    pub origins:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<OriginAuthenticationMethod>>>,
    #[serde(rename = "peers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of authentication methods that can be used for peer authentication. They will be evaluated in order the first valid one will be used to set peer identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if peer authentication is not required."]
    pub peers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PeerAuthenticationMethod>>>,
    #[serde(rename = "principalBinding")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication."]
    pub principal_binding: ::std::option::Option<AuthenticationPolicyPrincipalBindingEnum>,
    #[serde(rename = "serverTlsContext")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configures the mechanism to obtain server-side security certificates and identity information."]
    pub server_tls_context: ::std::option::Option<::std::boxed::Box<TlsContext>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication."]
pub enum AuthenticationPolicyPrincipalBindingEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "USE_ORIGIN")]
    #[doc = ""]
    UseOrigin,
    #[serde(rename = "USE_PEER")]
    #[doc = ""]
    UsePeer,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Authorization configuration provides service-level and method-level access control for a service. control for a service."]
pub struct AuthorizationConfig {
    #[serde(rename = "policies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of RbacPolicies."]
    pub policies: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RbacPolicy>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Authorization-related information used by Cloud Audit Logging."]
pub struct AuthorizationLoggingOptions {
    #[serde(rename = "permissionType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of the permission that was checked."]
    pub permission_type: ::std::option::Option<AuthorizationLoggingOptionsPermissionTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of the permission that was checked."]
pub enum AuthorizationLoggingOptionsPermissionTypeEnum {
    #[serde(rename = "ADMIN_READ")]
    #[doc = ""]
    AdminRead,
    #[serde(rename = "ADMIN_WRITE")]
    #[doc = ""]
    AdminWrite,
    #[serde(rename = "DATA_READ")]
    #[doc = ""]
    DataRead,
    #[serde(rename = "DATA_WRITE")]
    #[doc = ""]
    DataWrite,
    #[serde(rename = "PERMISSION_TYPE_UNSPECIFIED")]
    #[doc = ""]
    PermissionTypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Autoscaler resource.\n\nGoogle Compute Engine has two Autoscaler resources:\n\n* [Zonal](/compute/docs/reference/rest/{$api_version}/autoscalers) * [Regional](/compute/docs/reference/rest/{$api_version}/regionAutoscalers)\n\nUse autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances.\n\nFor zonal managed instance groups resource, use the autoscaler resource.\n\nFor regional managed instance groups, use the regionAutoscalers resource. (== resource_for {$api_version}.autoscalers ==) (== resource_for {$api_version}.regionAutoscalers ==)"]
pub struct Autoscaler {
    #[serde(rename = "autoscalingPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.\n\nIf none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%."]
    pub autoscaling_policy: ::std::option::Option<::std::boxed::Box<AutoscalingPolicy>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "autoscaler_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "recommendedSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction."]
    pub recommended_size: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "scalingScheduleStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Status information of existing scaling schedules."]
    pub scaling_schedule_status: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<ScalingScheduleStatus>>,
    >,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the autoscaler configuration. Current set of possible values:  \n- PENDING: Autoscaler backend hasn't read new/updated configuration. \n- DELETING: Configuration is being deleted. \n- ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. \n- ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future."]
    pub status: ::std::option::Option<AutoscalerStatusEnum>,
    #[serde(rename = "statusDetails")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter."]
    pub status_details:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AutoscalerStatusDetails>>>,
    #[serde(rename = "target")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler."]
    pub target: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod autoscaler_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#autoscaler")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the autoscaler configuration. Current set of possible values:  \n- PENDING: Autoscaler backend hasn't read new/updated configuration. \n- DELETING: Configuration is being deleted. \n- ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. \n- ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future."]
pub enum AutoscalerStatusEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "ERROR")]
    #[doc = ""]
    Error,
    #[serde(rename = "PENDING")]
    #[doc = ""]
    Pending,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalerAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of AutoscalersScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<AutoscalersScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "autoscaler_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AutoscalerAggregatedListWarning>,
}
mod autoscaler_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#autoscalerAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AutoscalerAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AutoscalerAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AutoscalerAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AutoscalerAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalerAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Autoscaler resources."]
pub struct AutoscalerList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Autoscaler resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Autoscaler>>>,
    #[serde(rename = "kind")]
    #[serde(default = "autoscaler_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<AutoscalerListWarning>,
}
mod autoscaler_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#autoscalerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct AutoscalerListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AutoscalerListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AutoscalerListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AutoscalerListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalerListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalerStatusDetails {
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status message."]
    pub message: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of error, warning, or notice returned. Current set of possible values:  \n- ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). \n- BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. \n- CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. \n- CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. \n- CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. \n- MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. \n- MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. \n- MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. \n- MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. \n- MODE_ONLY_UP (WARNING): Autoscaling is in the \"Autoscale only out\" mode. The autoscaler can add instances but not remove any. \n- MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. \n- NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. \n- REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. \n- SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. \n- UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. \n- ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.  New values might be added in the future. Some of the values might not be available in all API versions."]
    pub _type: ::std::option::Option<AutoscalerStatusDetailsTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of error, warning, or notice returned. Current set of possible values:  \n- ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). \n- BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. \n- CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. \n- CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. \n- CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. \n- MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. \n- MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. \n- MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. \n- MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. \n- MODE_ONLY_UP (WARNING): Autoscaling is in the \"Autoscale only out\" mode. The autoscaler can add instances but not remove any. \n- MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. \n- NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. \n- REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. \n- SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. \n- UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. \n- ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.  New values might be added in the future. Some of the values might not be available in all API versions."]
pub enum AutoscalerStatusDetailsTypeEnum {
    #[serde(rename = "ALL_INSTANCES_UNHEALTHY")]
    #[doc = ""]
    AllInstancesUnhealthy,
    #[serde(rename = "BACKEND_SERVICE_DOES_NOT_EXIST")]
    #[doc = ""]
    BackendServiceDoesNotExist,
    #[serde(rename = "CAPPED_AT_MAX_NUM_REPLICAS")]
    #[doc = ""]
    CappedAtMaxNumReplicas,
    #[serde(rename = "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE")]
    #[doc = ""]
    CustomMetricDataPointsTooSparse,
    #[serde(rename = "CUSTOM_METRIC_INVALID")]
    #[doc = ""]
    CustomMetricInvalid,
    #[serde(rename = "MIN_EQUALS_MAX")]
    #[doc = ""]
    MinEqualsMax,
    #[serde(rename = "MISSING_CUSTOM_METRIC_DATA_POINTS")]
    #[doc = ""]
    MissingCustomMetricDataPoints,
    #[serde(rename = "MISSING_LOAD_BALANCING_DATA_POINTS")]
    #[doc = ""]
    MissingLoadBalancingDataPoints,
    #[serde(rename = "MODE_OFF")]
    #[doc = ""]
    ModeOff,
    #[serde(rename = "MODE_ONLY_SCALE_OUT")]
    #[doc = ""]
    ModeOnlyScaleOut,
    #[serde(rename = "MODE_ONLY_UP")]
    #[doc = ""]
    ModeOnlyUp,
    #[serde(rename = "MORE_THAN_ONE_BACKEND_SERVICE")]
    #[doc = ""]
    MoreThanOneBackendService,
    #[serde(rename = "NOT_ENOUGH_QUOTA_AVAILABLE")]
    #[doc = ""]
    NotEnoughQuotaAvailable,
    #[serde(rename = "REGION_RESOURCE_STOCKOUT")]
    #[doc = ""]
    RegionResourceStockout,
    #[serde(rename = "SCALING_TARGET_DOES_NOT_EXIST")]
    #[doc = ""]
    ScalingTargetDoesNotExist,
    #[serde(rename = "UNKNOWN")]
    #[doc = ""]
    Unknown,
    #[serde(rename = "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION")]
    #[doc = ""]
    UnsupportedMaxRateLoadBalancingConfiguration,
    #[serde(rename = "ZONE_RESOURCE_STOCKOUT")]
    #[doc = ""]
    ZoneResourceStockout,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalersScopedList {
    #[serde(rename = "autoscalers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of autoscalers contained in this scope."]
    pub autoscalers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Autoscaler>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of autoscalers when the list is empty."]
    pub warning: ::std::option::Option<AutoscalersScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of autoscalers when the list is empty."]
pub struct AutoscalersScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<AutoscalersScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<AutoscalersScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum AutoscalersScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct AutoscalersScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Cloud Autoscaler policy."]
pub struct AutoscalingPolicy {
    #[serde(rename = "coolDownPeriodSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds.\n\nVirtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process."]
    pub cool_down_period_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "cpuUtilization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group."]
    pub cpu_utilization: ::std::option::Option<::std::boxed::Box<AutoscalingPolicyCpuUtilization>>,
    #[serde(rename = "customMetricUtilizations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configuration parameters of autoscaling based on a custom metric."]
    pub custom_metric_utilizations: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<AutoscalingPolicyCustomMetricUtilization>>,
    >,
    #[serde(rename = "loadBalancingUtilization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configuration parameters of autoscaling based on load balancer."]
    pub load_balancing_utilization:
        ::std::option::Option<::std::boxed::Box<AutoscalingPolicyLoadBalancingUtilization>>,
    #[serde(rename = "maxNumReplicas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas."]
    pub max_num_replicas: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minNumReplicas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed."]
    pub min_num_replicas: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines operating mode for this policy."]
    pub mode: ::std::option::Option<AutoscalingPolicyModeEnum>,
    #[serde(rename = "scaleDownControl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub scale_down_control:
        ::std::option::Option<::std::boxed::Box<AutoscalingPolicyScaleDownControl>>,
    #[serde(rename = "scaleInControl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub scale_in_control: ::std::option::Option<::std::boxed::Box<AutoscalingPolicyScaleInControl>>,
    #[serde(rename = "scalingSchedules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed."]
    pub scaling_schedules: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<AutoscalingPolicyScalingSchedule>>,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines operating mode for this policy."]
pub enum AutoscalingPolicyModeEnum {
    #[serde(rename = "OFF")]
    #[doc = ""]
    Off,
    #[serde(rename = "ON")]
    #[doc = ""]
    On,
    #[serde(rename = "ONLY_SCALE_OUT")]
    #[doc = ""]
    OnlyScaleOut,
    #[serde(rename = "ONLY_UP")]
    #[doc = ""]
    OnlyUp,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "CPU utilization policy."]
pub struct AutoscalingPolicyCpuUtilization {
    #[serde(rename = "predictiveMethod")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:\n\n* NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand."]
    pub predictive_method:
        ::std::option::Option<AutoscalingPolicyCpuUtilizationPredictiveMethodEnum>,
    #[serde(rename = "utilizationTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6.\n\nIf the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization.\n\nIf the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization."]
    pub utilization_target: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:\n\n* NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand."]
pub enum AutoscalingPolicyCpuUtilizationPredictiveMethodEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "OPTIMIZE_AVAILABILITY")]
    #[doc = ""]
    OptimizeAvailability,
    #[serde(rename = "PREDICTIVE_METHOD_UNSPECIFIED")]
    #[doc = ""]
    PredictiveMethodUnspecified,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Custom utilization metric policy."]
pub struct AutoscalingPolicyCustomMetricUtilization {
    #[serde(rename = "filter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data.\n\nFor the filter to be valid for autoscaling purposes, the following rules apply:  \n- You can only use the AND operator for joining selectors. \n- You can only use direct equality comparison operator (=) without any functions for each selector. \n- You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. \n- The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels.\nIf the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a per-group metric for the purpose of autoscaling.\n\nIf not specified, the type defaults to gce_instance.  \n\nTry to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value."]
    pub filter: ::std::option::Option<::std::string::String>,
    #[serde(rename = "metric")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.\n\nThe metric must have a value type of INT64 or DOUBLE."]
    pub metric: ::std::option::Option<::std::string::String>,
    #[serde(rename = "singleInstanceAssignment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing.\n\nA good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances.\n\nA bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead."]
    pub single_instance_assignment: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "utilizationTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.\n\nFor example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances."]
    pub utilization_target: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "utilizationTargetType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE."]
    pub utilization_target_type:
        ::std::option::Option<AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE."]
pub enum AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum {
    #[serde(rename = "DELTA_PER_MINUTE")]
    #[doc = ""]
    DeltaPerMinute,
    #[serde(rename = "DELTA_PER_SECOND")]
    #[doc = ""]
    DeltaPerSecond,
    #[serde(rename = "GAUGE")]
    #[doc = ""]
    Gauge,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration parameters of autoscaling based on load balancing."]
pub struct AutoscalingPolicyLoadBalancingUtilization {
    #[serde(rename = "utilizationTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8."]
    pub utilization_target: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below."]
pub struct AutoscalingPolicyScaleDownControl {
    #[serde(rename = "maxScaledDownReplicas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step."]
    pub max_scaled_down_replicas: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
    #[serde(rename = "timeWindowSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above."]
    pub time_window_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below."]
pub struct AutoscalingPolicyScaleInControl {
    #[serde(rename = "maxScaledInReplicas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step."]
    pub max_scaled_in_replicas: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
    #[serde(rename = "timeWindowSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above."]
    pub time_window_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Scaling based on user-defined schedule. The message describes a single scaling schedule. A scaling schedule changes the minimum number of VM instances an autoscaler can recommend, which can trigger scaling out."]
pub struct AutoscalingPolicyScalingSchedule {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A description of a scaling schedule."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional, and its value is false by default."]
    pub disabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "durationSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required."]
    pub duration_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minRequiredReplicas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required."]
    pub min_required_replicas: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "schedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving."]
    pub schedule: ::std::option::Option<::std::string::String>,
    #[serde(rename = "timeZone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database. This field is assigned a default value of ?UTC? if left empty."]
    pub time_zone: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message containing information of one individual backend."]
pub struct Backend {
    #[serde(rename = "balancingMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see  Connection balancing mode."]
    pub balancing_mode: ::std::option::Option<BackendBalancingModeEnum>,
    #[serde(rename = "capacityScaler")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.\n\nNot supported by:\n\n- Internal TCP/UDP Load Balancing - Network Load Balancing"]
    pub capacity_scaler: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "failover")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService."]
    pub failover: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "group")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fully-qualified URL of an instance group or network endpoint group (NEG) resource. The type of backend that a backend service supports depends on the backend service's loadBalancingScheme.\n\n \n- When the loadBalancingScheme for the backend service is EXTERNAL (except Network Load Balancing),  INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED , the backend can be either an instance group or a NEG. The backends on the backend service must be either all instance groups or all NEGs. You cannot mix instance group and NEG backends on the same backend service. \n\n\n- When the loadBalancingScheme for the backend service is EXTERNAL for Network Load Balancing or INTERNAL for Internal TCP/UDP Load Balancing, the backend must be an instance group. NEGs are not supported.  \n\nFor regional services, the backend must be in the same region as the backend service.\n\nYou must use the fully-qualified URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported."]
    pub group: ::std::option::Option<::std::string::String>,
    #[serde(rename = "maxConnections")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE. Not supported by:\n\n- Internal TCP/UDP Load Balancing - Network Load Balancing"]
    pub max_connections: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxConnectionsPerEndpoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode.\n\nNot available if the backend's balancingMode is RATE. Not supported by:\n\n- Internal TCP/UDP Load Balancing - Network Load Balancing."]
    pub max_connections_per_endpoint: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxConnectionsPerInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode.\n\nNot available if the backend's balancingMode is RATE. Not supported by:\n\n- Internal TCP/UDP Load Balancing - Network Load Balancing."]
    pub max_connections_per_instance: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxRate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode.\n\nNot available if the backend's balancingMode is CONNECTION."]
    pub max_rate: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxRatePerEndpoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode.\n\nNot available if the backend's balancingMode is CONNECTION."]
    pub max_rate_per_endpoint: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "maxRatePerInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode.\n\nNot available if the backend's balancingMode is CONNECTION."]
    pub max_rate_per_instance: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "maxUtilization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub max_utilization: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see  Connection balancing mode."]
pub enum BackendBalancingModeEnum {
    #[serde(rename = "CONNECTION")]
    #[doc = ""]
    Connection,
    #[serde(rename = "RATE")]
    #[doc = ""]
    Rate,
    #[serde(rename = "UTILIZATION")]
    #[doc = ""]
    Utilization,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Cloud Storage Bucket resource.\n\nThis Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets."]
pub struct BackendBucket {
    #[serde(rename = "bucketName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud Storage bucket name."]
    pub bucket_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "cdnPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud CDN configuration for this BackendBucket."]
    pub cdn_policy: ::std::option::Option<::std::boxed::Box<BackendBucketCdnPolicy>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "customResponseHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Headers that the HTTP/S load balancer should add to proxied responses."]
    pub custom_response_headers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional textual description of the resource; provided by the client when the resource is created."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "edgeSecurityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The resource URL for the edge security policy associated with this backend bucket."]
    pub edge_security_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enableCdn")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, enable Cloud CDN for this BackendBucket."]
    pub enable_cdn: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "backend_bucket_defaults :: kind")]
    #[doc = "Type of the resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
}
mod backend_bucket_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendBucket")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message containing Cloud CDN configuration for a backend bucket."]
pub struct BackendBucketCdnPolicy {
    #[serde(rename = "bypassCacheOnRequestHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings."]
    pub bypass_cache_on_request_headers: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<BackendBucketCdnPolicyBypassCacheOnRequestHeader>>,
    >,
    #[serde(rename = "cacheMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the cache setting for all responses from this backend. The possible values are:\n\nUSE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.\n\nFORCE_CACHE_ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.\n\nCACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached."]
    pub cache_mode: ::std::option::Option<BackendBucketCdnPolicyCacheModeEnum>,
    #[serde(rename = "clientTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a \"public\" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a \"public\" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day)."]
    pub client_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "defaultTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of \"0\" means \"always revalidate\". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub default_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of \"0\" means \"always revalidate\". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub max_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "negativeCaching")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy."]
    pub negative_caching: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "negativeCachingPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists."]
    pub negative_caching_policy: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<BackendBucketCdnPolicyNegativeCachingPolicy>>,
    >,
    #[serde(rename = "requestCoalescing")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin."]
    pub request_coalescing: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "serveWhileStale")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default \"max-stale\" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale."]
    pub serve_while_stale: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "signedUrlCacheMaxAgeSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered."]
    pub signed_url_cache_max_age_sec: ::std::option::Option<::std::string::String>,
    #[serde(rename = "signedUrlKeyNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Names of the keys for signing request URLs."]
    pub signed_url_key_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the cache setting for all responses from this backend. The possible values are:\n\nUSE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.\n\nFORCE_CACHE_ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.\n\nCACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached."]
pub enum BackendBucketCdnPolicyCacheModeEnum {
    #[serde(rename = "CACHE_ALL_STATIC")]
    #[doc = ""]
    CacheAllStatic,
    #[serde(rename = "FORCE_CACHE_ALL")]
    #[doc = ""]
    ForceCacheAll,
    #[serde(rename = "INVALID_CACHE_MODE")]
    #[doc = ""]
    InvalidCacheMode,
    #[serde(rename = "USE_ORIGIN_HEADERS")]
    #[doc = ""]
    UseOriginHeaders,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting."]
pub struct BackendBucketCdnPolicyBypassCacheOnRequestHeader {
    #[serde(rename = "headerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The header field name to match on when bypassing cache. Values are case-insensitive."]
    pub header_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specify CDN TTLs for response error codes."]
pub struct BackendBucketCdnPolicyNegativeCachingPolicy {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once."]
    pub code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ttl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub ttl: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of BackendBucket resources."]
pub struct BackendBucketList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of BackendBucket resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<BackendBucket>>>,
    #[serde(rename = "kind")]
    #[serde(default = "backend_bucket_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<BackendBucketListWarning>,
}
mod backend_bucket_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendBucketList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct BackendBucketListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<BackendBucketListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<BackendBucketListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum BackendBucketListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendBucketListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Backend Service resource.\n\nA backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly.\n\nBackend services in Google Compute Engine can be either regionally or globally scoped.\n\n* [Global](/compute/docs/reference/rest/{$api_version}/backendServices) * [Regional](/compute/docs/reference/rest/{$api_version}/regionBackendServices)\n\nFor more information, see Backend Services.\n\n(== resource_for {$api_version}.backendService ==)"]
pub struct BackendService {
    #[serde(rename = "affinityCookieTtlSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Lifetime of cookies in seconds. Only applicable if the loadBalancingScheme is EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, the protocol is HTTP or HTTPS, and the sessionAffinity is GENERATED_COOKIE, or HTTP_COOKIE.\n\nIf set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is one day (86,400).\n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub affinity_cookie_ttl_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "backends")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of backends that serve this BackendService."]
    pub backends: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Backend>>>,
    #[serde(rename = "cdnPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud CDN configuration for this BackendService. Only available for  external HTTP(S) Load Balancing."]
    pub cdn_policy: ::std::option::Option<::std::boxed::Box<BackendServiceCdnPolicy>>,
    #[serde(rename = "circuitBreakers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Settings controlling the volume of connections to a backend service. If not set, this feature is considered disabled.\n\nThis field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  \n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub circuit_breakers: ::std::option::Option<::std::boxed::Box<CircuitBreakers>>,
    #[serde(rename = "connectionDraining")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub connection_draining: ::std::option::Option<::std::boxed::Box<ConnectionDraining>>,
    #[serde(rename = "connectionTrackingPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub connection_tracking_policy:
        ::std::option::Option<::std::boxed::Box<BackendServiceConnectionTrackingPolicy>>,
    #[serde(rename = "consistentHash")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH.\n\nThis field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  \n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub consistent_hash:
        ::std::option::Option<::std::boxed::Box<ConsistentHashLoadBalancerSettings>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "customRequestHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Headers that the HTTP/S load balancer should add to proxied requests."]
    pub custom_request_headers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "customResponseHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Headers that the HTTP/S load balancer should add to proxied responses."]
    pub custom_response_headers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "edgeSecurityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The resource URL for the edge security policy associated with this backend service."]
    pub edge_security_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enableCDN")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, enables Cloud CDN for the backend service. Only applicable if the loadBalancingScheme is EXTERNAL and the protocol is HTTP or HTTPS."]
    pub enable_cdn: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "failoverPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Applicable only to Failover for Internal TCP/UDP Load Balancing and Network Load Balancing. Requires at least one backend instance group to be defined as a backup (failover) backend."]
    pub failover_policy: ::std::option::Option<::std::boxed::Box<BackendServiceFailoverPolicy>>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a BackendService."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See  Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check."]
    pub health_checks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "iap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing."]
    pub iap: ::std::option::Option<::std::boxed::Box<BackendServiceIap>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "backend_service_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#backendService for backend services."]
    pub kind: ::std::string::String,
    #[serde(rename = "loadBalancingScheme")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer."]
    pub load_balancing_scheme: ::std::option::Option<BackendServiceLoadBalancingSchemeEnum>,
    #[serde(rename = "localityLbPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The load balancing algorithm used within the scope of the locality. The possible values are:  \n- ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. \n- LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. \n- RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. \n- RANDOM: The load balancer selects a random healthy host. \n- ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. \n- MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 \n\nThis field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  \n\nIf sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.\n\nOnly the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub locality_lb_policy: ::std::option::Option<BackendServiceLocalityLbPolicyEnum>,
    #[serde(rename = "logConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver."]
    pub log_config: ::std::option::Option<::std::boxed::Box<BackendServiceLogConfig>>,
    #[serde(rename = "maxStreamDuration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed.\nIf not specified, there will be no timeout limit, i.e. the maximum duration is infinite.\nThis field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED."]
    pub max_stream_duration: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "outlierDetection")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled.\n\nThis field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  \n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub outlier_detection: ::std::option::Option<::std::boxed::Box<OutlierDetection>>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.\n\nBackend services for Internal TCP/UDP Load Balancing and Network Load Balancing require you omit port."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A named port on a backend instance group representing the port for communication to the backend VMs in that group. Required when the loadBalancingScheme is EXTERNAL (except Network Load Balancing), INTERNAL_MANAGED, or  INTERNAL_SELF_MANAGED and the backends are instance groups. The named port must be defined on each backend instance group. This parameter has no meaning if the backends are NEGs.\n\n\n\nBackend services for Internal TCP/UDP Load Balancing and Network Load Balancing require you omit port_name."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "protocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The protocol this BackendService uses to communicate with backends.\n\nPossible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.\n\nMust be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy."]
    pub protocol: ::std::option::Option<BackendServiceProtocolEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "securityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The resource URL for the security policy associated with this backend service."]
    pub security_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "securitySettings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field specifies the security policy that applies to this backend service. This field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED."]
    pub security_settings: ::std::option::Option<::std::boxed::Box<SecuritySettings>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sessionAffinity")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of session affinity to use. The default is NONE.\n\nWhen the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.\n\nWhen the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.\n\nWhen the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.\n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub session_affinity: ::std::option::Option<BackendServiceSessionAffinityEnum>,
    #[serde(rename = "subsetting")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub subsetting: ::std::option::Option<::std::boxed::Box<Subsetting>>,
    #[serde(rename = "timeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The backend service timeout has a different meaning depending on the type of load balancer. For more information see,  Backend service settings The default is 30 seconds. The full range of timeout values allowed is 1 - 2,147,483,647 seconds."]
    pub timeout_sec: ::std::option::Option<::std::primitive::i64>,
}
mod backend_service_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendService")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer."]
pub enum BackendServiceLoadBalancingSchemeEnum {
    #[serde(rename = "EXTERNAL")]
    #[doc = ""]
    External,
    #[serde(rename = "EXTERNAL_MANAGED")]
    #[doc = ""]
    ExternalManaged,
    #[serde(rename = "INTERNAL")]
    #[doc = ""]
    Internal,
    #[serde(rename = "INTERNAL_MANAGED")]
    #[doc = ""]
    InternalManaged,
    #[serde(rename = "INTERNAL_SELF_MANAGED")]
    #[doc = ""]
    InternalSelfManaged,
    #[serde(rename = "INVALID_LOAD_BALANCING_SCHEME")]
    #[doc = ""]
    InvalidLoadBalancingScheme,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The load balancing algorithm used within the scope of the locality. The possible values are:  \n- ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. \n- LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. \n- RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. \n- RANDOM: The load balancer selects a random healthy host. \n- ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. \n- MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 \n\nThis field is applicable to either:  \n- A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. \n- A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  \n\nIf sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.\n\nOnly the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
pub enum BackendServiceLocalityLbPolicyEnum {
    #[serde(rename = "INVALID_LB_POLICY")]
    #[doc = ""]
    InvalidLbPolicy,
    #[serde(rename = "LEAST_REQUEST")]
    #[doc = ""]
    LeastRequest,
    #[serde(rename = "MAGLEV")]
    #[doc = ""]
    Maglev,
    #[serde(rename = "ORIGINAL_DESTINATION")]
    #[doc = ""]
    OriginalDestination,
    #[serde(rename = "RANDOM")]
    #[doc = ""]
    Random,
    #[serde(rename = "RING_HASH")]
    #[doc = ""]
    RingHash,
    #[serde(rename = "ROUND_ROBIN")]
    #[doc = ""]
    RoundRobin,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The protocol this BackendService uses to communicate with backends.\n\nPossible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.\n\nMust be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy."]
pub enum BackendServiceProtocolEnum {
    #[serde(rename = "ALL")]
    #[doc = ""]
    All,
    #[serde(rename = "GRPC")]
    #[doc = ""]
    Grpc,
    #[serde(rename = "HTTP")]
    #[doc = ""]
    Http,
    #[serde(rename = "HTTP2")]
    #[doc = ""]
    Http2,
    #[serde(rename = "HTTPS")]
    #[doc = ""]
    Https,
    #[serde(rename = "SSL")]
    #[doc = ""]
    Ssl,
    #[serde(rename = "TCP")]
    #[doc = ""]
    Tcp,
    #[serde(rename = "UDP")]
    #[doc = ""]
    Udp,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of session affinity to use. The default is NONE.\n\nWhen the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.\n\nWhen the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.\n\nWhen the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.\n\nNot supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."]
pub enum BackendServiceSessionAffinityEnum {
    #[serde(rename = "CLIENT_IP")]
    #[doc = ""]
    ClientIp,
    #[serde(rename = "CLIENT_IP_NO_DESTINATION")]
    #[doc = ""]
    ClientIpNoDestination,
    #[serde(rename = "CLIENT_IP_PORT_PROTO")]
    #[doc = ""]
    ClientIpPortProto,
    #[serde(rename = "CLIENT_IP_PROTO")]
    #[doc = ""]
    ClientIpProto,
    #[serde(rename = "GENERATED_COOKIE")]
    #[doc = ""]
    GeneratedCookie,
    #[serde(rename = "HEADER_FIELD")]
    #[doc = ""]
    HeaderField,
    #[serde(rename = "HTTP_COOKIE")]
    #[doc = ""]
    HttpCookie,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of BackendServicesScopedList."]
pub struct BackendServiceAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of BackendServicesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<BackendServicesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "backend_service_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<BackendServiceAggregatedListWarning>,
}
mod backend_service_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendServiceAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct BackendServiceAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<BackendServiceAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<BackendServiceAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum BackendServiceAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServiceAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message containing Cloud CDN configuration for a backend service."]
pub struct BackendServiceCdnPolicy {
    #[serde(rename = "bypassCacheOnRequestHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings."]
    pub bypass_cache_on_request_headers: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<BackendServiceCdnPolicyBypassCacheOnRequestHeader>>,
    >,
    #[serde(rename = "cacheKeyPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The CacheKeyPolicy for this CdnPolicy."]
    pub cache_key_policy: ::std::option::Option<::std::boxed::Box<CacheKeyPolicy>>,
    #[serde(rename = "cacheMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the cache setting for all responses from this backend. The possible values are:\n\nUSE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.\n\nFORCE_CACHE_ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.\n\nCACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached."]
    pub cache_mode: ::std::option::Option<BackendServiceCdnPolicyCacheModeEnum>,
    #[serde(rename = "clientTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a \"public\" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a \"public\" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day)."]
    pub client_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "defaultTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of \"0\" means \"always revalidate\". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub default_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxTtl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of \"0\" means \"always revalidate\". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub max_ttl: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "negativeCaching")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy."]
    pub negative_caching: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "negativeCachingPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists."]
    pub negative_caching_policy: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<BackendServiceCdnPolicyNegativeCachingPolicy>>,
    >,
    #[serde(rename = "requestCoalescing")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin."]
    pub request_coalescing: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "serveWhileStale")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default \"max-stale\" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale."]
    pub serve_while_stale: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "signedUrlCacheMaxAgeSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered."]
    pub signed_url_cache_max_age_sec: ::std::option::Option<::std::string::String>,
    #[serde(rename = "signedUrlKeyNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Names of the keys for signing request URLs."]
    pub signed_url_key_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the cache setting for all responses from this backend. The possible values are:\n\nUSE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.\n\nFORCE_CACHE_ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.\n\nCACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached."]
pub enum BackendServiceCdnPolicyCacheModeEnum {
    #[serde(rename = "CACHE_ALL_STATIC")]
    #[doc = ""]
    CacheAllStatic,
    #[serde(rename = "FORCE_CACHE_ALL")]
    #[doc = ""]
    ForceCacheAll,
    #[serde(rename = "INVALID_CACHE_MODE")]
    #[doc = ""]
    InvalidCacheMode,
    #[serde(rename = "USE_ORIGIN_HEADERS")]
    #[doc = ""]
    UseOriginHeaders,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting."]
pub struct BackendServiceCdnPolicyBypassCacheOnRequestHeader {
    #[serde(rename = "headerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The header field name to match on when bypassing cache. Values are case-insensitive."]
    pub header_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specify CDN TTLs for response error codes."]
pub struct BackendServiceCdnPolicyNegativeCachingPolicy {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once."]
    pub code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ttl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL."]
    pub ttl: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Connection Tracking configuration for this BackendService."]
pub struct BackendServiceConnectionTrackingPolicy {
    #[serde(rename = "connectionPersistenceOnUnhealthyBackends")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL.\n\nIf set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP.\n\nIf set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy).\n\nIf set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default."]
    pub connection_persistence_on_unhealthy_backends: ::std::option::Option<
        BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum,
    >,
    #[serde(rename = "idleTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds).\n\nFor L4 ILB the minimum(default) is 10 minutes and maximum is 16 hours.\n\nFor NLB the minimum(default) is 60 seconds and the maximum is 16 hours.\n\nThis field will be supported only if the Connection Tracking key is less than 5-tuple."]
    pub idle_timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "trackingMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the key used for connection tracking. There are two options:\n\nPER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol.\n\nPER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity."]
    pub tracking_mode:
        ::std::option::Option<BackendServiceConnectionTrackingPolicyTrackingModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL.\n\nIf set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP.\n\nIf set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy).\n\nIf set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default."]
pub enum BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum {
    #[serde(rename = "ALWAYS_PERSIST")]
    #[doc = ""]
    AlwaysPersist,
    #[serde(rename = "DEFAULT_FOR_PROTOCOL")]
    #[doc = ""]
    DefaultForProtocol,
    #[serde(rename = "NEVER_PERSIST")]
    #[doc = ""]
    NeverPersist,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the key used for connection tracking. There are two options:\n\nPER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol.\n\nPER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity."]
pub enum BackendServiceConnectionTrackingPolicyTrackingModeEnum {
    #[serde(rename = "INVALID_TRACKING_MODE")]
    #[doc = ""]
    InvalidTrackingMode,
    #[serde(rename = "PER_CONNECTION")]
    #[doc = ""]
    PerConnection,
    #[serde(rename = "PER_SESSION")]
    #[doc = ""]
    PerSession,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Applicable only to Failover for Internal TCP/UDP Load Balancing and Network Load Balancing. On failover or failback, this field indicates whether connection draining will be honored. GCP has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes)."]
pub struct BackendServiceFailoverPolicy {
    #[serde(rename = "disableConnectionDrainOnFailover")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This can be set to true only if the protocol is TCP.\n\nThe default is false."]
    pub disable_connection_drain_on_failover: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "dropTrafficIfUnhealthy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Applicable only to Failover for Internal TCP/UDP Load Balancing and Network Load Balancing, If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. The default is false."]
    pub drop_traffic_if_unhealthy: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "failoverRatio")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Applicable only to Failover for Internal TCP/UDP Load Balancing and Network Load Balancing. The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio."]
    pub failover_ratio: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServiceGroupHealth {
    #[serde(rename = "annotations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Metadata defined as annotations on the network endpoint group."]
    pub annotations:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "healthStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks."]
    pub health_status: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthStatus>>>,
    #[serde(rename = "kind")]
    #[serde(default = "backend_service_group_health_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services."]
    pub kind: ::std::string::String,
}
mod backend_service_group_health_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendServiceGroupHealth")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Identity-Aware Proxy"]
pub struct BackendServiceIap {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty."]
    pub enabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "oauth2ClientId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "OAuth2 client ID to use for the authentication flow."]
    pub oauth2_client_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "oauth2ClientInfo")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] OAuth client info required to generate client id to be used for IAP."]
    pub oauth2_client_info:
        ::std::option::Option<::std::boxed::Box<BackendServiceIapoAuth2ClientInfo>>,
    #[serde(rename = "oauth2ClientSecret")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field."]
    pub oauth2_client_secret: ::std::option::Option<::std::string::String>,
    #[serde(rename = "oauth2ClientSecretSha256")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] SHA256 hash value for the field oauth2_client_secret above."]
    pub oauth2_client_secret_sha256: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServiceIapoAuth2ClientInfo {
    #[serde(rename = "applicationName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Application name to be used in OAuth consent screen."]
    pub application_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "clientName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the client to be generated. Optional - If not provided, the name will be autogenerated by the backend."]
    pub client_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "developerEmailAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Developer's information to be used in OAuth consent screen."]
    pub developer_email_address: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of BackendService resources."]
pub struct BackendServiceList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of BackendService resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<BackendService>>>,
    #[serde(rename = "kind")]
    #[serde(default = "backend_service_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#backendServiceList for lists of backend services."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<BackendServiceListWarning>,
}
mod backend_service_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#backendServiceList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct BackendServiceListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<BackendServiceListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<BackendServiceListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum BackendServiceListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServiceListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The available logging options for the load balancer traffic served by this backend service."]
pub struct BackendServiceLogConfig {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field denotes whether to enable logging for the load balancer traffic served by this backend service."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "sampleRate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0."]
    pub sample_rate: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServiceReference {
    #[serde(rename = "backendService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub backend_service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServicesScopedList {
    #[serde(rename = "backendServices")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of BackendServices contained in this scope."]
    pub backend_services: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<BackendService>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<BackendServicesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct BackendServicesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<BackendServicesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<BackendServicesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum BackendServicesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BackendServicesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = ""]
pub struct BfdPacket {
    #[serde(rename = "authenticationPresent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub authentication_present: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "controlPlaneIndependent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub control_plane_independent: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "demand")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub demand: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "diagnostic")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880"]
    pub diagnostic: ::std::option::Option<BfdPacketDiagnosticEnum>,
    #[serde(rename = "final")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub _final: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "length")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880"]
    pub length: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minEchoRxIntervalMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub min_echo_rx_interval_ms: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minRxIntervalMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub min_rx_interval_ms: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minTxIntervalMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub min_tx_interval_ms: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "multiplier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub multiplier: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "multipoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub multipoint: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "myDiscriminator")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub my_discriminator: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "poll")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub poll: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880"]
    pub state: ::std::option::Option<BfdPacketStateEnum>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The version number of the BFD protocol, as specified in section 4.1 of RFC5880."]
    pub version: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "yourDiscriminator")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880"]
    pub your_discriminator: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880"]
pub enum BfdPacketDiagnosticEnum {
    #[serde(rename = "ADMINISTRATIVELY_DOWN")]
    #[doc = ""]
    AdministrativelyDown,
    #[serde(rename = "CONCATENATED_PATH_DOWN")]
    #[doc = ""]
    ConcatenatedPathDown,
    #[serde(rename = "CONTROL_DETECTION_TIME_EXPIRED")]
    #[doc = ""]
    ControlDetectionTimeExpired,
    #[serde(rename = "DIAGNOSTIC_UNSPECIFIED")]
    #[doc = ""]
    DiagnosticUnspecified,
    #[serde(rename = "ECHO_FUNCTION_FAILED")]
    #[doc = ""]
    EchoFunctionFailed,
    #[serde(rename = "FORWARDING_PLANE_RESET")]
    #[doc = ""]
    ForwardingPlaneReset,
    #[serde(rename = "NEIGHBOR_SIGNALED_SESSION_DOWN")]
    #[doc = ""]
    NeighborSignaledSessionDown,
    #[serde(rename = "NO_DIAGNOSTIC")]
    #[doc = ""]
    NoDiagnostic,
    #[serde(rename = "PATH_DOWN")]
    #[doc = ""]
    PathDown,
    #[serde(rename = "REVERSE_CONCATENATED_PATH_DOWN")]
    #[doc = ""]
    ReverseConcatenatedPathDown,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880"]
pub enum BfdPacketStateEnum {
    #[serde(rename = "ADMIN_DOWN")]
    #[doc = ""]
    AdminDown,
    #[serde(rename = "DOWN")]
    #[doc = ""]
    Down,
    #[serde(rename = "INIT")]
    #[doc = ""]
    Init,
    #[serde(rename = "STATE_UNSPECIFIED")]
    #[doc = ""]
    StateUnspecified,
    #[serde(rename = "UP")]
    #[doc = ""]
    Up,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Next free: 15"]
pub struct BfdStatus {
    #[serde(rename = "bfdSessionInitializationMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer."]
    pub bfd_session_initialization_mode:
        ::std::option::Option<BfdStatusBfdSessionInitializationModeEnum>,
    #[serde(rename = "configUpdateTimestampMicros")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Unix timestamp of the most recent config update."]
    pub config_update_timestamp_micros: ::std::option::Option<::std::string::String>,
    #[serde(rename = "controlPacketCounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Control packet counts for the current BFD session."]
    pub control_packet_counts: ::std::option::Option<::std::boxed::Box<BfdStatusPacketCounts>>,
    #[serde(rename = "controlPacketIntervals")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Inter-packet time interval statistics for control packets."]
    pub control_packet_intervals:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PacketIntervals>>>,
    #[serde(rename = "echoPacketCounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Echo packet counts for the current BFD session."]
    pub echo_packet_counts: ::std::option::Option<::std::boxed::Box<BfdStatusPacketCounts>>,
    #[serde(rename = "echoPacketIntervals")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Inter-packet time interval statistics for echo packets."]
    pub echo_packet_intervals:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PacketIntervals>>>,
    #[serde(rename = "localDiagnostic")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880"]
    pub local_diagnostic: ::std::option::Option<BfdStatusLocalDiagnosticEnum>,
    #[serde(rename = "localState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880"]
    pub local_state: ::std::option::Option<BfdStatusLocalStateEnum>,
    #[serde(rename = "negotiatedLocalControlTxIntervalMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negotiated transmit interval for control packets."]
    pub negotiated_local_control_tx_interval_ms: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "negotiatedLocalEchoTxIntervalMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negotiated transmit interval for echo packets."]
    pub negotiated_local_echo_tx_interval_ms: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "rxPacket")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The most recent Rx control packet for this BFD session."]
    pub rx_packet: ::std::option::Option<::std::boxed::Box<BfdPacket>>,
    #[serde(rename = "txPacket")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The most recent Tx control packet for this BFD session."]
    pub tx_packet: ::std::option::Option<::std::boxed::Box<BfdPacket>>,
    #[serde(rename = "uptimeMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Session uptime in milliseconds. Value will be 0 if session is not up."]
    pub uptime_ms: ::std::option::Option<::std::string::String>,
    #[serde(rename = "usingEchoMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates if echo mode is currently being used."]
    pub using_echo_mode: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer."]
pub enum BfdStatusBfdSessionInitializationModeEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DISABLED")]
    #[doc = ""]
    Disabled,
    #[serde(rename = "PASSIVE")]
    #[doc = ""]
    Passive,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880"]
pub enum BfdStatusLocalDiagnosticEnum {
    #[serde(rename = "ADMINISTRATIVELY_DOWN")]
    #[doc = ""]
    AdministrativelyDown,
    #[serde(rename = "CONCATENATED_PATH_DOWN")]
    #[doc = ""]
    ConcatenatedPathDown,
    #[serde(rename = "CONTROL_DETECTION_TIME_EXPIRED")]
    #[doc = ""]
    ControlDetectionTimeExpired,
    #[serde(rename = "DIAGNOSTIC_UNSPECIFIED")]
    #[doc = ""]
    DiagnosticUnspecified,
    #[serde(rename = "ECHO_FUNCTION_FAILED")]
    #[doc = ""]
    EchoFunctionFailed,
    #[serde(rename = "FORWARDING_PLANE_RESET")]
    #[doc = ""]
    ForwardingPlaneReset,
    #[serde(rename = "NEIGHBOR_SIGNALED_SESSION_DOWN")]
    #[doc = ""]
    NeighborSignaledSessionDown,
    #[serde(rename = "NO_DIAGNOSTIC")]
    #[doc = ""]
    NoDiagnostic,
    #[serde(rename = "PATH_DOWN")]
    #[doc = ""]
    PathDown,
    #[serde(rename = "REVERSE_CONCATENATED_PATH_DOWN")]
    #[doc = ""]
    ReverseConcatenatedPathDown,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880"]
pub enum BfdStatusLocalStateEnum {
    #[serde(rename = "ADMIN_DOWN")]
    #[doc = ""]
    AdminDown,
    #[serde(rename = "DOWN")]
    #[doc = ""]
    Down,
    #[serde(rename = "INIT")]
    #[doc = ""]
    Init,
    #[serde(rename = "STATE_UNSPECIFIED")]
    #[doc = ""]
    StateUnspecified,
    #[serde(rename = "UP")]
    #[doc = ""]
    Up,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BfdStatusPacketCounts {
    #[serde(rename = "numRx")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of packets received since the beginning of the current BFD session."]
    pub num_rx: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numRxRejected")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of packets received that were rejected because of errors since the beginning of the current BFD session."]
    pub num_rx_rejected: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numRxSuccessful")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of packets received that were successfully processed since the beginning of the current BFD session."]
    pub num_rx_successful: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numTx")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of packets transmitted since the beginning of the current BFD session."]
    pub num_tx: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Associates `members` with a `role`."]
pub struct Binding {
    #[serde(rename = "bindingId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = ""]
    pub binding_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "condition")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The condition that is associated with this binding.\n\nIf the condition evaluates to `true`, then this binding applies to the current request.\n\nIf the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding.\n\nTo learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."]
    pub condition: ::std::option::Option<::std::boxed::Box<Expr>>,
    #[serde(rename = "members")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` .\n\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.\n\n* `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding.\n\n* `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding.\n\n* `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.\n\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`."]
    pub members: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "role")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."]
    pub role: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct BulkInsertInstanceResource {
    #[serde(rename = "count")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of instances to create."]
    pub count: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The instance defining the VM instances to be created."]
    pub instance: ::std::option::Option<::std::boxed::Box<Instance>>,
    #[serde(rename = "instanceProperties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided."]
    pub instance_properties: ::std::option::Option<::std::boxed::Box<InstanceProperties>>,
    #[serde(rename = "locationPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub location_policy: ::std::option::Option<::std::boxed::Box<LocationPolicy>>,
    #[serde(rename = "minCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created."]
    pub min_count: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namePattern")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The string pattern used for the names of the VMs. Either name_pattern or predefined_names must be set. The pattern should contain one consecutive sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: name_pattern of inst-#### will generate instance names like inst-0001, inst-0002, ... . If there already exist instance(s) whose names match the name pattern in the same project and zone, then the generated instance numbers will start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### will be inst-0051, inst-0052, etc. The name pattern placeholder #...# can contain up to 18 characters."]
    pub name_pattern: ::std::option::Option<::std::string::String>,
    #[serde(rename = "perInstanceProperties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used."]
    pub per_instance_properties: ::std::option::Option<
        ::std::collections::BTreeMap<
            String,
            ::std::boxed::Box<BulkInsertInstanceResourcePerInstanceProperties>,
        >,
    >,
    #[serde(rename = "predefinedNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of predefined names. The number of names provided must be equal to count."]
    pub predefined_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceInstanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396.\n\nIt can be a full or partial URL. For example, the following are all valid URLs to an instance template:  \n- https://www.googleapis.com/compute/v1/projects/project/global/instanceTemplates/instanceTemplate \n- projects/project/global/instanceTemplates/instanceTemplate \n- global/instanceTemplates/instanceTemplate  \n\nThis field is optional."]
    pub source_instance_template: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Per-instance properties to be set on individual instances. To be extended in the future."]
pub struct BulkInsertInstanceResourcePerInstanceProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is only temporary. It will be removed. Do not use it."]
    pub name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CacheInvalidationRule {
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set, this invalidation rule will only apply to requests with a Host header matching host."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "path")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message containing what to include in the cache key for a request for Cloud CDN."]
pub struct CacheKeyPolicy {
    #[serde(rename = "includeHost")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, requests to different hosts will be cached separately."]
    pub include_host: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "includeProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, http and https requests will be cached separately."]
    pub include_protocol: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "includeQueryString")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely."]
    pub include_query_string: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "queryStringBlacklist")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters."]
    pub query_string_blacklist: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "queryStringWhitelist")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters."]
    pub query_string_whitelist: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server."]
pub struct CallCredentials {
    #[serde(rename = "callCredentialType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following:  \n- GCE_VM: The local GCE VM service account credentials are used to access the SDS server.\n- FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server."]
    pub call_credential_type: ::std::option::Option<CallCredentialsCallCredentialTypeEnum>,
    #[serde(rename = "fromPlugin")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Custom authenticator credentials. Valid if callCredentialType is FROM_PLUGIN."]
    pub from_plugin: ::std::option::Option<::std::boxed::Box<MetadataCredentialsFromPlugin>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following:  \n- GCE_VM: The local GCE VM service account credentials are used to access the SDS server.\n- FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server."]
pub enum CallCredentialsCallCredentialTypeEnum {
    #[serde(rename = "FROM_PLUGIN")]
    #[doc = ""]
    FromPlugin,
    #[serde(rename = "GCE_VM")]
    #[doc = ""]
    GceVm,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server."]
pub struct ChannelCredentials {
    #[serde(rename = "certificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The call credentials to access the SDS server."]
    pub certificates: ::std::option::Option<::std::boxed::Box<TlsCertificatePaths>>,
    #[serde(rename = "channelCredentialType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."]
    pub channel_credential_type: ::std::option::Option<ChannelCredentialsChannelCredentialTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."]
pub enum ChannelCredentialsChannelCredentialTypeEnum {
    #[serde(rename = "CERTIFICATES")]
    #[doc = ""]
    Certificates,
    #[serde(rename = "GCE_VM")]
    #[doc = ""]
    GceVm,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Settings controlling the volume of connections to a backend service."]
pub struct CircuitBreakers {
    #[serde(rename = "connectTimeout")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The timeout for new network connections to hosts."]
    pub connect_timeout: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "maxConnections")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of connections to the backend service. If not specified, there is no limit."]
    pub max_connections: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxPendingRequests")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of pending requests allowed to the backend service. If not specified, there is no limit."]
    pub max_pending_requests: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxRequests")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit."]
    pub max_requests: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxRequestsPerConnection")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive."]
    pub max_requests_per_connection: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxRetries")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1."]
    pub max_retries: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] The client side authentication settings for connection originating from the backend service. the backend service."]
pub struct ClientTlsSettings {
    #[serde(rename = "clientTlsContext")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configures the mechanism to obtain client-side security certificates and identity information. This field is only applicable when mode is set to MUTUAL."]
    pub client_tls_context: ::std::option::Option<::std::boxed::Box<TlsContext>>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends. MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates for authentication."]
    pub mode: ::std::option::Option<ClientTlsSettingsModeEnum>,
    #[serde(rename = "sni")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "SNI string to present to the server during TLS handshake. This field is applicable only when mode is SIMPLE or MUTUAL."]
    pub sni: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subjectAltNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of alternate names to verify the subject identity in the certificate.If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. This field is applicable only when mode is SIMPLE or MUTUAL."]
    pub subject_alt_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends. MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates for authentication."]
pub enum ClientTlsSettingsModeEnum {
    #[serde(rename = "DISABLE")]
    #[doc = ""]
    Disable,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "MUTUAL")]
    #[doc = ""]
    Mutual,
    #[serde(rename = "SIMPLE")]
    #[doc = ""]
    Simple,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a regional Commitment resource.\n\nCreating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts. (== resource_for {$api_version}.regionCommitments ==)"]
pub struct Commitment {
    #[serde(rename = "category")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified."]
    pub category: ::std::option::Option<CommitmentCategoryEnum>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "endTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Commitment end time in RFC3339 text format."]
    pub end_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "commitment_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#commitment for commitments."]
    pub kind: ::std::string::String,
    #[serde(rename = "licenseResource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The license specification required as part of a license commitment."]
    pub license_resource: ::std::option::Option<::std::boxed::Box<LicenseResourceCommitment>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "plan")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years)."]
    pub plan: ::std::option::Option<CommitmentPlanEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where this commitment may be used."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "reservations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of reservations in this commitment."]
    pub reservations: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Reservation>>>,
    #[serde(rename = "resources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together."]
    pub resources: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ResourceCommitment>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Commitment start time in RFC3339 text format."]
    pub start_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED."]
    pub status: ::std::option::Option<CommitmentStatusEnum>,
    #[serde(rename = "statusMessage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional, human-readable explanation of the status."]
    pub status_message: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines."]
    pub _type: ::std::option::Option<CommitmentTypeEnum>,
}
mod commitment_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#commitment")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified."]
pub enum CommitmentCategoryEnum {
    #[serde(rename = "CATEGORY_UNSPECIFIED")]
    #[doc = ""]
    CategoryUnspecified,
    #[serde(rename = "LICENSE")]
    #[doc = ""]
    License,
    #[serde(rename = "MACHINE")]
    #[doc = ""]
    Machine,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years)."]
pub enum CommitmentPlanEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "THIRTY_SIX_MONTH")]
    #[doc = ""]
    ThirtySixMonth,
    #[serde(rename = "TWELVE_MONTH")]
    #[doc = ""]
    TwelveMonth,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED."]
pub enum CommitmentStatusEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "EXPIRED")]
    #[doc = ""]
    Expired,
    #[serde(rename = "NOT_YET_ACTIVE")]
    #[doc = ""]
    NotYetActive,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines."]
pub enum CommitmentTypeEnum {
    #[serde(rename = "ACCELERATOR_OPTIMIZED")]
    #[doc = ""]
    AcceleratorOptimized,
    #[serde(rename = "COMPUTE_OPTIMIZED")]
    #[doc = ""]
    ComputeOptimized,
    #[serde(rename = "COMPUTE_OPTIMIZED_C2D")]
    #[doc = ""]
    ComputeOptimizedC2D,
    #[serde(rename = "GENERAL_PURPOSE")]
    #[doc = ""]
    GeneralPurpose,
    #[serde(rename = "GENERAL_PURPOSE_E2")]
    #[doc = ""]
    GeneralPurposeE2,
    #[serde(rename = "GENERAL_PURPOSE_N2")]
    #[doc = ""]
    GeneralPurposeN2,
    #[serde(rename = "GENERAL_PURPOSE_N2D")]
    #[doc = ""]
    GeneralPurposeN2D,
    #[serde(rename = "MEMORY_OPTIMIZED")]
    #[doc = ""]
    MemoryOptimized,
    #[serde(rename = "TYPE_UNSPECIFIED")]
    #[doc = ""]
    TypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CommitmentAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of CommitmentsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<CommitmentsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "commitment_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<CommitmentAggregatedListWarning>,
}
mod commitment_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#commitmentAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct CommitmentAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<CommitmentAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<CommitmentAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum CommitmentAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CommitmentAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Commitment resources."]
pub struct CommitmentList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Commitment resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Commitment>>>,
    #[serde(rename = "kind")]
    #[serde(default = "commitment_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#commitmentList for lists of commitments."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<CommitmentListWarning>,
}
mod commitment_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#commitmentList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct CommitmentListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<CommitmentListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<CommitmentListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum CommitmentListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CommitmentListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CommitmentsScopedList {
    #[serde(rename = "commitments")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of commitments contained in this scope."]
    pub commitments: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Commitment>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of commitments when the list is empty."]
    pub warning: ::std::option::Option<CommitmentsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of commitments when the list is empty."]
pub struct CommitmentsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<CommitmentsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<CommitmentsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum CommitmentsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CommitmentsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A condition to be met."]
pub struct Condition {
    #[serde(rename = "iam")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Trusted attributes supplied by the IAM system."]
    pub iam: ::std::option::Option<ConditionIamEnum>,
    #[serde(rename = "op")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An operator to apply the subject with."]
    pub op: ::std::option::Option<ConditionOpEnum>,
    #[serde(rename = "svc")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Trusted attributes discharged by the service."]
    pub svc: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sys")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Trusted attributes supplied by any service that owns resources and uses the IAM system for access control."]
    pub sys: ::std::option::Option<ConditionSysEnum>,
    #[serde(rename = "values")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The objects of the condition."]
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Trusted attributes supplied by the IAM system."]
pub enum ConditionIamEnum {
    #[serde(rename = "APPROVER")]
    #[doc = ""]
    Approver,
    #[serde(rename = "ATTRIBUTION")]
    #[doc = ""]
    Attribution,
    #[serde(rename = "AUTHORITY")]
    #[doc = ""]
    Authority,
    #[serde(rename = "CREDENTIALS_TYPE")]
    #[doc = ""]
    CredentialsType,
    #[serde(rename = "CREDS_ASSERTION")]
    #[doc = ""]
    CredsAssertion,
    #[serde(rename = "JUSTIFICATION_TYPE")]
    #[doc = ""]
    JustificationType,
    #[serde(rename = "NO_ATTR")]
    #[doc = ""]
    NoAttr,
    #[serde(rename = "SECURITY_REALM")]
    #[doc = ""]
    SecurityRealm,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "An operator to apply the subject with."]
pub enum ConditionOpEnum {
    #[serde(rename = "DISCHARGED")]
    #[doc = ""]
    Discharged,
    #[serde(rename = "EQUALS")]
    #[doc = ""]
    Equals,
    #[serde(rename = "IN")]
    #[doc = ""]
    In,
    #[serde(rename = "NOT_EQUALS")]
    #[doc = ""]
    NotEquals,
    #[serde(rename = "NOT_IN")]
    #[doc = ""]
    NotIn,
    #[serde(rename = "NO_OP")]
    #[doc = ""]
    NoOp,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Trusted attributes supplied by any service that owns resources and uses the IAM system for access control."]
pub enum ConditionSysEnum {
    #[serde(rename = "IP")]
    #[doc = ""]
    Ip,
    #[serde(rename = "NAME")]
    #[doc = ""]
    Name,
    #[serde(rename = "NO_ATTR")]
    #[doc = ""]
    NoAttr,
    #[serde(rename = "REGION")]
    #[doc = ""]
    Region,
    #[serde(rename = "SERVICE")]
    #[doc = ""]
    Service,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A set of Confidential Instance options."]
pub struct ConfidentialInstanceConfig {
    #[serde(rename = "enableConfidentialCompute")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance should have confidential compute enabled."]
    pub enable_confidential_compute: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message containing connection draining configuration."]
pub struct ConnectionDraining {
    #[serde(rename = "drainingTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining."]
    pub draining_timeout_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "This message defines settings for a consistent hash style load balancer."]
pub struct ConsistentHashLoadBalancerSettings {
    #[serde(rename = "httpCookie")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE."]
    pub http_cookie:
        ::std::option::Option<::std::boxed::Box<ConsistentHashLoadBalancerSettingsHttpCookie>>,
    #[serde(rename = "httpHeaderName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD."]
    pub http_header_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "minimumRingSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node."]
    pub minimum_ring_size: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash."]
pub struct ConsistentHashLoadBalancerSettingsHttpCookie {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the cookie."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "path")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Path to set for the cookie."]
    pub path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ttl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Lifetime of the cookie."]
    pub ttl: ::std::option::Option<::std::boxed::Box<Duration>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing"]
pub struct CorsPolicy {
    #[serde(rename = "allowCredentials")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header.\nDefault is false."]
    pub allow_credentials: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "allowHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the content for the Access-Control-Allow-Headers header."]
    pub allow_headers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "allowMethods")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the content for the Access-Control-Allow-Methods header."]
    pub allow_methods: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "allowOriginRegexes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax \nAn origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes."]
    pub allow_origin_regexes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "allowOrigins")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the list of origins that will be allowed to do CORS requests.\nAn origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes."]
    pub allow_origins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect."]
    pub disabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "exposeHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the content for the Access-Control-Expose-Headers header."]
    pub expose_headers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "maxAge")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header."]
    pub max_age: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CustomerEncryptionKey {
    #[serde(rename = "kmsKeyName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the encryption key that is stored in Google Cloud KMS."]
    pub kms_key_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kmsKeyServiceAccount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used."]
    pub kms_key_service_account: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rawKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource."]
    pub raw_key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rsaEncryptedKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource.\n\nThe key must meet the following requirements before you can provide it to Compute Engine:  \n- The key is wrapped using a RSA public key certificate provided by Google. \n- After being wrapped, the key must be encoded in RFC 4648 base64 encoding.  Gets the RSA public key certificate provided by Google at:\nhttps://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem"]
    pub rsa_encrypted_key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sha256")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource."]
    pub sha256: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct CustomerEncryptionKeyProtectedDisk {
    #[serde(rename = "diskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Decrypts data associated with the disk with a customer-supplied encryption key."]
    pub disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks."]
    pub source: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Deprecation status for a public resource."]
pub struct DeprecationStatus {
    #[serde(rename = "deleted")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it."]
    pub deleted: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it."]
    pub deprecated: ::std::option::Option<::std::string::String>,
    #[serde(rename = "obsolete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it."]
    pub obsolete: ::std::option::Option<::std::string::String>,
    #[serde(rename = "replacement")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource."]
    pub replacement: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error."]
    pub state: ::std::option::Option<DeprecationStatusStateEnum>,
    #[serde(rename = "stateOverride")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The rollout policy of this deprecation. This policy is only enforced by image family views. The rollout policy restricts the zones where the associated resource is considered in a deprecated state. When the rollout policy does not include the user specified zone, or if the zone is rolled out, the associated resource is considered in a deprecated state."]
    pub state_override: ::std::option::Option<::std::boxed::Box<RolloutPolicy>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error."]
pub enum DeprecationStatusStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DELETED")]
    #[doc = ""]
    Deleted,
    #[serde(rename = "DEPRECATED")]
    #[doc = ""]
    Deprecated,
    #[serde(rename = "OBSOLETE")]
    #[doc = ""]
    Obsolete,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Persistent Disk resource.\n\nGoogle Compute Engine has two Disk resources:\n\n* [Zonal](/compute/docs/reference/rest/{$api_version}/disks) * [Regional](/compute/docs/reference/rest/{$api_version}/regionDisks)\n\nPersistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options.\n\nThe disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks.\n\nThe regionDisks resource represents a regional persistent disk. For more information, read  Regional resources. (== resource_for {$api_version}.disks ==) (== resource_for {$api_version}.regionDisks ==)"]
pub struct Disk {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts the disk using a customer-supplied encryption key.\n\nAfter you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot, to create a disk image, to create a machine image, or to attach the disk to a virtual machine).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later."]
    pub disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "eraseWindowsVssSignature")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the disk restored from a source snapshot should erase Windows specific VSS signature."]
    pub erase_windows_vss_signature: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options."]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI."]
    pub interface: ::std::option::Option<DiskInterfaceEnum>,
    #[serde(rename = "kind")]
    #[serde(default = "disk_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#disk for disks."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a disk."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this disk. These can be later modified by the setLabels method."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "lastAttachTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Last attach timestamp in RFC3339 text format."]
    pub last_attach_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "lastDetachTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Last detach timestamp in RFC3339 text format."]
    pub last_detach_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "licenseCodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Integer license codes indicating which licenses are attached to this disk."]
    pub license_codes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "licenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of publicly visible licenses. Reserved for Google's use."]
    pub licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "locationHint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API."]
    pub location_hint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "multiWriter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not the disk can be read/write attached to more than one instance."]
    pub multi_writer: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "options")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Internal use only."]
    pub options: ::std::option::Option<::std::string::String>,
    #[serde(rename = "physicalBlockSizeBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project."]
    pub physical_block_size_bytes: ::std::option::Option<::std::string::String>,
    #[serde(rename = "provisionedIops")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates how many IOPS must be provisioned for the disk."]
    pub provisioned_iops: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "replicaZones")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs of the zones where the disk should be replicated to. Only applicable for regional resources."]
    pub replica_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies applied to this disk for automatic snapshot creations."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined fully-qualified URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk.\n\nIf you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to 65536, inclusive."]
    pub size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/disks/disk  \n- projects/project/zones/zone/disks/disk  \n- projects/project/regions/region/disks/disk  \n- zones/zone/disks/disk  \n- regions/region/disks/disk"]
    pub source_disk: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used."]
    pub source_disk_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceImage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source image used to create this disk. If the source image is deleted, this field will not be set.\n\nTo create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image:\nprojects/debian-cloud/global/images/family/debian-9\n\n\nAlternatively, use a specific version of a public operating system image:\nprojects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD\n\n\nTo create a disk with a custom image that you created, specify the image name in the following format:\nglobal/images/my-custom-image\n\n\nYou can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name:\nglobal/images/family/my-image-family"]
    pub source_image: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceImageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key."]
    pub source_image_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceImageId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used."]
    pub source_image_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInPlaceSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] The source in-place snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/global/inPlaceSnapshots/inPlaceSnapshots \n- projects/project/global/inPlaceSnapshots/inPlaceSnapshots \n- global/inPlaceSnapshots/inPlaceSnapshots"]
    pub source_in_place_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInPlaceSnapshotId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] [Output Only] The unique ID of the in-place snapshot used to create this disk. This value identifies the exact in-place snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an in-place snapshot that was later deleted and recreated under the same name, the source in-place snapshot ID would identify the exact version of the in-place snapshot that was used."]
    pub source_in_place_snapshot_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInstantSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/instantSnapshots/instantSnapshot \n- projects/project/zones/zone/instantSnapshots/instantSnapshot \n- zones/zone/instantSnapshots/instantSnapshot"]
    pub source_instant_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInstantSnapshotId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique ID of the instant snapshot used to create this disk. This value identifies the exact instant snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an instant snapshot that was later deleted and recreated under the same name, the source instant snapshot ID would identify the exact version of the instant snapshot that was used."]
    pub source_instant_snapshot_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot \n- projects/project/global/snapshots/snapshot \n- global/snapshots/snapshot"]
    pub source_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceSnapshotEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key."]
    pub source_snapshot_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceSnapshotId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used."]
    pub source_snapshot_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceStorageObject")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead."]
    pub source_storage_object: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of disk creation.  \n- CREATING: Disk is provisioning. \n- RESTORING: Source data is being copied into the disk. \n- FAILED: Disk creation failed. \n- READY: Disk is ready for use. \n- DELETING: Disk is deleting."]
    pub status: ::std::option::Option<DiskStatusEnum>,
    #[serde(rename = "storageType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Storage type of the persistent disk."]
    pub storage_type: ::std::option::Option<DiskStorageTypeEnum>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project/zones/zone/diskTypes/pd-standard  or pd-ssd"]
    pub _type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "userLicenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of publicly visible user-licenses. Unlike regular licenses, user provided licenses can be modified after the disk is created. This includes a list of URLs to the license resource. For example, to provide a debian license:\nhttps://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"]
    pub user_licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "users")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance"]
    pub users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod disk_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#disk")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI."]
pub enum DiskInterfaceEnum {
    #[serde(rename = "NVME")]
    #[doc = ""]
    Nvme,
    #[serde(rename = "SCSI")]
    #[doc = ""]
    Scsi,
    #[serde(rename = "UNSPECIFIED")]
    #[doc = ""]
    Unspecified,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of disk creation.  \n- CREATING: Disk is provisioning. \n- RESTORING: Source data is being copied into the disk. \n- FAILED: Disk creation failed. \n- READY: Disk is ready for use. \n- DELETING: Disk is deleting."]
pub enum DiskStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
    #[serde(rename = "RESTORING")]
    #[doc = ""]
    Restoring,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Deprecated] Storage type of the persistent disk."]
pub enum DiskStorageTypeEnum {
    #[serde(rename = "HDD")]
    #[doc = ""]
    Hdd,
    #[serde(rename = "SSD")]
    #[doc = ""]
    Ssd,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of DisksScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<DisksScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "disk_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<DiskAggregatedListWarning>,
}
mod disk_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#diskAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct DiskAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DiskAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DiskAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DiskAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A specification of the desired way to instantiate a disk in the instance template when its created from a source instance."]
pub struct DiskInstantiationConfig {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance)."]
    pub auto_delete: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "customImage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The custom source image to be used to restore this disk when instantiating this instance template."]
    pub custom_image: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deviceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the device name of the disk to which the configurations apply to."]
    pub device_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instantiateFrom")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether to include the disk and what image to use. Possible values are:  \n- source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. \n- source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. \n- custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. \n- attach-read-only: to attach a read-only disk. Applicable to read-only disks. \n- do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks."]
    pub instantiate_from: ::std::option::Option<DiskInstantiationConfigInstantiateFromEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies whether to include the disk and what image to use. Possible values are:  \n- source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. \n- source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. \n- custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. \n- attach-read-only: to attach a read-only disk. Applicable to read-only disks. \n- do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks."]
pub enum DiskInstantiationConfigInstantiateFromEnum {
    #[serde(rename = "ATTACH_READ_ONLY")]
    #[doc = ""]
    AttachReadOnly,
    #[serde(rename = "BLANK")]
    #[doc = ""]
    Blank,
    #[serde(rename = "CUSTOM_IMAGE")]
    #[doc = ""]
    CustomImage,
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
    #[serde(rename = "DO_NOT_INCLUDE")]
    #[doc = ""]
    DoNotInclude,
    #[serde(rename = "SOURCE_IMAGE")]
    #[doc = ""]
    SourceImage,
    #[serde(rename = "SOURCE_IMAGE_FAMILY")]
    #[doc = ""]
    SourceImageFamily,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A list of Disk resources."]
pub struct DiskList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Disk resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Disk>>>,
    #[serde(rename = "kind")]
    #[serde(default = "disk_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#diskList for lists of disks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<DiskListWarning>,
}
mod disk_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#diskList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct DiskListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DiskListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DiskListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DiskListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskMoveRequest {
    #[serde(rename = "destinationZone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone \n- projects/project/zones/zone \n- zones/zone"]
    pub destination_zone: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk \n- projects/project/zones/zone/disks/disk \n- zones/zone/disks/disk"]
    pub target_disk: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Disk Type resource.\n\nGoogle Compute Engine has two Disk Type resources:\n\n* [Regional](/compute/docs/reference/rest/{$api_version}/regionDiskTypes) * [Zonal](/compute/docs/reference/rest/{$api_version}/diskTypes)\n\nYou can choose from a variety of disk types based on your needs. For more information, read Storage options.\n\nThe diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks.\n\nThe regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks. (== resource_for {$api_version}.diskTypes ==) (== resource_for {$api_version}.regionDiskTypes ==)"]
pub struct DiskType {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultDiskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined default disk size in GB."]
    pub default_disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this disk type."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional description of this resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "disk_type_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#diskType for disk types."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "validDiskSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional textual description of the valid disk size, such as \"10GB-10TB\"."]
    pub valid_disk_size: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod disk_type_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#diskType")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskTypeAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of DiskTypesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<DiskTypesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "disk_type_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#diskTypeAggregatedList."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<DiskTypeAggregatedListWarning>,
}
mod disk_type_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#diskTypeAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct DiskTypeAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DiskTypeAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DiskTypeAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DiskTypeAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskTypeAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of disk types."]
pub struct DiskTypeList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of DiskType resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<DiskType>>>,
    #[serde(rename = "kind")]
    #[serde(default = "disk_type_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#diskTypeList for disk types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<DiskTypeListWarning>,
}
mod disk_type_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#diskTypeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct DiskTypeListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DiskTypeListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DiskTypeListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DiskTypeListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskTypeListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskTypesScopedList {
    #[serde(rename = "diskTypes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of disk types contained in this scope."]
    pub disk_types: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<DiskType>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of disk types when the list is empty."]
    pub warning: ::std::option::Option<DiskTypesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of disk types when the list is empty."]
pub struct DiskTypesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DiskTypesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DiskTypesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DiskTypesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DiskTypesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DisksAddResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be added to this disk. Currently you can only specify one policy here."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DisksRemoveResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be removed from this disk."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DisksResizeRequest {
    #[serde(rename = "sizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The new size of the persistent disk, which is specified in GB."]
    pub size_gb: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DisksScopedList {
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of disks contained in this scope."]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Disk>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of disks when the list is empty."]
    pub warning: ::std::option::Option<DisksScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of disks when the list is empty."]
pub struct DisksScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<DisksScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<DisksScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum DisksScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DisksScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A set of Display Device options"]
pub struct DisplayDevice {
    #[serde(rename = "enableDisplay")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has Display enabled."]
    pub enable_display: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DistributionPolicy {
    #[serde(rename = "targetShape")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType)."]
    pub target_shape: ::std::option::Option<DistributionPolicyTargetShapeEnum>,
    #[serde(rename = "zones")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Zones where the regional managed instance group will create and manage its instances."]
    pub zones: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<DistributionPolicyZoneConfiguration>>,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType)."]
pub enum DistributionPolicyTargetShapeEnum {
    #[serde(rename = "ANY")]
    #[doc = ""]
    Any,
    #[serde(rename = "BALANCED")]
    #[doc = ""]
    Balanced,
    #[serde(rename = "EVEN")]
    #[doc = ""]
    Even,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct DistributionPolicyZoneConfiguration {
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the zone. The zone must exist in the region where the managed instance group is located."]
    pub zone: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years."]
pub struct Duration {
    #[serde(rename = "nanos")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive."]
    pub nanos: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "seconds")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"]
    pub seconds: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ExchangedPeeringRoute {
    #[serde(rename = "destRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The destination range of the route."]
    pub dest_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "imported")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict."]
    pub imported: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "nextHopRegion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The region of peering route next hop, only applies to dynamic routes."]
    pub next_hop_region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The priority of the peering route."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of the peering route."]
    pub _type: ::std::option::Option<ExchangedPeeringRouteTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of the peering route."]
pub enum ExchangedPeeringRouteTypeEnum {
    #[serde(rename = "DYNAMIC_PEERING_ROUTE")]
    #[doc = ""]
    DynamicPeeringRoute,
    #[serde(rename = "STATIC_PEERING_ROUTE")]
    #[doc = ""]
    StaticPeeringRoute,
    #[serde(rename = "SUBNET_PEERING_ROUTE")]
    #[doc = ""]
    SubnetPeeringRoute,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ExchangedPeeringRoutesList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ExchangedPeeringRoute resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ExchangedPeeringRoute>>>,
    #[serde(rename = "kind")]
    #[serde(default = "exchanged_peering_routes_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ExchangedPeeringRoutesListWarning>,
}
mod exchanged_peering_routes_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#exchangedPeeringRoutesList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ExchangedPeeringRoutesListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ExchangedPeeringRoutesListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ExchangedPeeringRoutesListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ExchangedPeeringRoutesListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ExchangedPeeringRoutesListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.\n\nExample (Comparison):\n\ntitle: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\"\n\nExample (Equality):\n\ntitle: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\"\n\nExample (Logic):\n\ntitle: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\"\n\nExample (Data Manipulation):\n\ntitle: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\"\n\nThe exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."]
pub struct Expr {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expression")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Textual representation of an expression in Common Expression Language syntax."]
    pub expression: ::std::option::Option<::std::string::String>,
    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."]
    pub location: ::std::option::Option<::std::string::String>,
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."]
    pub title: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an external VPN gateway.\n\nExternal VPN gateway is the on-premises VPN gateway(s) or another cloud provider's VPN gateway that connects to your Google Cloud VPN gateway.\n\nTo create a highly available VPN from Google Cloud Platform to your VPN gateway or another cloud provider's VPN gateway, you must create a external VPN gateway resource with information about the other gateway.\n\nFor more information about using external VPN gateways, see  Creating an HA VPN gateway and tunnel pair to a peer VPN. (== resource_for {$api_version}.externalVpnGateways ==)"]
pub struct ExternalVpnGateway {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of interfaces for this external VPN gateway."]
    pub interfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ExternalVpnGatewayInterface>>>,
    #[serde(rename = "kind")]
    #[serde(default = "external_vpn_gateway_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "redundancyType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates the user-supplied redundancy type of this external VPN gateway."]
    pub redundancy_type: ::std::option::Option<ExternalVpnGatewayRedundancyTypeEnum>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
}
mod external_vpn_gateway_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#externalVpnGateway")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates the user-supplied redundancy type of this external VPN gateway."]
pub enum ExternalVpnGatewayRedundancyTypeEnum {
    #[serde(rename = "FOUR_IPS_REDUNDANCY")]
    #[doc = ""]
    FourIpsRedundancy,
    #[serde(rename = "SINGLE_IP_INTERNALLY_REDUNDANT")]
    #[doc = ""]
    SingleIpInternallyRedundant,
    #[serde(rename = "TWO_IPS_REDUNDANCY")]
    #[doc = ""]
    TwoIpsRedundancy,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The interface for the external VPN gateway."]
pub struct ExternalVpnGatewayInterface {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: SINGLE_IP_INTERNALLY_REDUNDANT - 0 TWO_IPS_REDUNDANCY - 0, 1 FOUR_IPS_REDUNDANCY - 0, 1, 2, 3"]
    pub id: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine."]
    pub ip_address: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Response to the list request, and contains a list of externalVpnGateways."]
pub struct ExternalVpnGatewayList {
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ExternalVpnGateway resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ExternalVpnGateway>>>,
    #[serde(rename = "kind")]
    #[serde(default = "external_vpn_gateway_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#externalVpnGatewayList  for lists of externalVpnGateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ExternalVpnGatewayListWarning>,
}
mod external_vpn_gateway_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#externalVpnGatewayList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ExternalVpnGatewayListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ExternalVpnGatewayListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ExternalVpnGatewayListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ExternalVpnGatewayListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ExternalVpnGatewayListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FileContentBuffer {
    #[serde(rename = "content")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The raw content in the secure keys file."]
    pub content: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fileType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The file type of source file."]
    pub file_type: ::std::option::Option<FileContentBufferFileTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The file type of source file."]
pub enum FileContentBufferFileTypeEnum {
    #[serde(rename = "BIN")]
    #[doc = ""]
    Bin,
    #[serde(rename = "UNDEFINED")]
    #[doc = ""]
    Undefined,
    #[serde(rename = "X509")]
    #[doc = ""]
    X509,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Firewall Rule resource.\n\nFirewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules."]
pub struct Firewall {
    #[serde(rename = "allowed")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection."]
    pub allowed: ::std::option::Option<::std::vec::Vec<FirewallAllowed>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "denied")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection."]
    pub denied: ::std::option::Option<::std::vec::Vec<FirewallDenied>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this field when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "destinationRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported."]
    pub destination_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "direction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields."]
    pub direction: ::std::option::Option<FirewallDirectionEnum>,
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled."]
    pub disabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableLogging")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecated in favor of enable in LogConfig. This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be exported t Cloud Logging."]
    pub enable_logging: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#firewall for firewall rules."]
    pub kind: ::std::string::String,
    #[serde(rename = "logConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field denotes the logging options for a particular firewall rule. If logging is enabled, logs will be exported to Cloud Logging."]
    pub log_config: ::std::option::Option<::std::boxed::Box<FirewallLogConfig>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used:\nglobal/networks/default\nIf you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network \n- projects/myproject/global/networks/my-network \n- global/networks/default"]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Only IPv4 is supported."]
    pub source_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceServiceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags."]
    pub source_service_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceTags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply."]
    pub source_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetServiceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network."]
    pub target_service_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetTags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network."]
    pub target_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod firewall_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewall")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallAllowed {
    #[serde(rename = "IPProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number."]
    pub ip_protocol: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"]."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallDenied {
    #[serde(rename = "IPProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number."]
    pub ip_protocol: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"]."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields."]
pub enum FirewallDirectionEnum {
    #[serde(rename = "EGRESS")]
    #[doc = ""]
    Egress,
    #[serde(rename = "INGRESS")]
    #[doc = ""]
    Ingress,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of firewalls."]
pub struct FirewallList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Firewall resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Firewall>>>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#firewallList for lists of firewalls."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<FirewallListWarning>,
}
mod firewall_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewallList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct FirewallListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<FirewallListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<FirewallListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum FirewallListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The available logging options for a firewall rule."]
pub struct FirewallLogConfig {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field denotes whether to enable logging for a particular firewall rule."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs."]
    pub metadata: ::std::option::Option<FirewallLogConfigMetadataEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs."]
pub enum FirewallLogConfigMetadataEnum {
    #[serde(rename = "EXCLUDE_ALL_METADATA")]
    #[doc = ""]
    ExcludeAllMetadata,
    #[serde(rename = "INCLUDE_ALL_METADATA")]
    #[doc = ""]
    IncludeAllMetadata,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPoliciesListAssociationsResponse {
    #[serde(rename = "associations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of associations."]
    pub associations:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyAssociation>>>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_policies_list_associations_response_defaults :: kind")]
    #[doc = "[Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations."]
    pub kind: ::std::string::String,
}
mod firewall_policies_list_associations_response_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewallPoliciesListAssociationsResponse")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Firewall Policy resource. (== resource_for {$api_version}.firewallPolicies ==)"]
pub struct FirewallPolicy {
    #[serde(rename = "associations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of associations that belong to this firewall policy."]
    pub associations:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyAssociation>>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-provided name of the Organization firewall plicy. The name should be unique in the organization in which the firewall policy is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make get() request to the firewall policy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_policy_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies"]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource. It is a numeric ID allocated by GCP which uniquely identifies the Firewall Policy."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "parent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The parent of the firewall policy."]
    pub parent: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ruleTupleCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples."]
    pub rule_tuple_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match \"*\"). If no rules are provided when creating a firewall policy, a default rule with action \"allow\" will be added."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyRule>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
}
mod firewall_policy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewallPolicy")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPolicyAssociation {
    #[serde(rename = "attachmentTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The target that the firewall policy is attached to."]
    pub attachment_target: ::std::option::Option<::std::string::String>,
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The display name of the firewall policy of the association."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "firewallPolicyId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The firewall policy ID of the association."]
    pub firewall_policy_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name for an association."]
    pub name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPolicyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of FirewallPolicy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_policy_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies"]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<FirewallPolicyListWarning>,
}
mod firewall_policy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewallPolicyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct FirewallPolicyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<FirewallPolicyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<FirewallPolicyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum FirewallPolicyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPolicyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny)."]
pub struct FirewallPolicyRule {
    #[serde(rename = "action")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Action to perform when the client connection triggers the rule. Can currently be either \"allow\" or \"deny()\" where valid values for status are 403, 404, and 502."]
    pub action: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description for this resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "direction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The direction in which this rule applies."]
    pub direction: ::std::option::Option<FirewallPolicyRuleDirectionEnum>,
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled."]
    pub disabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableLogging")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on \"goto_next\" rules."]
    pub enable_logging: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "kind")]
    #[serde(default = "firewall_policy_rule_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules"]
    pub kind: ::std::string::String,
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced."]
    pub _match: ::std::option::Option<::std::boxed::Box<FirewallPolicyRuleMatcher>>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ruleTupleCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Calculation of the complexity of a single firewall policy rule."]
    pub rule_tuple_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "targetResources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule."]
    pub target_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetSecureLabels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of secure labels that controls which instances the firewall rule applies to. If targetSecureLabel are specified, then the firewall rule applies only to instances in the VPC network that have one of those secure labels. targetSecureLabel may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureLabel are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label values allowed is 256."]
    pub target_secure_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetSecureTags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256."]
    pub target_secure_tags:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyRuleSecureTag>>>,
    #[serde(rename = "targetServiceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts indicating the sets of instances that are applied with this rule."]
    pub target_service_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod firewall_policy_rule_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#firewallPolicyRule")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The direction in which this rule applies."]
pub enum FirewallPolicyRuleDirectionEnum {
    #[serde(rename = "EGRESS")]
    #[doc = ""]
    Egress,
    #[serde(rename = "INGRESS")]
    #[doc = ""]
    Ingress,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified."]
pub struct FirewallPolicyRuleMatcher {
    #[serde(rename = "destIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256."]
    pub dest_ip_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "layer4Configs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Pairs of IP protocols and ports that the rule should match."]
    pub layer4_configs: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<FirewallPolicyRuleMatcherLayer4Config>>,
    >,
    #[serde(rename = "srcIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256."]
    pub src_ip_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "srcSecureLabels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of firewall label values, which should be matched at the source of the traffic. Maximum number of source label values allowed is 256."]
    pub src_secure_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "srcSecureTags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256."]
    pub src_secure_tags:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyRuleSecureTag>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPolicyRuleMatcherLayer4Config {
    #[serde(rename = "ipProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number."]
    pub ip_protocol: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"]."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct FirewallPolicyRuleSecureTag {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the secure tag, created with TagManager's TagValue API."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted."]
    pub state: ::std::option::Option<FirewallPolicyRuleSecureTagStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted."]
pub enum FirewallPolicyRuleSecureTagStateEnum {
    #[serde(rename = "EFFECTIVE")]
    #[doc = ""]
    Effective,
    #[serde(rename = "INEFFECTIVE")]
    #[doc = ""]
    Ineffective,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Encapsulates numeric value that can be either absolute or relative."]
pub struct FixedOrPercent {
    #[serde(rename = "calculated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Absolute value of VM instances calculated based on the specific mode.\n\n \n- If the value is fixed, then the calculated value is equal to the fixed value. \n- If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded up."]
    pub calculated: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "fixed")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fixed number of VM instances. This must be a positive integer."]
    pub fixed: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "percent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%."]
    pub percent: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Forwarding Rule resource.\n\nForwarding rule resources in GCP can be either regional or global in scope:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/globalForwardingRules) * [Regional](/compute/docs/reference/rest/{$api_version}/forwardingRules)\n\nA forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud Platform load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway).\n\nFor more information, read Forwarding rule concepts and Using protocol forwarding.\n\n(== resource_for {$api_version}.forwardingRules ==) (== resource_for {$api_version}.globalForwardingRules ==) (== resource_for {$api_version}.regionForwardingRules ==)"]
pub struct ForwardingRule {
    #[serde(rename = "IPAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule.\n\nIf you don't specify a reserved IP address, an ephemeral IP address is assigned. Methods for specifying an IP address:\n\n* IPv4 dotted decimal, as in `100.1.2.3` * Full URL, as in https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name * Partial URL or by name, as in:  \n- projects/project_id/regions/region/addresses/address-name \n- regions/region/addresses/address-name \n- global/addresses/address-name \n- address-name  \n\nThe loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).\n\nMust be set to `0.0.0.0` when the target is targetGrpcProxy that has validateForProxyless field set to true."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "IPProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies.\n\nFor protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.\n\nThe valid IP protocols are different for different load balancing products:  \n- Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid. \n- Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.  \n- Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid. \n- HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid. \n- Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid."]
    pub ip_protocol: ::std::option::Option<ForwardingRuleIpProtocolEnum>,
    #[serde(rename = "allPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. This field cannot be used with port or portRange fields.\n\nWhen the load balancing scheme is INTERNAL and protocol is TCP/UDP, specify this field to allow packets addressed to any ports will be forwarded to the backends configured with this forwarding rule."]
    pub all_ports: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "allowGlobalAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer."]
    pub allow_global_access: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "backendService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Identifies the backend service to which the forwarding rule sends traffic. Required for Internal TCP/UDP Load Balancing and Network Load Balancing; must be omitted for all other load balancer types."]
    pub backend_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request.\n\nTo see the latest fingerprint, make a get() request to retrieve a ForwardingRule."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipVersion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule."]
    pub ip_version: ::std::option::Option<ForwardingRuleIpVersionEnum>,
    #[serde(rename = "isMirroringCollector")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL."]
    pub is_mirroring_collector: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "kind")]
    #[serde(default = "forwarding_rule_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a ForwardingRule."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "loadBalancingScheme")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the forwarding rule type.\n\n \n- EXTERNAL is used for:  \n- Classic Cloud VPN gateways \n- Protocol forwarding to VMs from an external IP address \n- HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing    \n- INTERNAL is used for:  \n- Protocol forwarding to VMs from an internal IP address \n- Internal TCP/UDP Load Balancing   \n- INTERNAL_MANAGED is used for:  \n- Internal HTTP(S) Load Balancing   \n- INTERNAL_SELF_MANAGED is used for:  \n- Traffic Director    \n\nFor more information about forwarding rules, refer to Forwarding rule concepts."]
    pub load_balancing_scheme: ::std::option::Option<ForwardingRuleLoadBalancingSchemeEnum>,
    #[serde(rename = "metadataFilters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the ForwardingRule will not be visible to those proxies.\nFor each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match.\nmetadataFilters specified here will be applifed before those specified in the UrlMap that this ForwardingRule references.\nmetadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED."]
    pub metadata_filters: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MetadataFilter>>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is not used for external load balancing.\n\nFor Internal TCP/UDP Load Balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.\n\nFor regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.\n\nIf this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address."]
    pub network_tier: ::std::option::Option<ForwardingRuleNetworkTierEnum>,
    #[serde(rename = "portRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field can be used only if: * Load balancing scheme is one of EXTERNAL,  INTERNAL_SELF_MANAGED or INTERNAL_MANAGED, and * IPProtocol is one of TCP, UDP, or SCTP.\n\nPackets addressed to ports in the specified range will be forwarded to target or  backend_service. You can only use one of ports, port_range, or allPorts. The three are mutually exclusive. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.\n\nSome types of forwarding target have constraints on the acceptable ports:  \n- TargetHttpProxy: 80, 8080 \n- TargetHttpsProxy: 443 \n- TargetGrpcProxy: no constraints \n- TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222 \n- TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222 \n- TargetVpnGateway: 500, 4500"]
    pub port_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The ports field is only supported when the forwarding rule references a backend_service directly. Supported load balancing products are Internal TCP/UDP Load Balancing and Network Load Balancing. Only packets addressed to the specified list of ports are forwarded to backends.\n\nYou can only use one of ports and port_range, or allPorts. The three are mutually exclusive.\n\nYou can specify a list of up to five ports, which can be non-contiguous.\n\nFor Internal TCP/UDP Load Balancing, if you specify allPorts, you should not specify ports.\n\nFor more information, see [Port specifications](/load-balancing/docs/forwarding-rule-concepts#port_specifications)."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "pscConnectionId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The PSC connection id of the PSC Forwarding Rule."]
    pub psc_connection_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serviceDirectoryRegistrations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource.\n\nIt is only supported for Internal TCP/UDP Load Balancing and Internal HTTP(S) Load Balancing."]
    pub service_directory_registrations: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<ForwardingRuleServiceDirectoryRegistration>>,
    >,
    #[serde(rename = "serviceLabel")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name.\n\nThe label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThis field is only used for internal load balancing."]
    pub service_label: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The internal fully qualified service name for this Forwarding Rule.\n\nThis field is only used for internal load balancing."]
    pub service_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is only used for internal load balancing.\n\nFor internal load balancing, this field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule.\n\nIf the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "target")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. For more information, see the \"Target\" column in [Port specifications](/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications)."]
    pub target: ::std::option::Option<::std::string::String>,
}
mod forwarding_rule_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#forwardingRule")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The IP protocol to which this rule applies.\n\nFor protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.\n\nThe valid IP protocols are different for different load balancing products:  \n- Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid. \n- Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.  \n- Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid. \n- HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid. \n- Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid."]
pub enum ForwardingRuleIpProtocolEnum {
    #[serde(rename = "AH")]
    #[doc = ""]
    Ah,
    #[serde(rename = "ALL")]
    #[doc = ""]
    All,
    #[serde(rename = "ESP")]
    #[doc = ""]
    Esp,
    #[serde(rename = "ICMP")]
    #[doc = ""]
    Icmp,
    #[serde(rename = "SCTP")]
    #[doc = ""]
    Sctp,
    #[serde(rename = "TCP")]
    #[doc = ""]
    Tcp,
    #[serde(rename = "UDP")]
    #[doc = ""]
    Udp,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule."]
pub enum ForwardingRuleIpVersionEnum {
    #[serde(rename = "IPV4")]
    #[doc = ""]
    Ipv4,
    #[serde(rename = "IPV6")]
    #[doc = ""]
    Ipv6,
    #[serde(rename = "UNSPECIFIED_VERSION")]
    #[doc = ""]
    UnspecifiedVersion,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the forwarding rule type.\n\n \n- EXTERNAL is used for:  \n- Classic Cloud VPN gateways \n- Protocol forwarding to VMs from an external IP address \n- HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing    \n- INTERNAL is used for:  \n- Protocol forwarding to VMs from an internal IP address \n- Internal TCP/UDP Load Balancing   \n- INTERNAL_MANAGED is used for:  \n- Internal HTTP(S) Load Balancing   \n- INTERNAL_SELF_MANAGED is used for:  \n- Traffic Director    \n\nFor more information about forwarding rules, refer to Forwarding rule concepts."]
pub enum ForwardingRuleLoadBalancingSchemeEnum {
    #[serde(rename = "EXTERNAL")]
    #[doc = ""]
    External,
    #[serde(rename = "EXTERNAL_MANAGED")]
    #[doc = ""]
    ExternalManaged,
    #[serde(rename = "INTERNAL")]
    #[doc = ""]
    Internal,
    #[serde(rename = "INTERNAL_MANAGED")]
    #[doc = ""]
    InternalManaged,
    #[serde(rename = "INTERNAL_SELF_MANAGED")]
    #[doc = ""]
    InternalSelfManaged,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.\n\nFor regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.\n\nIf this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address."]
pub enum ForwardingRuleNetworkTierEnum {
    #[serde(rename = "FIXED_STANDARD")]
    #[doc = ""]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "SELECT")]
    #[doc = ""]
    Select,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    #[doc = ""]
    StandardOverridesFixedStandard,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRuleAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ForwardingRulesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<ForwardingRulesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "forwarding_rule_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ForwardingRuleAggregatedListWarning>,
}
mod forwarding_rule_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#forwardingRuleAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ForwardingRuleAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ForwardingRuleAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ForwardingRuleAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ForwardingRuleAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRuleAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of ForwardingRule resources."]
pub struct ForwardingRuleList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ForwardingRule resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ForwardingRule>>>,
    #[serde(rename = "kind")]
    #[serde(default = "forwarding_rule_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ForwardingRuleListWarning>,
}
mod forwarding_rule_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#forwardingRuleList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ForwardingRuleListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ForwardingRuleListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ForwardingRuleListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ForwardingRuleListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRuleListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRuleReference {
    #[serde(rename = "forwardingRule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub forwarding_rule: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule."]
pub struct ForwardingRuleServiceDirectoryRegistration {
    #[serde(rename = "namespace")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service Directory namespace to register the forwarding rule under."]
    pub namespace: ::std::option::Option<::std::string::String>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service Directory service to register the forwarding rule under."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serviceDirectoryRegion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Optional] Service Directory region to register this global forwarding rule under. Default to \"us-central1\". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region."]
    pub service_directory_region: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRulesScopedList {
    #[serde(rename = "forwardingRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of forwarding rules contained in this scope."]
    pub forwarding_rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ForwardingRule>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of forwarding rules when the list is empty."]
    pub warning: ::std::option::Option<ForwardingRulesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of forwarding rules when the list is empty."]
pub struct ForwardingRulesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ForwardingRulesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ForwardingRulesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ForwardingRulesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ForwardingRulesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GrpcHealthCheck {
    #[serde(rename = "grpcServiceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention:\n- Empty service_name means the overall status of all services at the backend.\n- Non-empty service_name means the health of that gRPC service, as defined by the owner of the service.\nThe grpc_service_name can only be ASCII."]
    pub grpc_service_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, gRPC health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<GrpcHealthCheckPortSpecificationEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, gRPC health check follows behavior specified in port and portName fields."]
pub enum GrpcHealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GetOwnerInstanceResponse {
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Full instance resource URL."]
    pub instance: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GlobalNetworkEndpointGroupsAttachEndpointsRequest {
    #[serde(rename = "networkEndpoints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of network endpoints to be attached."]
    pub network_endpoints:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpoint>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GlobalNetworkEndpointGroupsDetachEndpointsRequest {
    #[serde(rename = "networkEndpoints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of network endpoints to be detached."]
    pub network_endpoints:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpoint>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GlobalOrganizationSetPolicyRequest {
    #[serde(rename = "bindings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings."]
    pub bindings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Binding>>>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "policy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them."]
    pub policy: ::std::option::Option<::std::boxed::Box<Policy>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GlobalSetLabelsRequest {
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of labels to apply for this resource. Each label key & value must comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For example, \"webserver-frontend\": \"images\". A label value can also be empty (e.g. \"my-label\": \"\")."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct GlobalSetPolicyRequest {
    #[serde(rename = "bindings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings."]
    pub bindings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Binding>>>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "policy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them."]
    pub policy: ::std::option::Option<::std::boxed::Box<Policy>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server."]
pub struct GrpcServiceConfig {
    #[serde(rename = "callCredentials")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The call credentials to access the SDS server."]
    pub call_credentials: ::std::option::Option<::std::boxed::Box<CallCredentials>>,
    #[serde(rename = "channelCredentials")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The channel credentials to access the SDS server."]
    pub channel_credentials: ::std::option::Option<::std::boxed::Box<ChannelCredentials>>,
    #[serde(rename = "targetUri")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The target URI of the SDS server."]
    pub target_uri: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A guest attributes entry."]
pub struct GuestAttributes {
    #[serde(rename = "kind")]
    #[serde(default = "guest_attributes_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry."]
    pub kind: ::std::string::String,
    #[serde(rename = "queryPath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The path to be queried. This can be the default namespace ('/') or a nested namespace ('/\\/') or a specified key ('/\\/\\')"]
    pub query_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "queryValue")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The value of the requested queried path."]
    pub query_value: ::std::option::Option<::std::boxed::Box<GuestAttributesValue>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "variableKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The key to search for."]
    pub variable_key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "variableValue")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The value found for the requested key."]
    pub variable_value: ::std::option::Option<::std::string::String>,
}
mod guest_attributes_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#guestAttributes")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A guest attributes namespace/key/value entry."]
pub struct GuestAttributesEntry {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Key for the guest attribute entry."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namespace")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Namespace for the guest attribute entry."]
    pub namespace: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Value for the guest attribute entry."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Array of guest attribute namespace/key/value tuples."]
pub struct GuestAttributesValue {
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestAttributesEntry>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Guest OS features."]
pub struct GuestOsFeature {
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options."]
    pub _type: ::std::option::Option<GuestOsFeatureTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options."]
pub enum GuestOsFeatureTypeEnum {
    #[serde(rename = "BARE_METAL_LINUX_COMPATIBLE")]
    #[doc = ""]
    BareMetalLinuxCompatible,
    #[serde(rename = "FEATURE_TYPE_UNSPECIFIED")]
    #[doc = ""]
    FeatureTypeUnspecified,
    #[serde(rename = "GVNIC")]
    #[doc = ""]
    Gvnic,
    #[serde(rename = "MULTI_IP_SUBNET")]
    #[doc = ""]
    MultiIpSubnet,
    #[serde(rename = "SECURE_BOOT")]
    #[doc = ""]
    SecureBoot,
    #[serde(rename = "SEV_CAPABLE")]
    #[doc = ""]
    SevCapable,
    #[serde(rename = "UEFI_COMPATIBLE")]
    #[doc = ""]
    UefiCompatible,
    #[serde(rename = "VIRTIO_SCSI_MULTIQUEUE")]
    #[doc = ""]
    VirtioScsiMultiqueue,
    #[serde(rename = "WINDOWS")]
    #[doc = ""]
    Windows,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct Http2HealthCheck {
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTP2 health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<Http2HealthCheckPortSpecificationEnum>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<Http2HealthCheckProxyHeaderEnum>,
    #[serde(rename = "requestPath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The request path of the HTTP/2 health check request. The default value is /."]
    pub request_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTP2 health check follows behavior specified in port and portName fields."]
pub enum Http2HealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum Http2HealthCheckProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HttpHealthCheck {
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTP health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<HttpHealthCheckPortSpecificationEnum>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<HttpHealthCheckProxyHeaderEnum>,
    #[serde(rename = "requestPath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The request path of the HTTP health check request. The default value is /."]
    pub request_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTP health check follows behavior specified in port and portName fields."]
pub enum HttpHealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum HttpHealthCheckProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HttpsHealthCheck {
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTPS health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<HttpsHealthCheckPortSpecificationEnum>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<HttpsHealthCheckProxyHeaderEnum>,
    #[serde(rename = "requestPath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The request path of the HTTPS health check request. The default value is /."]
    pub request_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, HTTPS health check follows behavior specified in port and portName fields."]
pub enum HttpsHealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum HttpsHealthCheckProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Health Check resource.\n\nGoogle Compute Engine has two Health Check resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/healthChecks) * [Regional](/compute/docs/reference/rest/{$api_version}/regionHealthChecks)\n\nInternal HTTP(S) load balancers must use regional health checks (`compute.v1.regionHealthChecks`).\n\nTraffic Director must use global health checks (`compute.v1.HealthChecks`).\n\nInternal TCP/UDP load balancers can use either regional or global health checks (`compute.v1.regionHealthChecks` or `compute.v1.HealthChecks`).\n\nExternal HTTP(S), TCP proxy, and SSL proxy load balancers as well as managed instance group auto-healing must use global health checks (`compute.v1.HealthChecks`).\n\nNetwork load balancers must use legacy HTTP health checks (httpHealthChecks).\n\nFor more information, see Health checks overview."]
pub struct HealthCheck {
    #[serde(rename = "checkIntervalSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "How often (in seconds) to send a health check. The default value is 5 seconds."]
    pub check_interval_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in 3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "grpcHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub grpc_health_check: ::std::option::Option<::std::boxed::Box<GrpcHealthCheck>>,
    #[serde(rename = "healthyThreshold")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."]
    pub healthy_threshold: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "http2HealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub http2_health_check: ::std::option::Option<::std::boxed::Box<Http2HealthCheck>>,
    #[serde(rename = "httpHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub http_health_check: ::std::option::Option<::std::boxed::Box<HttpHealthCheck>>,
    #[serde(rename = "httpsHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub https_health_check: ::std::option::Option<::std::boxed::Box<HttpsHealthCheck>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "health_check_defaults :: kind")]
    #[doc = "Type of the resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "logConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configure logging on this health check."]
    pub log_config: ::std::option::Option<::std::boxed::Box<HealthCheckLogConfig>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Region where the health check resides. Not applicable to global health checks."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sslHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub ssl_health_check: ::std::option::Option<::std::boxed::Box<SslHealthCheck>>,
    #[serde(rename = "tcpHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub tcp_health_check: ::std::option::Option<::std::boxed::Box<TcpHealthCheck>>,
    #[serde(rename = "timeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."]
    pub timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field."]
    pub _type: ::std::option::Option<HealthCheckTypeEnum>,
    #[serde(rename = "udpHealthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub udp_health_check: ::std::option::Option<::std::boxed::Box<UdpHealthCheck>>,
    #[serde(rename = "unhealthyThreshold")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."]
    pub unhealthy_threshold: ::std::option::Option<::std::primitive::i64>,
}
mod health_check_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthCheck")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field."]
pub enum HealthCheckTypeEnum {
    #[serde(rename = "GRPC")]
    #[doc = ""]
    Grpc,
    #[serde(rename = "HTTP")]
    #[doc = ""]
    Http,
    #[serde(rename = "HTTP2")]
    #[doc = ""]
    Http2,
    #[serde(rename = "HTTPS")]
    #[doc = ""]
    Https,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "SSL")]
    #[doc = ""]
    Ssl,
    #[serde(rename = "TCP")]
    #[doc = ""]
    Tcp,
    #[serde(rename = "UDP")]
    #[doc = ""]
    Udp,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of HealthCheck resources."]
pub struct HealthCheckList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthCheck resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheck>>>,
    #[serde(rename = "kind")]
    #[serde(default = "health_check_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HealthCheckListWarning>,
}
mod health_check_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthCheckList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HealthCheckListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthCheckListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthCheckListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthCheckListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver."]
pub struct HealthCheckLogConfig {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not to export logs. This is false by default, which means no health check logging will be done."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A full or valid partial URL to a health check. For example, the following are valid URLs:  \n- https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check \n- projects/project-id/global/httpHealthChecks/health-check \n- global/httpHealthChecks/health-check"]
pub struct HealthCheckReference {
    #[serde(rename = "healthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub health_check: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Health-Check as a Service resource.\n\n(== resource_for {$api_version}.regionHealthCheckServices ==)"]
pub struct HealthCheckService {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks</code? must belong to the same region as zones of NEGs."]
    pub health_checks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "healthStatusAggregationPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified.  \n- NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. \n- AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. ."]
    pub health_status_aggregation_policy:
        ::std::option::Option<HealthCheckServiceHealthStatusAggregationPolicyEnum>,
    #[serde(rename = "healthStatusAggregationStrategy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is deprecated. Use health_status_aggregation_policy instead.\n\nPolicy for how the results from multiple health checks for the same endpoint are aggregated.  \n- NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. \n- AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. ."]
    pub health_status_aggregation_strategy:
        ::std::option::Option<HealthCheckServiceHealthStatusAggregationStrategyEnum>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "health_check_service_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#healthCheckServicefor health check services."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkEndpointGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService."]
    pub network_endpoint_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notificationEndpoints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global."]
    pub notification_endpoints: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL with id for the resource."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
}
mod health_check_service_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthCheckService")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified.  \n- NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. \n- AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. ."]
pub enum HealthCheckServiceHealthStatusAggregationPolicyEnum {
    #[serde(rename = "AND")]
    #[doc = ""]
    And,
    #[serde(rename = "NO_AGGREGATION")]
    #[doc = ""]
    NoAggregation,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This field is deprecated. Use health_status_aggregation_policy instead.\n\nPolicy for how the results from multiple health checks for the same endpoint are aggregated.  \n- NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. \n- AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. ."]
pub enum HealthCheckServiceHealthStatusAggregationStrategyEnum {
    #[serde(rename = "AND")]
    #[doc = ""]
    And,
    #[serde(rename = "NO_AGGREGATION")]
    #[doc = ""]
    NoAggregation,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of HealthCheckServicesScopedList."]
pub struct HealthCheckServiceAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthCheckServicesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<HealthCheckServicesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "health_check_service_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HealthCheckServiceAggregatedListWarning>,
}
mod health_check_service_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthCheckServiceAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HealthCheckServiceAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthCheckServiceAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthCheckServiceAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthCheckServiceAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckServiceAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A full or valid partial URL to a health check service. For example, the following are valid URLs:  \n- https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service \n- projects/project-id/regions/us-west1/healthCheckServices/health-check-service \n- regions/us-west1/healthCheckServices/health-check-service"]
pub struct HealthCheckServiceReference {
    #[serde(rename = "healthCheckService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub health_check_service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckServicesList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthCheckService resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheckService>>>,
    #[serde(rename = "kind")]
    #[serde(default = "health_check_services_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HealthCheckServicesListWarning>,
}
mod health_check_services_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthCheckServicesList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HealthCheckServicesListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthCheckServicesListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthCheckServicesListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthCheckServicesListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckServicesListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckServicesScopedList {
    #[serde(rename = "resources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthCheckServices contained in this scope."]
    pub resources: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheckService>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<HealthCheckServicesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct HealthCheckServicesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthCheckServicesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthCheckServicesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthCheckServicesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthCheckServicesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthChecksAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthChecksScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<HealthChecksScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "health_checks_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HealthChecksAggregatedListWarning>,
}
mod health_checks_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#healthChecksAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HealthChecksAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthChecksAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthChecksAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthChecksAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthChecksAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthChecksScopedList {
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HealthChecks contained in this scope."]
    pub health_checks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheck>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<HealthChecksScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct HealthChecksScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HealthChecksScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HealthChecksScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HealthChecksScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthChecksScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthStatus {
    #[serde(rename = "annotations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Metadata defined as annotations for network endpoint."]
    pub annotations:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "healthState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Health state of the instance."]
    pub health_state: ::std::option::Option<HealthStatusHealthStateEnum>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the instance resource."]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For target pool based Network Load Balancing, it indicates the forwarding rule's IP address assigned to this instance. For other types of load balancing, the field indicates VM internal ip."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The named port of the instance group, not necessarily the port that is health-checked."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "weight")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub weight: ::std::option::Option<::std::string::String>,
    #[serde(rename = "weightError")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub weight_error: ::std::option::Option<HealthStatusWeightErrorEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Health state of the instance."]
pub enum HealthStatusHealthStateEnum {
    #[serde(rename = "HEALTHY")]
    #[doc = ""]
    Healthy,
    #[serde(rename = "UNHEALTHY")]
    #[doc = ""]
    Unhealthy,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum HealthStatusWeightErrorEnum {
    #[serde(rename = "INVALID_WEIGHT")]
    #[doc = ""]
    InvalidWeight,
    #[serde(rename = "MISSING_WEIGHT")]
    #[doc = ""]
    MissingWeight,
    #[serde(rename = "UNAVAILABLE_WEIGHT")]
    #[doc = ""]
    UnavailableWeight,
    #[serde(rename = "WEIGHT_NONE")]
    #[doc = ""]
    WeightNone,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HealthStatusForNetworkEndpoint {
    #[serde(rename = "backendService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the backend service associated with the health state of the network endpoint."]
    pub backend_service: ::std::option::Option<::std::boxed::Box<BackendServiceReference>>,
    #[serde(rename = "forwardingRule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the forwarding rule associated with the health state of the network endpoint."]
    pub forwarding_rule: ::std::option::Option<::std::boxed::Box<ForwardingRuleReference>>,
    #[serde(rename = "healthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the health check associated with the health state of the network endpoint."]
    pub health_check: ::std::option::Option<::std::boxed::Box<HealthCheckReference>>,
    #[serde(rename = "healthCheckService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the health check service associated with the health state of the network endpoint."]
    pub health_check_service: ::std::option::Option<::std::boxed::Box<HealthCheckServiceReference>>,
    #[serde(rename = "healthState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Health state of the network endpoint determined based on the health checks configured."]
    pub health_state: ::std::option::Option<HealthStatusForNetworkEndpointHealthStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Health state of the network endpoint determined based on the health checks configured."]
pub enum HealthStatusForNetworkEndpointHealthStateEnum {
    #[serde(rename = "DRAINING")]
    #[doc = ""]
    Draining,
    #[serde(rename = "HEALTHY")]
    #[doc = ""]
    Healthy,
    #[serde(rename = "UNHEALTHY")]
    #[doc = ""]
    Unhealthy,
    #[serde(rename = "UNKNOWN")]
    #[doc = ""]
    Unknown,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService."]
pub struct HostRule {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "hosts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or ..\n* based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub hosts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "pathMatcher")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion."]
    pub path_matcher: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specification for how requests are aborted as part of fault injection."]
pub struct HttpFaultAbort {
    #[serde(rename = "httpStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HTTP status code used to abort the request.\nThe value must be between 200 and 599 inclusive."]
    pub http_status: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "percentage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.\nThe value must be between 0.0 and 100.0 inclusive."]
    pub percentage: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection."]
pub struct HttpFaultDelay {
    #[serde(rename = "fixedDelay")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the value of the fixed delay interval."]
    pub fixed_delay: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "percentage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection.\nThe value must be between 0.0 and 100.0 inclusive."]
    pub percentage: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests."]
pub struct HttpFaultInjection {
    #[serde(rename = "abort")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The specification for how client requests are aborted as part of fault injection."]
    pub abort: ::std::option::Option<::std::boxed::Box<HttpFaultAbort>>,
    #[serde(rename = "delay")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service."]
    pub delay: ::std::option::Option<::std::boxed::Box<HttpFaultDelay>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "HttpFilterConfiguration supplies additional contextual settings for networkservices.HttpFilter resources enabled by Traffic Director."]
pub struct HttpFilterConfig {
    #[serde(rename = "config")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configuration needed to enable the networkservices.HttpFilter resource. The configuration must be YAML formatted and only contain fields defined in the protobuf identified in configTypeUrl"]
    pub config: ::std::option::Option<::std::string::String>,
    #[serde(rename = "configTypeUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fully qualified versioned proto3 type url of the protobuf that the filter expects for its contextual settings, for example: type.googleapis.com/google.protobuf.Struct"]
    pub config_type_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "filterName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the networkservices.HttpFilter resource this configuration belongs to. This name must be known to the xDS client. Example: envoy.wasm"]
    pub filter_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The request and response header transformations that take effect before the request is passed along to the selected backendService."]
pub struct HttpHeaderAction {
    #[serde(rename = "requestHeadersToAdd")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Headers to add to a matching request prior to forwarding the request to the backendService."]
    pub request_headers_to_add:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpHeaderOption>>>,
    #[serde(rename = "requestHeadersToRemove")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService."]
    pub request_headers_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "responseHeadersToAdd")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Headers to add the response prior to sending the response back to the client."]
    pub response_headers_to_add:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpHeaderOption>>>,
    #[serde(rename = "responseHeadersToRemove")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of header names for headers that need to be removed from the response prior to sending the response back to the client."]
    pub response_headers_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "matchRule criteria for request header matches."]
pub struct HttpHeaderMatch {
    #[serde(rename = "exactMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value should exactly match contents of exactMatch.\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set."]
    pub exact_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the HTTP header to match.\nFor matching against the HTTP request's authority, use a headerMatch with the header name \":authority\".\nFor matching a request's method, use the headerName \":method\".\nWhen the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin."]
    pub header_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "invertMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met.\nThe default setting is false."]
    pub invert_match: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "prefixMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the header must start with the contents of prefixMatch.\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set."]
    pub prefix_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "presentMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set."]
    pub present_match: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "rangeMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails.\nFor example for a range [-5, 0]  \n- -3 will match. \n- 0 will not match. \n- 0.25 will not match. \n- -3someString will not match.  \nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.\nNote that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL."]
    pub range_match: ::std::option::Option<::std::boxed::Box<Int64RangeMatch>>,
    #[serde(rename = "regexMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see:  github.com/google/re2/wiki/Syntax \nFor matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier.\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.\nNote that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED."]
    pub regex_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "suffixMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the header must end with the contents of suffixMatch.\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set."]
    pub suffix_match: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specification determining how headers are added to requests or responses."]
pub struct HttpHeaderOption {
    #[serde(rename = "headerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the header."]
    pub header_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerValue")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the header to add."]
    pub header_value: ::std::option::Option<::std::string::String>,
    #[serde(rename = "replace")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.\nThe default value is false."]
    pub replace: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of HttpHealthCheck resources."]
pub struct HttpHealthCheckList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HttpHealthCheck resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpHealthCheck>>>,
    #[serde(rename = "kind")]
    #[serde(default = "http_health_check_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HttpHealthCheckListWarning>,
}
mod http_health_check_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#httpHealthCheckList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HttpHealthCheckListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HttpHealthCheckListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HttpHealthCheckListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HttpHealthCheckListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HttpHealthCheckListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "HttpRouteRuleMatch criteria for a request's query parameter."]
pub struct HttpQueryParameterMatch {
    #[serde(rename = "exactMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.\nOnly one of presentMatch, exactMatch or regexMatch must be set."]
    pub exact_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "presentMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.\nOnly one of presentMatch, exactMatch or regexMatch must be set."]
    pub present_match: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "regexMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax \nOnly one of presentMatch, exactMatch or regexMatch must be set.\nNote that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED."]
    pub regex_match: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies settings for an HTTP redirect."]
pub struct HttpRedirectAction {
    #[serde(rename = "hostRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The host that will be used in the redirect response instead of the one that was supplied in the request.\nThe value must be between 1 and 255 characters."]
    pub host_redirect: ::std::option::Option<::std::string::String>,
    #[serde(rename = "httpsRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.\nThis must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted.\nThe default is set to false."]
    pub https_redirect: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "pathRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The path that will be used in the redirect response instead of the one that was supplied in the request.\npathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.\nThe value must be between 1 and 1024 characters."]
    pub path_redirect: ::std::option::Option<::std::string::String>,
    #[serde(rename = "prefixRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request.\nprefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.\nThe value must be between 1 and 1024 characters."]
    pub prefix_redirect: ::std::option::Option<::std::string::String>,
    #[serde(rename = "redirectResponseCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HTTP Status code to use for this RedirectAction.\nSupported values are:  \n- MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. \n- FOUND, which corresponds to 302. \n- SEE_OTHER which corresponds to 303. \n- TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. \n- PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained."]
    pub redirect_response_code: ::std::option::Option<HttpRedirectActionRedirectResponseCodeEnum>,
    #[serde(rename = "stripQuery")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\nThe default is set to false."]
    pub strip_query: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The HTTP Status code to use for this RedirectAction.\nSupported values are:  \n- MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. \n- FOUND, which corresponds to 302. \n- SEE_OTHER which corresponds to 303. \n- TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. \n- PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained."]
pub enum HttpRedirectActionRedirectResponseCodeEnum {
    #[serde(rename = "FOUND")]
    #[doc = ""]
    Found,
    #[serde(rename = "MOVED_PERMANENTLY_DEFAULT")]
    #[doc = ""]
    MovedPermanentlyDefault,
    #[serde(rename = "PERMANENT_REDIRECT")]
    #[doc = ""]
    PermanentRedirect,
    #[serde(rename = "SEE_OTHER")]
    #[doc = ""]
    SeeOther,
    #[serde(rename = "TEMPORARY_REDIRECT")]
    #[doc = ""]
    TemporaryRedirect,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The retry policy associates with HttpRouteRule"]
pub struct HttpRetryPolicy {
    #[serde(rename = "numRetries")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1."]
    pub num_retries: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "perTryTimeout")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a non-zero timeout per retry attempt.\nIf not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route."]
    pub per_try_timeout: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "retryConditions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specfies one or more conditions when this retry rule applies. Valid values are:  \n- 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. \n- gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.\n- \n- connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts. \n- retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409. \n- refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. \n- cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled \n- deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded \n- resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted \n- unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable"]
    pub retry_conditions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HttpRouteAction {
    #[serde(rename = "corsPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing \nNot supported when the URL map is bound to target gRPC proxy."]
    pub cors_policy: ::std::option::Option<::std::boxed::Box<CorsPolicy>>,
    #[serde(rename = "faultInjectionPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.\ntimeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub fault_injection_policy: ::std::option::Option<::std::boxed::Box<HttpFaultInjection>>,
    #[serde(rename = "maxStreamDuration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed.\nIf not specified, will use the largest maxStreamDuration among all backend services associated with the route.\nThis field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED."]
    pub max_stream_duration: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "requestMirrorPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub request_mirror_policy: ::std::option::Option<::std::boxed::Box<RequestMirrorPolicy>>,
    #[serde(rename = "retryPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the retry policy associated with this route.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub retry_policy: ::std::option::Option<::std::boxed::Box<HttpRetryPolicy>>,
    #[serde(rename = "timeout")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.\nIf not specified, will use the largest timeout among all backend services associated with the route.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub timeout: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "urlRewrite")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The spec to modify the URL of the request, prior to forwarding the request to the matched service.\nurlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub url_rewrite: ::std::option::Option<::std::boxed::Box<UrlRewrite>>,
    #[serde(rename = "weightedBackendServices")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non-zero number.\nOnce a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction."]
    pub weighted_backend_services:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<WeightedBackendService>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform."]
pub struct HttpRouteRule {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The short description conveying the intent of this routeRule.\nThe description can have a maximum length of 1024 characters."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies changes to request and response headers that need to take effect for the selected backendService.\nThe headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction \nNote that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub header_action: ::std::option::Option<::std::boxed::Box<HttpHeaderAction>>,
    #[serde(rename = "httpFilterConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Outbound route specific configuration for networkservices.HttpFilter resources enabled by Traffic Director. httpFilterConfigs only applies for Loadbalancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub http_filter_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpFilterConfig>>>,
    #[serde(rename = "httpFilterMetadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Outbound route specific metadata supplied to networkservices.HttpFilter resources enabled by Traffic Director. httpFilterMetadata only applies for Loadbalancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details.\nThe only configTypeUrl supported is type.googleapis.com/google.protobuf.Struct \nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub http_filter_metadata:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpFilterConfig>>>,
    #[serde(rename = "matchRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule."]
    pub match_rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpRouteRuleMatch>>>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied.\nYou cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive.\nPriority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "routeAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If  routeAction specifies any  weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices.\nOnly one of urlRedirect, service or routeAction.weightedBackendService must be set.\nUrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction."]
    pub route_action: ::std::option::Option<::std::boxed::Box<HttpRouteAction>>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified.\nOnly one of urlRedirect, service or routeAction.weightedBackendService must be set."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "When this rule is matched, the request is redirected to a URL specified by urlRedirect.\nIf urlRedirect is specified, service or routeAction must not be set.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub url_redirect: ::std::option::Option<::std::boxed::Box<HttpRedirectAction>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur."]
pub struct HttpRouteRuleMatch {
    #[serde(rename = "fullPathMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.\nfullPathMatch must be between 1 and 1024 characters.\nOnly one of prefixMatch, fullPathMatch or regexMatch must be specified."]
    pub full_path_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerMatches")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a list of header match criteria, all of which must match corresponding headers in the request."]
    pub header_matches: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpHeaderMatch>>>,
    #[serde(rename = "ignoreCase")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies that prefixMatch and fullPathMatch matches are case sensitive.\nThe default value is false.\nignoreCase must not be used with regexMatch.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub ignore_case: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "metadataFilters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies.\nFor each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match.\nmetadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to.\nmetadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub metadata_filters: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MetadataFilter>>>,
    #[serde(rename = "prefixMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.\nThe value must be between 1 and 1024 characters.\nOnly one of prefixMatch, fullPathMatch or regexMatch must be specified."]
    pub prefix_match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "queryParameterMatches")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub query_parameter_matches:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpQueryParameterMatch>>>,
    #[serde(rename = "regexMatch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax \nOnly one of prefixMatch, fullPathMatch or regexMatch must be specified.\nNote that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED."]
    pub regex_match: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of HttpsHealthCheck resources."]
pub struct HttpsHealthCheckList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of HttpsHealthCheck resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpsHealthCheck>>>,
    #[serde(rename = "kind")]
    #[serde(default = "https_health_check_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<HttpsHealthCheckListWarning>,
}
mod https_health_check_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#httpsHealthCheckList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct HttpsHealthCheckListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<HttpsHealthCheckListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<HttpsHealthCheckListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum HttpsHealthCheckListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct HttpsHealthCheckListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Image resource.\n\nYou can use images to create boot disks for your VM instances. For more information, read Images. (== resource_for {$api_version}.images ==)"]
pub struct Image {
    #[serde(rename = "archiveSizeBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Size of the image tar.gz archive stored in Google Cloud Storage (in bytes)."]
    pub archive_size_bytes: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The deprecation status associated with this image."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Size of the image when restored onto a persistent disk (in GB)."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "family")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035."]
    pub family: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options."]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "imageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts the image using a customer-supplied encryption key.\n\nAfter you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later."]
    pub image_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "kind")]
    #[serde(default = "image_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#image for images."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an image."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this image. These can be later modified by the setLabels method."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "licenseCodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Integer license codes indicating which licenses are attached to this image."]
    pub license_codes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "licenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Any applicable license URI."]
    pub licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rawDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The parameters of the raw disk image."]
    pub raw_disk: ::std::option::Option<ImageRawDisk>,
    #[serde(rename = "rolloutOverride")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A rollout policy to apply to this image. When specified, the rollout policy overrides per-zone references to the image via the associated image family. The rollout policy restricts the zones where this image is accessible when using a zonal image family reference. When the rollout policy does not include the user specified zone, or if the zone is rolled out, this image is accessible."]
    pub rollout_override: ::std::option::Option<::std::boxed::Box<RolloutPolicy>>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "shieldedInstanceInitialState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Set the secure boot keys of shielded instance."]
    pub shielded_instance_initial_state:
        ::std::option::Option<::std::boxed::Box<InitialStateConfig>>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the source disk used to create this image. This can be a full or valid partial URL. You must provide either this property or the rawDisk.source property but not both to create an image. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk \n- projects/project/zones/zone/disks/disk \n- zones/zone/disks/disk"]
    pub source_disk: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key."]
    pub source_disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceDiskId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name."]
    pub source_disk_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceImage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the source image used to create this image.\n\nIn order to create an image, you must provide the full or partial URL of one of the following:  \n- The selfLink URL  \n- This property  \n- The rawDisk.source URL  \n- The sourceDisk URL"]
    pub source_image: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceImageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key."]
    pub source_image_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceImageId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name."]
    pub source_image_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the source snapshot used to create this image.\n\nIn order to create an image, you must provide the full or partial URL of one of the following:  \n- The selfLink URL  \n- This property \n- The sourceImage URL  \n- The rawDisk.source URL  \n- The sourceDisk URL"]
    pub source_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceSnapshotEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key."]
    pub source_snapshot_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceSnapshotId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name."]
    pub source_snapshot_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceType")]
    #[serde(default = "image_defaults :: source_type")]
    #[doc = "The type of the image used to create this disk. The default and only value is RAW"]
    pub source_type: ImageSourceTypeEnum,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY."]
    pub status: ::std::option::Option<ImageStatusEnum>,
    #[serde(rename = "storageLocations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud Storage bucket storage location of the image (regional or multi-regional)."]
    pub storage_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod image_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#image")
    }
    pub fn source_type() -> super::ImageSourceTypeEnum {
        serde_json::from_str(&"RAW").unwrap()
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The parameters of the raw disk image."]
pub struct ImageRawDisk {
    #[serde(rename = "containerType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created."]
    pub container_type: ::std::option::Option<ImageRawDiskContainerTypeEnum>,
    #[serde(rename = "sha1Checksum")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created."]
    pub sha1_checksum: ::std::option::Option<::std::string::String>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full Google Cloud Storage URL where the disk image is stored. You must provide either this property or the sourceDisk property but not both."]
    pub source: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created."]
pub enum ImageRawDiskContainerTypeEnum {
    #[serde(rename = "TAR")]
    #[doc = ""]
    Tar,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of the image used to create this disk. The default and only value is RAW"]
pub enum ImageSourceTypeEnum {
    #[serde(rename = "RAW")]
    #[doc = ""]
    Raw,
}
impl ::std::default::Default for ImageSourceTypeEnum {
    fn default() -> Self {
        Self::Raw
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY."]
pub enum ImageStatusEnum {
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "PENDING")]
    #[doc = ""]
    Pending,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ImageFamilyView {
    #[serde(rename = "image")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The latest image that is part of the specified image family in the requested location, and that is not deprecated."]
    pub image: ::std::option::Option<::std::boxed::Box<Image>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of images."]
pub struct ImageList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Image resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Image>>>,
    #[serde(rename = "kind")]
    #[serde(default = "image_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ImageListWarning>,
}
mod image_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#imageList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ImageListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ImageListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ImageListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ImageListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ImageListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a InPlaceSnapshot resource.\n\nYou can use in-place snapshots to create disk rollback points quickly.. (== resource_for {$api_version}.inPlaceSnapshots ==)"]
pub struct InPlaceSnapshot {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Size of the source disk, specified in GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestFlush")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies to create an application consistent in-place snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS)."]
    pub guest_flush: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "in_place_snapshot_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#inPlaceSnapshot for InPlaceSnapshot resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this InPlaceSnapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a InPlaceSnapshot."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this InPlaceSnapshot. These can be later modified by the setLabels method. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the in-place snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the source disk used to create this in-place snapshot. Note that the source disk must be in the same zone/region as the in-place snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk \n- projects/project/zones/zone/disks/disk \n- zones/zone/disks/disk"]
    pub source_disk: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the disk used to create this InPlaceSnapshot. This value may be used to determine whether the InPlaceSnapshot was taken from the current or a previous instance of a given disk name."]
    pub source_disk_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the inPlaceSnapshot. This can be CREATING, DELETING, FAILED, or READY."]
    pub status: ::std::option::Option<InPlaceSnapshotStatusEnum>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the in-place snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod in_place_snapshot_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#inPlaceSnapshot")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the inPlaceSnapshot. This can be CREATING, DELETING, FAILED, or READY."]
pub enum InPlaceSnapshotStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of InPlaceSnapshot resources."]
pub struct InPlaceSnapshotList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InPlaceSnapshot resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InPlaceSnapshot>>>,
    #[serde(rename = "kind")]
    #[serde(default = "in_place_snapshot_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InPlaceSnapshotListWarning>,
}
mod in_place_snapshot_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#inPlaceSnapshotList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InPlaceSnapshotListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InPlaceSnapshotListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InPlaceSnapshotListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InPlaceSnapshotListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InPlaceSnapshotListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Initial State for shielded instance, these are public keys which are safe to store in public"]
pub struct InitialStateConfig {
    #[serde(rename = "dbs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Key Database (db)."]
    pub dbs: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FileContentBuffer>>>,
    #[serde(rename = "dbxs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The forbidden key database (dbx)."]
    pub dbxs: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FileContentBuffer>>>,
    #[serde(rename = "keks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Key Exchange Key (KEK)."]
    pub keks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FileContentBuffer>>>,
    #[serde(rename = "pk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Platform Key (PK)."]
    pub pk: ::std::option::Option<::std::boxed::Box<FileContentBuffer>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Instance resource.\n\nAn instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances. (== resource_for {$api_version}.instances ==)"]
pub struct Instance {
    #[serde(rename = "advancedMachineFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Controls for advanced machine-related behavior features."]
    pub advanced_machine_features:
        ::std::option::Option<::std::boxed::Box<AdvancedMachineFeatures>>,
    #[serde(rename = "canIpForward")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding."]
    pub can_ip_forward: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "confidentialInstanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub confidential_instance_config:
        ::std::option::Option<::std::boxed::Box<ConfidentialInstanceConfig>>,
    #[serde(rename = "cpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The CPU platform used by this instance."]
    pub cpu_platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deletionProtection")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the resource should be protected against deletion."]
    pub deletion_protection: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Array of disks associated with this instance. Persistent disks must be created before you can assign them."]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AttachedDisk>>>,
    #[serde(rename = "displayDevice")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Enables display device for the instance."]
    pub display_device: ::std::option::Option<::std::boxed::Box<DisplayDevice>>,
    #[serde(rename = "eraseWindowsVssSignature")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the disks restored from source snapshots or source machine image should erase Windows specific VSS signature."]
    pub erase_windows_vss_signature: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance.\n\nTo see the latest fingerprint, make get() request to the instance."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestAccelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of the type and count of accelerator cards attached to the instance."]
    pub guest_accelerators:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "hostname")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS."]
    pub hostname: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts or decrypts data for an instance with a customer-supplied encryption key.\n\nIf you are creating a new instance, this field encrypts the local SSD and in-memory contents of the instance using a key that you provide.\n\nIf you are restarting an instance protected with a customer-supplied encryption key, you must provide the correct key in order to successfully restart the instance.\n\nIf you do not provide an encryption key when creating the instance, then the local SSD and in-memory contents will be encrypted using an automatically generated key and you do not need to provide a key to start the instance later.\n\nInstance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt local SSDs and in-memory content in a managed instance group."]
    pub instance_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#instance for instances."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.\n\nTo see the latest fingerprint, make get() request to the instance."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this instance. These can be later modified by the setLabels method."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "lastStartTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Last start timestamp in RFC3339 text format."]
    pub last_start_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "lastStopTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Last stop timestamp in RFC3339 text format."]
    pub last_stop_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "lastSuspendedTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Last suspended timestamp in RFC3339 text format."]
    pub last_suspended_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "machineType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type:\nzones/us-central1-f/machineTypes/n1-standard-1\n\n\nTo create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB):\nzones/zone/machineTypes/custom-CPUS-MEMORY\n\n\nFor example: zones/us-central1-f/machineTypes/custom-4-5120 \n\nFor a full list of restrictions, read the Specifications for custom machine types."]
    pub machine_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The metadata key/value pairs assigned to this instance. This includes custom metadata and predefined keys."]
    pub metadata: ::std::option::Option<::std::boxed::Box<Metadata>>,
    #[serde(rename = "minCpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\"."]
    pub min_cpu_platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkInterfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance."]
    pub network_interfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkInterface>>>,
    #[serde(rename = "networkPerformanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub network_performance_config:
        ::std::option::Option<::std::boxed::Box<NetworkPerformanceConfig>>,
    #[serde(rename = "postKeyRevocationActionType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "PostKeyRevocationActionType of the instance."]
    pub post_key_revocation_action_type:
        ::std::option::Option<InstancePostKeyRevocationActionTypeEnum>,
    #[serde(rename = "preservedStateSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Total amount of preserved state for SUSPENDED instances. Read-only in the api."]
    pub preserved_state_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateIpv6GoogleAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The private IPv6 google access type for the VM. If not specified, use  INHERIT_FROM_SUBNETWORK as default."]
    pub private_ipv6_google_access: ::std::option::Option<InstancePrivateIpv6GoogleAccessEnum>,
    #[serde(rename = "reservationAffinity")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the reservations that this instance can consume from."]
    pub reservation_affinity: ::std::option::Option<::std::boxed::Box<ReservationAffinity>>,
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies applied to this instance."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "resourceStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Specifies values set for instance attributes as compared to the values requested by user in the corresponding input only field."]
    pub resource_status: ::std::option::Option<::std::boxed::Box<ResourceStatus>>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "scheduling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Sets the scheduling options for this instance."]
    pub scheduling: ::std::option::Option<::std::boxed::Box<Scheduling>>,
    #[serde(rename = "secureLabels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Secure labels to apply to this instance. These can be later modified by the update method. Maximum number of secure labels allowed is 300."]
    pub secure_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "secureTags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Secure tags to apply to this instance. These can be later modified by the update method. Maximum number of secure tags allowed is 300."]
    pub secure_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serviceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported.\n\nService accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information."]
    pub service_accounts: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ServiceAccount>>>,
    #[serde(rename = "shieldedInstanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub shielded_instance_config: ::std::option::Option<::std::boxed::Box<ShieldedInstanceConfig>>,
    #[serde(rename = "shieldedInstanceIntegrityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub shielded_instance_integrity_policy:
        ::std::option::Option<::std::boxed::Box<ShieldedInstanceIntegrityPolicy>>,
    #[serde(rename = "shieldedVmConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecating, please use shielded_instance_config."]
    pub shielded_vm_config: ::std::option::Option<::std::boxed::Box<ShieldedVmConfig>>,
    #[serde(rename = "shieldedVmIntegrityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecating, please use shielded_instance_integrity_policy."]
    pub shielded_vm_integrity_policy:
        ::std::option::Option<::std::boxed::Box<ShieldedVmIntegrityPolicy>>,
    #[serde(rename = "sourceMachineImage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Source machine image"]
    pub source_machine_image: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceMachineImageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Source GMI encryption key when creating an instance from GMI."]
    pub source_machine_image_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "startRestricted")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity."]
    pub start_restricted: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see  Instance life cycle."]
    pub status: ::std::option::Option<InstanceStatusEnum>,
    #[serde(rename = "statusMessage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional, human-readable explanation of the status."]
    pub status_message: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Tags to apply to this instance. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during instance creation. The tags can be later modified by the setTags method. Each tag within the list must comply with RFC1035. Multiple tags can be specified via the 'tags.items' field."]
    pub tags: ::std::option::Option<::std::boxed::Box<Tags>>,
    #[serde(rename = "upcomingMaintenance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Specifies upcoming maintenance for the instance."]
    pub upcoming_maintenance: ::std::option::Option<::std::boxed::Box<UpcomingMaintenance>>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod instance_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instance")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "PostKeyRevocationActionType of the instance."]
pub enum InstancePostKeyRevocationActionTypeEnum {
    #[serde(rename = "NOOP")]
    #[doc = ""]
    Noop,
    #[serde(rename = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    #[doc = ""]
    PostKeyRevocationActionTypeUnspecified,
    #[serde(rename = "SHUTDOWN")]
    #[doc = ""]
    Shutdown,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The private IPv6 google access type for the VM. If not specified, use  INHERIT_FROM_SUBNETWORK as default."]
pub enum InstancePrivateIpv6GoogleAccessEnum {
    #[serde(rename = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableBidirectionalAccessToGoogle,
    #[serde(rename = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableOutboundVmAccessToGoogle,
    #[serde(rename = "INHERIT_FROM_SUBNETWORK")]
    #[doc = ""]
    InheritFromSubnetwork,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see  Instance life cycle."]
pub enum InstanceStatusEnum {
    #[serde(rename = "DEPROVISIONING")]
    #[doc = ""]
    Deprovisioning,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
    #[serde(rename = "REPAIRING")]
    #[doc = ""]
    Repairing,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
    #[serde(rename = "STAGING")]
    #[doc = ""]
    Staging,
    #[serde(rename = "STOPPED")]
    #[doc = ""]
    Stopped,
    #[serde(rename = "STOPPING")]
    #[doc = ""]
    Stopping,
    #[serde(rename = "SUSPENDED")]
    #[doc = ""]
    Suspended,
    #[serde(rename = "SUSPENDING")]
    #[doc = ""]
    Suspending,
    #[serde(rename = "TERMINATED")]
    #[doc = ""]
    Terminated,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An object that contains a list of instances scoped by zone."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<InstancesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "instance_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceAggregatedListWarning>,
}
mod instance_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Instance Group resource.\n\nInstance Groups can be used to configure a target for load balancing.\n\nInstance groups can either be managed or unmanaged.\n\nTo create  managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead.\n\nUse zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups.\n\nFor more information, read Instance groups.\n\n(== resource_for {$api_version}.instanceGroups ==) (== resource_for {$api_version}.regionInstanceGroups ==)"]
pub struct InstanceGroup {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The creation timestamp for this instance group in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A unique identifier for this instance group, generated by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroup for instance groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namedPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Assigns a name to a port number. For example: {name: \"http\", port: 80}\n\nThis allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: \"http\", port: 80},{name: \"http\", port: 8080}] \n\nNamed ports apply to all instances in this instance group."]
    pub named_ports: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NamedPort>>>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0)."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the region where the instance group is located (for regional resources)."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL for this instance group. The server generates this URL."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "size")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The total number of instances in the instance group."]
    pub size: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0)."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the zone where the instance group is located (for zonal resources)."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod instance_group_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroup")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroupsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<InstanceGroupsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupAggregatedListWarning>,
}
mod instance_group_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A list of InstanceGroup resources."]
pub struct InstanceGroupList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroup resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroup>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupList for instance group lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupListWarning>,
}
mod instance_group_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Managed Instance Group resource.\n\nAn instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups.\n\nFor zonal Managed Instance Group, use the instanceGroupManagers resource.\n\nFor regional Managed Instance Group, use the regionInstanceGroupManagers resource. (== resource_for {$api_version}.instanceGroupManagers ==) (== resource_for {$api_version}.regionInstanceGroupManagers ==)"]
pub struct InstanceGroupManager {
    #[serde(rename = "autoHealingPolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The autohealing policy for this managed instance group. You can specify only one value."]
    pub auto_healing_policies: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<InstanceGroupManagerAutoHealingPolicy>>,
    >,
    #[serde(rename = "baseInstanceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035."]
    pub base_instance_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The creation timestamp for this managed instance group in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "currentActions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions."]
    pub current_actions:
        ::std::option::Option<::std::boxed::Box<InstanceGroupManagerActionsSummary>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "distributionPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Policy specifying the intended distribution of managed instances across zones in a regional managed instance group."]
    pub distribution_policy: ::std::option::Option<::std::boxed::Box<DistributionPolicy>>,
    #[serde(rename = "failoverAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER."]
    pub failover_action: ::std::option::Option<InstanceGroupManagerFailoverActionEnum>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A unique identifier for this resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceGroup")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the Instance Group resource."]
    pub instance_group: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE."]
    pub instance_template: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_manager_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namedPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Named ports configured for the Instance Groups complementary to this Instance Group Manager."]
    pub named_ports: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NamedPort>>>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the region where the managed instance group resides (for regional resources)."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL for this managed instance group. The server defines this URL."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serviceAccount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The service account to be used as credentials for all operations performed by the managed instance group on instances. The service accounts needs all permissions required to create and delete instances. By default, the service account {projectNumber}@cloudservices.gserviceaccount.com is used."]
    pub service_account: ::std::option::Option<::std::string::String>,
    #[serde(rename = "statefulPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Stateful configuration for this Instanced Group Manager"]
    pub stateful_policy: ::std::option::Option<::std::boxed::Box<StatefulPolicy>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of this managed instance group."]
    pub status: ::std::option::Option<::std::boxed::Box<InstanceGroupManagerStatus>>,
    #[serde(rename = "targetPools")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."]
    pub target_pools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number."]
    pub target_size: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "updatePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The update policy for this managed instance group."]
    pub update_policy: ::std::option::Option<::std::boxed::Box<InstanceGroupManagerUpdatePolicy>>,
    #[serde(rename = "versions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the instance templates used by this managed instance group to create instances.\n\nEach version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates."]
    pub versions:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroupManagerVersion>>>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of a zone where the managed instance group is located (for zonal resources)."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod instance_group_manager_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupManager")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER."]
pub enum InstanceGroupManagerFailoverActionEnum {
    #[serde(rename = "NO_FAILOVER")]
    #[doc = ""]
    NoFailover,
    #[serde(rename = "UNKNOWN")]
    #[doc = ""]
    Unknown,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerActionsSummary {
    #[serde(rename = "abandoning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it."]
    pub abandoning: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "creating")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully.\n\nIf you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated."]
    pub creating: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "creatingWithoutRetries")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly."]
    pub creating_without_retries: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "deleting")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted."]
    pub deleting: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "none")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are running and have no scheduled actions."]
    pub none: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "recreating")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template."]
    pub recreating: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "refreshing")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance."]
    pub refreshing: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "restarting")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted."]
    pub restarting: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "verifying")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation."]
    pub verifying: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroupManagersScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<InstanceGroupManagersScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_manager_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupManagerAggregatedListWarning>,
}
mod instance_group_manager_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupManagerAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupManagerAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupManagerAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupManagerAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupManagerAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = ""]
pub struct InstanceGroupManagerAutoHealingPolicy {
    #[serde(rename = "healthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL for the health check that signals autohealing."]
    pub health_check: ::std::option::Option<::std::string::String>,
    #[serde(rename = "initialDelaySec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600]."]
    pub initial_delay_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maxUnavailable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum number of instances that can be unavailable when autohealing. When 'percent' is used, the value is rounded UP. The instance is considered available if all of the following conditions are satisfied: 1. Instance's status is RUNNING. 2. Instance's currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM.\n\nBy default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy."]
    pub max_unavailable: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] A list of managed instance groups."]
pub struct InstanceGroupManagerList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroupManager resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroupManager>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_group_manager_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupManagerListWarning>,
}
mod instance_group_manager_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupManagerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupManagerListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupManagerListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupManagerListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupManagerListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerStatus {
    #[serde(rename = "autoscaler")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the Autoscaler that targets this instance group manager."]
    pub autoscaler: ::std::option::Option<::std::string::String>,
    #[serde(rename = "isStable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified."]
    pub is_stable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "stateful")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Stateful status of the given Instance Group Manager."]
    pub stateful: ::std::option::Option<::std::boxed::Box<InstanceGroupManagerStatusStateful>>,
    #[serde(rename = "versionTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager."]
    pub version_target:
        ::std::option::Option<::std::boxed::Box<InstanceGroupManagerStatusVersionTarget>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerStatusStateful {
    #[serde(rename = "hasStatefulConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions."]
    pub has_stateful_config: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "isStateful")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions. This field is deprecated in favor of has_stateful_config."]
    pub is_stateful: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "perInstanceConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Status of per-instance configs on the instance."]
    pub per_instance_configs: ::std::option::Option<
        ::std::boxed::Box<InstanceGroupManagerStatusStatefulPerInstanceConfigs>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerStatusStatefulPerInstanceConfigs {
    #[serde(rename = "allEffective")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs."]
    pub all_effective: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerStatusVersionTarget {
    #[serde(rename = "isReached")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager."]
    pub is_reached: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerUpdatePolicy {
    #[serde(rename = "instanceRedistributionType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The  instance redistribution policy for regional managed instance groups. Valid values are:  \n- PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. \n- NONE: For non-autoscaled groups, proactive redistribution is disabled."]
    pub instance_redistribution_type:
        ::std::option::Option<InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum>,
    #[serde(rename = "maxSurge")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded up if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates.\n\nAt least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge."]
    pub max_surge: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
    #[serde(rename = "maxUnavailable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied:\n\n \n- The instance's status is RUNNING. \n- If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available.  This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded up if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates.\n\nAt least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable."]
    pub max_unavailable: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
    #[serde(rename = "minReadySec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]."]
    pub min_ready_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minimalAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action."]
    pub minimal_action: ::std::option::Option<InstanceGroupManagerUpdatePolicyMinimalActionEnum>,
    #[serde(rename = "mostDisruptiveAllowedAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all."]
    pub most_disruptive_allowed_action:
        ::std::option::Option<InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum>,
    #[serde(rename = "replacementMethod")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "What action should be used to replace instances. See minimal_action.REPLACE"]
    pub replacement_method:
        ::std::option::Option<InstanceGroupManagerUpdatePolicyReplacementMethodEnum>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls)."]
    pub _type: ::std::option::Option<InstanceGroupManagerUpdatePolicyTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The  instance redistribution policy for regional managed instance groups. Valid values are:  \n- PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. \n- NONE: For non-autoscaled groups, proactive redistribution is disabled."]
pub enum InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROACTIVE")]
    #[doc = ""]
    Proactive,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action."]
pub enum InstanceGroupManagerUpdatePolicyMinimalActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all."]
pub enum InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "What action should be used to replace instances. See minimal_action.REPLACE"]
pub enum InstanceGroupManagerUpdatePolicyReplacementMethodEnum {
    #[serde(rename = "RECREATE")]
    #[doc = ""]
    Recreate,
    #[serde(rename = "SUBSTITUTE")]
    #[doc = ""]
    Substitute,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls)."]
pub enum InstanceGroupManagerUpdatePolicyTypeEnum {
    #[serde(rename = "OPPORTUNISTIC")]
    #[doc = ""]
    Opportunistic,
    #[serde(rename = "PROACTIVE")]
    #[doc = ""]
    Proactive,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagerVersion {
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached."]
    pub instance_template: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the version. Unique among all versions in the scope of this managed instance group."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Tag describing the version. Used to trigger rollout of a target version even if instance_template remains unchanged. Deprecated in favor of 'name'."]
    pub tag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to:  \n- If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. \n- if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded up.  If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information."]
    pub target_size: ::std::option::Option<::std::boxed::Box<FixedOrPercent>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersAbandonInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "InstanceGroupManagers.applyUpdatesToInstances"]
pub struct InstanceGroupManagersApplyUpdatesRequest {
    #[serde(rename = "allInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flag to update all instances instead of specified list of ?instances?. If the flag is set to true then the instances may not be specified in the request."]
    pub all_instances: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "maximalAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action."]
    pub maximal_action:
        ::std::option::Option<InstanceGroupManagersApplyUpdatesRequestMaximalActionEnum>,
    #[serde(rename = "minimalAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimal action that you want to perform on each instance during the update:  \n- REPLACE: At minimum, delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update."]
    pub minimal_action:
        ::std::option::Option<InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum>,
    #[serde(rename = "mostDisruptiveAllowedAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The most disruptive action that you want to perform on each instance during the update:  \n- REPLACE: Delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail."]
    pub most_disruptive_allowed_action: ::std::option::Option<
        InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action."]
pub enum InstanceGroupManagersApplyUpdatesRequestMaximalActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The minimal action that you want to perform on each instance during the update:  \n- REPLACE: At minimum, delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update."]
pub enum InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The most disruptive action that you want to perform on each instance during the update:  \n- REPLACE: Delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail."]
pub enum InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "InstanceGroupManagers.createInstances"]
pub struct InstanceGroupManagersCreateInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Required] List of specifications of per-instance configs."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersDeleteInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "InstanceGroupManagers.deletePerInstanceConfigs"]
pub struct InstanceGroupManagersDeletePerInstanceConfigsReq {
    #[serde(rename = "names")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of instance names for which we want to delete per-instance configs on this managed instance group."]
    pub names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersListErrorsResponse {
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of errors of the managed instance group."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceManagedByIgmError>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersListManagedInstancesResponse {
    #[serde(rename = "managedInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of instances in the managed instance group."]
    pub managed_instances:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ManagedInstance>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersListPerInstanceConfigsResp {
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of PerInstanceConfig."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupManagersListPerInstanceConfigsRespWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupManagersListPerInstanceConfigsRespWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<
        ::std::vec::Vec<InstanceGroupManagersListPerInstanceConfigsRespWarningData>,
    >,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersListPerInstanceConfigsRespWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "InstanceGroupManagers.patchPerInstanceConfigs"]
pub struct InstanceGroupManagersPatchPerInstanceConfigsReq {
    #[serde(rename = "perInstanceConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of per-instance configs to insert or patch on this managed instance group."]
    pub per_instance_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersRecreateInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersResizeAdvancedRequest {
    #[serde(rename = "noCreationRetries")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If this flag is true, the managed instance group attempts to create all instances initiated by this resize request only once. If there is an error during creation, the managed instance group does not retry create this instance, and we will decrease the targetSize of the request instead. If the flag is false, the group attempts to recreate each instance continuously until it succeeds.\n\nThis flag matters only in the first attempt of creation of an instance. After an instance is successfully created while this flag is enabled, the instance behaves the same way as all the other instances created with a regular resize request. In particular, if a running instance dies unexpectedly at a later time and needs to be recreated, this mode does not affect the recreation behavior in that scenario.\n\nThis flag is applicable only to the current resize request. It does not influence other resize requests in any way.\n\nYou can see which instances is being creating in which mode by calling the get or listManagedInstances API."]
    pub no_creation_retries: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "targetSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter."]
    pub target_size: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersScopedList {
    #[serde(rename = "instanceGroupManagers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of managed instance groups that are contained in the specified project and zone."]
    pub instance_group_managers:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroupManager>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The warning that replaces the list of managed instance groups when the list is empty."]
    pub warning: ::std::option::Option<InstanceGroupManagersScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] The warning that replaces the list of managed instance groups when the list is empty."]
pub struct InstanceGroupManagersScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupManagersScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupManagersScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupManagersScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersSetAutoHealingRequest {
    #[serde(rename = "autoHealingPolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub auto_healing_policies: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<InstanceGroupManagerAutoHealingPolicy>>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersSetInstanceTemplateRequest {
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE."]
    pub instance_template: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupManagersSetTargetPoolsRequest {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetPools")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings."]
    pub target_pools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "InstanceGroupManagers.updatePerInstanceConfigs"]
pub struct InstanceGroupManagersUpdatePerInstanceConfigsReq {
    #[serde(rename = "perInstanceConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of per-instance configs to insert or patch on this managed instance group."]
    pub per_instance_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsAddInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of instances to add to the instance group."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsListInstances {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceWithNamedPorts resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceWithNamedPorts>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_groups_list_instances_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceGroupsListInstancesWarning>,
}
mod instance_groups_list_instances_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceGroupsListInstances")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceGroupsListInstancesWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupsListInstancesWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupsListInstancesWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupsListInstancesWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsListInstancesWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsListInstancesRequest {
    #[serde(rename = "instanceState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state."]
    pub instance_state: ::std::option::Option<InstanceGroupsListInstancesRequestInstanceStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state."]
pub enum InstanceGroupsListInstancesRequestInstanceStateEnum {
    #[serde(rename = "ALL")]
    #[doc = ""]
    All,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsRemoveInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of instances to remove from the instance group."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsScopedList {
    #[serde(rename = "instanceGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of instance groups that are contained in this scope."]
    pub instance_groups: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroup>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that replaces the list of instance groups when the list is empty."]
    pub warning: ::std::option::Option<InstanceGroupsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that replaces the list of instance groups when the list is empty."]
pub struct InstanceGroupsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceGroupsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceGroupsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceGroupsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceGroupsSetNamedPortsRequest {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namedPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of named ports to set for this instance group."]
    pub named_ports: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NamedPort>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of instances."]
pub struct InstanceList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Instance resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Instance>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#instanceList for lists of Instance resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceListWarning>,
}
mod instance_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of instance referrers."]
pub struct InstanceListReferrers {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Reference resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Reference>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_list_referrers_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceListReferrersWarning>,
}
mod instance_list_referrers_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceListReferrers")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceListReferrersWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceListReferrersWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceListReferrersWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceListReferrersWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceListReferrersWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceManagedByIgmError {
    #[serde(rename = "error")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Contents of the error."]
    pub error:
        ::std::option::Option<::std::boxed::Box<InstanceManagedByIgmErrorManagedInstanceError>>,
    #[serde(rename = "instanceActionDetails")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Details of the instance action that triggered this error. May be null, if the error was not caused by an action on an instance. This field is optional."]
    pub instance_action_details:
        ::std::option::Option<::std::boxed::Box<InstanceManagedByIgmErrorInstanceActionDetails>>,
    #[serde(rename = "timestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The time that this error occurred. This value is in RFC3339 text format."]
    pub timestamp: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceManagedByIgmErrorInstanceActionDetails {
    #[serde(rename = "action")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:"]
    pub action: ::std::option::Option<InstanceManagedByIgmErrorInstanceActionDetailsActionEnum>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created."]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Version this instance was created from, or was being created from, but the creation failed. Corresponds to one of the versions that were set on the Instance Group Manager resource at the time this instance was being created."]
    pub version: ::std::option::Option<::std::boxed::Box<ManagedInstanceVersion>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:"]
pub enum InstanceManagedByIgmErrorInstanceActionDetailsActionEnum {
    #[serde(rename = "ABANDONING")]
    #[doc = ""]
    Abandoning,
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "CREATING_WITHOUT_RETRIES")]
    #[doc = ""]
    CreatingWithoutRetries,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "RECREATING")]
    #[doc = ""]
    Recreating,
    #[serde(rename = "REFRESHING")]
    #[doc = ""]
    Refreshing,
    #[serde(rename = "RESTARTING")]
    #[doc = ""]
    Restarting,
    #[serde(rename = "VERIFYING")]
    #[doc = ""]
    Verifying,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceManagedByIgmErrorManagedInstanceError {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Error code."]
    pub code: ::std::option::Option<::std::string::String>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Error message."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceMoveRequest {
    #[serde(rename = "destinationZone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone \n- projects/project/zones/zone \n- zones/zone"]
    pub destination_zone: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance \n- projects/project/zones/zone/instances/instance \n- zones/zone/instances/instance"]
    pub target_instance: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = ""]
pub struct InstanceProperties {
    #[serde(rename = "advancedMachineFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Controls for advanced machine-related behavior features."]
    pub advanced_machine_features:
        ::std::option::Option<::std::boxed::Box<AdvancedMachineFeatures>>,
    #[serde(rename = "canIpForward")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information."]
    pub can_ip_forward: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "confidentialInstanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the Confidential Instance options."]
    pub confidential_instance_config:
        ::std::option::Option<::std::boxed::Box<ConfidentialInstanceConfig>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional text description for the instances that are created from these properties."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of disks that are associated with the instances that are created from these properties."]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AttachedDisk>>>,
    #[serde(rename = "displayDevice")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Display Device properties to enable support for remote display products like: Teradici, VNC and TeamViewer"]
    pub display_device: ::std::option::Option<::std::boxed::Box<DisplayDevice>>,
    #[serde(rename = "guestAccelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of guest accelerator cards' type and count to use for instances created from these properties."]
    pub guest_accelerators:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to instances that are created from these properties."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "machineType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The machine type to use for instances that are created from these properties."]
    pub machine_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information."]
    pub metadata: ::std::option::Option<::std::boxed::Box<Metadata>>,
    #[serde(rename = "minCpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\". For more information, read Specifying a Minimum CPU Platform."]
    pub min_cpu_platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkInterfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of network access configurations for this interface."]
    pub network_interfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkInterface>>>,
    #[serde(rename = "networkPerformanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub network_performance_config:
        ::std::option::Option<::std::boxed::Box<NetworkPerformanceConfig>>,
    #[serde(rename = "postKeyRevocationActionType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "PostKeyRevocationActionType of the instance."]
    pub post_key_revocation_action_type:
        ::std::option::Option<InstancePropertiesPostKeyRevocationActionTypeEnum>,
    #[serde(rename = "privateIpv6GoogleAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The private IPv6 google access type for VMs. If not specified, use  INHERIT_FROM_SUBNETWORK as default."]
    pub private_ipv6_google_access:
        ::std::option::Option<InstancePropertiesPrivateIpv6GoogleAccessEnum>,
    #[serde(rename = "reservationAffinity")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the reservations that instances can consume from."]
    pub reservation_affinity: ::std::option::Option<::std::boxed::Box<ReservationAffinity>>,
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies (names, not ULRs) applied to instances created from these properties."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "scheduling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the scheduling options for the instances that are created from these properties."]
    pub scheduling: ::std::option::Option<::std::boxed::Box<Scheduling>>,
    #[serde(rename = "serviceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances."]
    pub service_accounts: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ServiceAccount>>>,
    #[serde(rename = "shieldedInstanceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub shielded_instance_config: ::std::option::Option<::std::boxed::Box<ShieldedInstanceConfig>>,
    #[serde(rename = "shieldedVmConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the Shielded VM options for the instances that are created from these properties."]
    pub shielded_vm_config: ::std::option::Option<::std::boxed::Box<ShieldedVmConfig>>,
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035."]
    pub tags: ::std::option::Option<::std::boxed::Box<Tags>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "PostKeyRevocationActionType of the instance."]
pub enum InstancePropertiesPostKeyRevocationActionTypeEnum {
    #[serde(rename = "NOOP")]
    #[doc = ""]
    Noop,
    #[serde(rename = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    #[doc = ""]
    PostKeyRevocationActionTypeUnspecified,
    #[serde(rename = "SHUTDOWN")]
    #[doc = ""]
    Shutdown,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The private IPv6 google access type for VMs. If not specified, use  INHERIT_FROM_SUBNETWORK as default."]
pub enum InstancePropertiesPrivateIpv6GoogleAccessEnum {
    #[serde(rename = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableBidirectionalAccessToGoogle,
    #[serde(rename = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableOutboundVmAccessToGoogle,
    #[serde(rename = "INHERIT_FROM_SUBNETWORK")]
    #[doc = ""]
    InheritFromSubnetwork,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceReference {
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL for a specific instance."]
    pub instance: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Instance Template resource.\n\nYou can use instance templates to create VM instances and managed instance groups. For more information, read Instance Templates. (== resource_for {$api_version}.instanceTemplates ==)"]
pub struct InstanceTemplate {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The creation timestamp for this instance template in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A unique identifier for this instance template. The server defines this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_template_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceTemplate for instance templates."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "properties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The instance properties for this instance template."]
    pub properties: ::std::option::Option<::std::boxed::Box<InstanceProperties>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL for this instance template. The server defines this URL."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance \n- projects/project/zones/zone/instances/instance"]
    pub source_instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInstanceParams")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source instance params to use to create this instance template."]
    pub source_instance_params: ::std::option::Option<::std::boxed::Box<SourceInstanceParams>>,
}
mod instance_template_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceTemplate")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A list of instance templates."]
pub struct InstanceTemplateList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceTemplate resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceTemplate>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instance_template_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstanceTemplateListWarning>,
}
mod instance_template_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instanceTemplateList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstanceTemplateListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstanceTemplateListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstanceTemplateListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstanceTemplateListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceTemplateListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstanceWithNamedPorts {
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the instance."]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namedPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The named ports that belong to this instance group."]
    pub named_ports: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NamedPort>>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the instance."]
    pub status: ::std::option::Option<InstanceWithNamedPortsStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the instance."]
pub enum InstanceWithNamedPortsStatusEnum {
    #[serde(rename = "DEPROVISIONING")]
    #[doc = ""]
    Deprovisioning,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
    #[serde(rename = "REPAIRING")]
    #[doc = ""]
    Repairing,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
    #[serde(rename = "STAGING")]
    #[doc = ""]
    Staging,
    #[serde(rename = "STOPPED")]
    #[doc = ""]
    Stopped,
    #[serde(rename = "STOPPING")]
    #[doc = ""]
    Stopping,
    #[serde(rename = "SUSPENDED")]
    #[doc = ""]
    Suspended,
    #[serde(rename = "SUSPENDING")]
    #[doc = ""]
    Suspending,
    #[serde(rename = "TERMINATED")]
    #[doc = ""]
    Terminated,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesAddResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be added to this instance."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesGetEffectiveFirewallsResponse {
    #[serde(rename = "firewallPolicys")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls from firewall policies."]
    pub firewall_policys: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>,
        >,
    >,
    #[serde(rename = "firewalls")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls on the instance."]
    pub firewalls: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Firewall>>>,
    #[serde(rename = "organizationFirewalls")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls from organization policies."]
    pub organization_firewalls: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy>,
        >,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The display name of the firewall policy."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the firewall policy."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The rules that apply to the network."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyRule>>>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The type of the firewall policy."]
    pub _type: ::std::option::Option<
        InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The type of the firewall policy."]
pub enum InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    #[serde(rename = "HIERARCHY")]
    #[doc = ""]
    Hierarchy,
    #[serde(rename = "NETWORK")]
    #[doc = ""]
    Network,
    #[serde(rename = "UNSPECIFIED")]
    #[doc = ""]
    Unspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A pruned SecurityPolicy containing ID and any applicable firewall rules."]
pub struct InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The unique identifier for the security policy. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The rules that apply to the network."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicyRule>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesRemoveResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be removed from this instance."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesResumeRequest {
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Array of disks associated with this instance that are protected with a customer-supplied encryption key.\n\nIn order to resume the instance, the disk url and its corresponding key must be provided.\n\nIf the disk is not protected with a customer-supplied encryption key it should not be specified."]
    pub disks: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<CustomerEncryptionKeyProtectedDisk>>,
    >,
    #[serde(rename = "instanceEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Decrypts data associated with an instance that is protected with a customer-supplied encryption key.\n\nIf the instance you are starting is protected with a customer-supplied encryption key, the correct key must be provided otherwise the instance resume will not succeed."]
    pub instance_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesScopedList {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of instances contained in this scope."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Instance>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of instances when the list is empty."]
    pub warning: ::std::option::Option<InstancesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of instances when the list is empty."]
pub struct InstancesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstancesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstancesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstancesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetLabelsRequest {
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetMachineResourcesRequest {
    #[serde(rename = "guestAccelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of the type and count of accelerator cards attached to the instance."]
    pub guest_accelerators:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetMachineTypeRequest {
    #[serde(rename = "machineType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1"]
    pub machine_type: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetMinCpuPlatformRequest {
    #[serde(rename = "minCpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum cpu/platform this instance should be started at."]
    pub min_cpu_platform: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetNameRequest {
    #[serde(rename = "currentName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The current name of this resource, used to prevent conflicts. Provide the latest name when making a request to change name."]
    pub current_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name to be applied to the instance. Needs to be RFC 1035 compliant."]
    pub name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesSetServiceAccountRequest {
    #[serde(rename = "email")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Email address of the service account."]
    pub email: ::std::option::Option<::std::string::String>,
    #[serde(rename = "scopes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of scopes to be made available for this service account."]
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstancesStartWithEncryptionKeyRequest {
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Array of disks associated with this instance that are protected with a customer-supplied encryption key.\n\nIn order to start the instance, the disk url and its corresponding key must be provided.\n\nIf the disk is not protected with a customer-supplied encryption key it should not be specified."]
    pub disks: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<CustomerEncryptionKeyProtectedDisk>>,
    >,
    #[serde(rename = "instanceEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Decrypts data associated with an instance that is protected with a customer-supplied encryption key.\n\nIf the instance you are starting is protected with a customer-supplied encryption key, the correct key must be provided otherwise the instance start will not succeed."]
    pub instance_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a InstantSnapshot resource.\n\nYou can use instant snapshots to create disk rollback points quickly.. (== resource_for {$api_version}.instantSnapshots ==)"]
pub struct InstantSnapshot {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Size of the source disk, specified in GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestFlush")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to attempt an application consistent instant snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS)."]
    pub guest_flush: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "instant_snapshot_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#instantSnapshot for InstantSnapshot resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this InstantSnapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a InstantSnapshot."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/disks/disk  \n- projects/project/zones/zone/disks/disk  \n- projects/project/regions/region/disks/disk  \n- zones/zone/disks/disk  \n- regions/region/disks/disk"]
    pub source_disk: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the disk used to create this InstantSnapshot. This value may be used to determine whether the InstantSnapshot was taken from the current or a previous instance of a given disk name."]
    pub source_disk_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY."]
    pub status: ::std::option::Option<InstantSnapshotStatusEnum>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod instant_snapshot_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instantSnapshot")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY."]
pub enum InstantSnapshotStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstantSnapshotExportParams {
    #[serde(rename = "baseInstantSnapshot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional base instant snapshot that this resource is compared against. If not specified, all blocks of this resource are exported. The base instant snapshot and this resource must be created from the same disk. The base instant snapshot must be created earlier in time than this resource."]
    pub base_instant_snapshot: ::std::option::Option<::std::string::String>,
    #[serde(rename = "bucketName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of an existing bucket in Cloud Storage where the changed blocks will be stored. The Google Service Account must have read and write access to this bucket. The bucket has to be in the same region as this resource."]
    pub bucket_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "encryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encryption key used to encrypt the instant snapshot."]
    pub encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "objectName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the output Bigstore object storing the changed blocks. Object name must be less than 1024 bytes in length."]
    pub object_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "outputType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The format of the output file."]
    pub output_type: ::std::option::Option<InstantSnapshotExportParamsOutputTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The format of the output file."]
pub enum InstantSnapshotExportParamsOutputTypeEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "METADATA_AND_DATA")]
    #[doc = ""]
    MetadataAndData,
    #[serde(rename = "METADATA_ONLY")]
    #[doc = ""]
    MetadataOnly,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of InstantSnapshot resources."]
pub struct InstantSnapshotList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstantSnapshot resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstantSnapshot>>>,
    #[serde(rename = "kind")]
    #[serde(default = "instant_snapshot_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InstantSnapshotListWarning>,
}
mod instant_snapshot_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#instantSnapshotList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InstantSnapshotListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InstantSnapshotListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InstantSnapshotListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InstantSnapshotListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InstantSnapshotListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "HttpRouteRuleMatch criteria for field values that must stay within the specified integer range."]
pub struct Int64RangeMatch {
    #[serde(rename = "rangeEnd")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The end of the range (exclusive) in signed long integer format."]
    pub range_end: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rangeStart")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The start of the range (inclusive) in signed long integer format."]
    pub range_start: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Interconnect resource.\n\nAn Interconnect resource is a dedicated connection between the GCP network and your on-premises network. For more information, read the  Dedicated Interconnect Overview. (== resource_for {$api_version}.interconnects ==)"]
pub struct Interconnect {
    #[serde(rename = "adminEnabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true."]
    pub admin_enabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "circuitInfos")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG."]
    pub circuit_infos:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectCircuitInfo>>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "customerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect."]
    pub customer_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expectedOutages")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of outages expected for this Interconnect."]
    pub expected_outages:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectOutageNotification>>>,
    #[serde(rename = "googleIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests."]
    pub google_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "googleReferenceId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues."]
    pub google_reference_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interconnectAttachments")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect."]
    pub interconnect_attachments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "interconnectType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of interconnect, which can take one of the following values: \n- PARTNER: A partner-managed interconnection shared between customers though a partner. \n- DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED."]
    pub interconnect_type: ::std::option::Option<InterconnectInterconnectTypeEnum>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#interconnect for interconnects."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an Interconnect."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "linkType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of link requested, which can take one of the following values: \n- LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics \n- LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle."]
    pub link_type: ::std::option::Option<InterconnectLinkTypeEnum>,
    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the InterconnectLocation object that represents where this connection is to be provisioned."]
    pub location: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nocContactEmail")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Stackdriver logs alerting and Cloud Notifications."]
    pub noc_contact_email: ::std::option::Option<::std::string::String>,
    #[serde(rename = "operationalStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current status of this Interconnect's functionality, which can take one of the following values: \n- OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. \n- OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. \n- OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect."]
    pub operational_status: ::std::option::Option<InterconnectOperationalStatusEnum>,
    #[serde(rename = "peerIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests."]
    pub peer_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "provisionedLinkCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Number of links actually provisioned in this interconnect."]
    pub provisioned_link_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "requestedLinkCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Target number of physical links in the link bundle, as requested by the customer."]
    pub requested_link_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current state of Interconnect functionality, which can take one of the following values: \n- ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. \n- UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. \n- UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect."]
    pub state: ::std::option::Option<InterconnectStateEnum>,
}
mod interconnect_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnect")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of interconnect, which can take one of the following values: \n- PARTNER: A partner-managed interconnection shared between customers though a partner. \n- DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED."]
pub enum InterconnectInterconnectTypeEnum {
    #[serde(rename = "DEDICATED")]
    #[doc = ""]
    Dedicated,
    #[serde(rename = "IT_PRIVATE")]
    #[doc = ""]
    ItPrivate,
    #[serde(rename = "PARTNER")]
    #[doc = ""]
    Partner,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of link requested, which can take one of the following values: \n- LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics \n- LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle."]
pub enum InterconnectLinkTypeEnum {
    #[serde(rename = "LINK_TYPE_ETHERNET_100G_LR")]
    #[doc = ""]
    LinkTypeEthernet100GLr,
    #[serde(rename = "LINK_TYPE_ETHERNET_10G_LR")]
    #[doc = ""]
    LinkTypeEthernet10GLr,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current status of this Interconnect's functionality, which can take one of the following values: \n- OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. \n- OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. \n- OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect."]
pub enum InterconnectOperationalStatusEnum {
    #[serde(rename = "OS_ACTIVE")]
    #[doc = ""]
    OsActive,
    #[serde(rename = "OS_UNPROVISIONED")]
    #[doc = ""]
    OsUnprovisioned,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current state of Interconnect functionality, which can take one of the following values: \n- ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. \n- UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. \n- UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect."]
pub enum InterconnectStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "UNPROVISIONED")]
    #[doc = ""]
    Unprovisioned,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Interconnect Attachment (VLAN) resource.\n\nYou can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read  Creating VLAN Attachments. (== resource_for {$api_version}.interconnectAttachments ==)"]
pub struct InterconnectAttachment {
    #[serde(rename = "adminEnabled")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER."]
    pub admin_enabled: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "bandwidth")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: \n- BPS_50M: 50 Mbit/s \n- BPS_100M: 100 Mbit/s \n- BPS_200M: 200 Mbit/s \n- BPS_300M: 300 Mbit/s \n- BPS_400M: 400 Mbit/s \n- BPS_500M: 500 Mbit/s \n- BPS_1G: 1 Gbit/s \n- BPS_2G: 2 Gbit/s \n- BPS_5G: 5 Gbit/s \n- BPS_10G: 10 Gbit/s \n- BPS_20G: 20 Gbit/s \n- BPS_50G: 50 Gbit/s"]
    pub bandwidth: ::std::option::Option<InterconnectAttachmentBandwidthEnum>,
    #[serde(rename = "candidateSubnets")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space."]
    pub candidate_subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "cloudRouterIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment."]
    pub cloud_router_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "customerRouterIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment."]
    pub customer_router_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "dataplaneVersion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Dataplane version for this InterconnectAttachment."]
    pub dataplane_version: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "edgeAvailabilityDomain")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: \n- AVAILABILITY_DOMAIN_ANY \n- AVAILABILITY_DOMAIN_1 \n- AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY."]
    pub edge_availability_domain:
        ::std::option::Option<InterconnectAttachmentEdgeAvailabilityDomainEnum>,
    #[serde(rename = "encryption")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates the user-supplied encryption option of this interconnect attachment: \n- NONE is the default value, which means that the attachment carries unencrypted traffic. VMs can send traffic to, or receive traffic from, this type of attachment. \n- IPSEC indicates that the attachment carries only traffic encrypted by an IPsec device such as an HA VPN gateway. VMs cannot directly send traffic to, or receive traffic from, such an attachment. To use IPsec over Interconnect, create the attachment using this option."]
    pub encryption: ::std::option::Option<InterconnectAttachmentEncryptionEnum>,
    #[serde(rename = "googleReferenceId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used."]
    pub google_reference_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interconnect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the underlying Interconnect object that this attachment's traffic will traverse through."]
    pub interconnect: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipsecInternalAddresses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway?s IP address will be allocated from the IP address range specified here. For example, if the HA VPN gateway?s interface 0 is paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this interconnect attachment. If this field is not specified for interconnect attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment, the HA VPN gateway's IP address will be allocated from regional external IP address pool."]
    pub ipsec_internal_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_attachment_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this InterconnectAttachment, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an InterconnectAttachment."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "mtu")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440."]
    pub mtu: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "operationalStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: \n- OS_ACTIVE: The attachment has been turned up and is ready to use. \n- OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete."]
    pub operational_status: ::std::option::Option<InterconnectAttachmentOperationalStatusEnum>,
    #[serde(rename = "pairingKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form \"XXXXX/region/domain\""]
    pub pairing_key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "partnerAsn")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED."]
    pub partner_asn: ::std::option::Option<::std::string::String>,
    #[serde(rename = "partnerMetadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED."]
    pub partner_metadata:
        ::std::option::Option<::std::boxed::Box<InterconnectAttachmentPartnerMetadata>>,
    #[serde(rename = "privateInterconnectInfo")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED."]
    pub private_interconnect_info:
        ::std::option::Option<::std::boxed::Box<InterconnectAttachmentPrivateInfo>>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "router")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured."]
    pub router: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: \n- ACTIVE: The attachment has been turned up and is ready to use. \n- UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. \n- PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. \n- PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. \n- PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. \n- DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted."]
    pub state: ::std::option::Option<InterconnectAttachmentStateEnum>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of interconnect attachment this is, which can take one of the following values: \n- DEDICATED: an attachment to a Dedicated Interconnect. \n- PARTNER: an attachment to a Partner Interconnect, created by the customer. \n- PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner."]
    pub _type: ::std::option::Option<InterconnectAttachmentTypeEnum>,
    #[serde(rename = "vlanTag8021q")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time."]
    pub vlan_tag8021q: ::std::option::Option<::std::primitive::i64>,
}
mod interconnect_attachment_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectAttachment")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: \n- BPS_50M: 50 Mbit/s \n- BPS_100M: 100 Mbit/s \n- BPS_200M: 200 Mbit/s \n- BPS_300M: 300 Mbit/s \n- BPS_400M: 400 Mbit/s \n- BPS_500M: 500 Mbit/s \n- BPS_1G: 1 Gbit/s \n- BPS_2G: 2 Gbit/s \n- BPS_5G: 5 Gbit/s \n- BPS_10G: 10 Gbit/s \n- BPS_20G: 20 Gbit/s \n- BPS_50G: 50 Gbit/s"]
pub enum InterconnectAttachmentBandwidthEnum {
    #[serde(rename = "BPS_100M")]
    #[doc = ""]
    Bps100M,
    #[serde(rename = "BPS_10G")]
    #[doc = ""]
    Bps10G,
    #[serde(rename = "BPS_1G")]
    #[doc = ""]
    Bps1G,
    #[serde(rename = "BPS_200M")]
    #[doc = ""]
    Bps200M,
    #[serde(rename = "BPS_20G")]
    #[doc = ""]
    Bps20G,
    #[serde(rename = "BPS_2G")]
    #[doc = ""]
    Bps2G,
    #[serde(rename = "BPS_300M")]
    #[doc = ""]
    Bps300M,
    #[serde(rename = "BPS_400M")]
    #[doc = ""]
    Bps400M,
    #[serde(rename = "BPS_500M")]
    #[doc = ""]
    Bps500M,
    #[serde(rename = "BPS_50G")]
    #[doc = ""]
    Bps50G,
    #[serde(rename = "BPS_50M")]
    #[doc = ""]
    Bps50M,
    #[serde(rename = "BPS_5G")]
    #[doc = ""]
    Bps5G,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: \n- AVAILABILITY_DOMAIN_ANY \n- AVAILABILITY_DOMAIN_1 \n- AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY."]
pub enum InterconnectAttachmentEdgeAvailabilityDomainEnum {
    #[serde(rename = "AVAILABILITY_DOMAIN_1")]
    #[doc = ""]
    AvailabilityDomain1,
    #[serde(rename = "AVAILABILITY_DOMAIN_2")]
    #[doc = ""]
    AvailabilityDomain2,
    #[serde(rename = "AVAILABILITY_DOMAIN_ANY")]
    #[doc = ""]
    AvailabilityDomainAny,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates the user-supplied encryption option of this interconnect attachment: \n- NONE is the default value, which means that the attachment carries unencrypted traffic. VMs can send traffic to, or receive traffic from, this type of attachment. \n- IPSEC indicates that the attachment carries only traffic encrypted by an IPsec device such as an HA VPN gateway. VMs cannot directly send traffic to, or receive traffic from, such an attachment. To use IPsec over Interconnect, create the attachment using this option."]
pub enum InterconnectAttachmentEncryptionEnum {
    #[serde(rename = "IPSEC")]
    #[doc = ""]
    Ipsec,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: \n- OS_ACTIVE: The attachment has been turned up and is ready to use. \n- OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete."]
pub enum InterconnectAttachmentOperationalStatusEnum {
    #[serde(rename = "OS_ACTIVE")]
    #[doc = ""]
    OsActive,
    #[serde(rename = "OS_UNPROVISIONED")]
    #[doc = ""]
    OsUnprovisioned,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: \n- ACTIVE: The attachment has been turned up and is ready to use. \n- UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. \n- PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. \n- PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. \n- PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. \n- DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted."]
pub enum InterconnectAttachmentStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DEFUNCT")]
    #[doc = ""]
    Defunct,
    #[serde(rename = "PARTNER_REQUEST_RECEIVED")]
    #[doc = ""]
    PartnerRequestReceived,
    #[serde(rename = "PENDING_CUSTOMER")]
    #[doc = ""]
    PendingCustomer,
    #[serde(rename = "PENDING_PARTNER")]
    #[doc = ""]
    PendingPartner,
    #[serde(rename = "STATE_UNSPECIFIED")]
    #[doc = ""]
    StateUnspecified,
    #[serde(rename = "UNPROVISIONED")]
    #[doc = ""]
    Unprovisioned,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of interconnect attachment this is, which can take one of the following values: \n- DEDICATED: an attachment to a Dedicated Interconnect. \n- PARTNER: an attachment to a Partner Interconnect, created by the customer. \n- PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner."]
pub enum InterconnectAttachmentTypeEnum {
    #[serde(rename = "DEDICATED")]
    #[doc = ""]
    Dedicated,
    #[serde(rename = "PARTNER")]
    #[doc = ""]
    Partner,
    #[serde(rename = "PARTNER_PROVIDER")]
    #[doc = ""]
    PartnerProvider,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectAttachmentAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectAttachmentsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<InterconnectAttachmentsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_attachment_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InterconnectAttachmentAggregatedListWarning>,
}
mod interconnect_attachment_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectAttachmentAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InterconnectAttachmentAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InterconnectAttachmentAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data:
        ::std::option::Option<::std::vec::Vec<InterconnectAttachmentAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InterconnectAttachmentAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectAttachmentAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Response to the list request, and contains a list of interconnect attachments."]
pub struct InterconnectAttachmentList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectAttachment resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectAttachment>>>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_attachment_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InterconnectAttachmentListWarning>,
}
mod interconnect_attachment_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectAttachmentList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InterconnectAttachmentListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InterconnectAttachmentListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InterconnectAttachmentListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InterconnectAttachmentListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectAttachmentListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments."]
pub struct InterconnectAttachmentPartnerMetadata {
    #[serde(rename = "interconnectName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance \"Chicago 1\". This value may be validated to match approved Partner values."]
    pub interconnect_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "partnerName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values."]
    pub partner_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portalUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values."]
    pub portal_url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED."]
pub struct InterconnectAttachmentPrivateInfo {
    #[serde(rename = "tag8021q")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region."]
    pub tag8021q: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectAttachmentsScopedList {
    #[serde(rename = "interconnectAttachments")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of interconnect attachments contained in this scope."]
    pub interconnect_attachments:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectAttachment>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<InterconnectAttachmentsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of addresses when the list is empty."]
pub struct InterconnectAttachmentsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InterconnectAttachmentsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InterconnectAttachmentsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InterconnectAttachmentsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectAttachmentsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only."]
pub struct InterconnectCircuitInfo {
    #[serde(rename = "customerDemarcId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Customer-side demarc ID for this circuit."]
    pub customer_demarc_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "googleCircuitId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Google-assigned unique ID for this circuit. Assigned at circuit turn-up."]
    pub google_circuit_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "googleDemarcId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA."]
    pub google_demarc_id: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Diagnostics information about interconnect, contains detailed and current technical information about Google's side of the connection."]
pub struct InterconnectDiagnostics {
    #[serde(rename = "arpCaches")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled."]
    pub arp_caches:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectDiagnosticsArpEntry>>>,
    #[serde(rename = "links")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect."]
    pub links: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<InterconnectDiagnosticsLinkStatus>>,
    >,
    #[serde(rename = "macAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The MAC address of the Interconnect's bundle interface."]
    pub mac_address: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Describing the ARP neighbor entries seen on this link"]
pub struct InterconnectDiagnosticsArpEntry {
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP address of this ARP neighbor."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "macAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The MAC address of this ARP neighbor."]
    pub mac_address: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectDiagnosticsLinkLacpStatus {
    #[serde(rename = "googleSystemId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "System ID of the port on Google's side of the LACP exchange."]
    pub google_system_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "neighborSystemId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "System ID of the port on the neighbor's side of the LACP exchange."]
    pub neighbor_system_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The state of a LACP link, which can take one of the following values: \n- ACTIVE: The link is configured and active within the bundle. \n- DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty."]
    pub state: ::std::option::Option<InterconnectDiagnosticsLinkLacpStatusStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The state of a LACP link, which can take one of the following values: \n- ACTIVE: The link is configured and active within the bundle. \n- DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty."]
pub enum InterconnectDiagnosticsLinkLacpStatusStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DETACHED")]
    #[doc = ""]
    Detached,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectDiagnosticsLinkOpticalPower {
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:  \n- OK: The value has not crossed a warning threshold. \n- LOW_WARNING: The value has crossed below the low warning threshold. \n- HIGH_WARNING: The value has crossed above the high warning threshold. \n- LOW_ALARM: The value has crossed below the low alarm threshold. \n- HIGH_ALARM: The value has crossed above the high alarm threshold."]
    pub state: ::std::option::Option<InterconnectDiagnosticsLinkOpticalPowerStateEnum>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links."]
    pub value: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:  \n- OK: The value has not crossed a warning threshold. \n- LOW_WARNING: The value has crossed below the low warning threshold. \n- HIGH_WARNING: The value has crossed above the high warning threshold. \n- LOW_ALARM: The value has crossed below the low alarm threshold. \n- HIGH_ALARM: The value has crossed above the high alarm threshold."]
pub enum InterconnectDiagnosticsLinkOpticalPowerStateEnum {
    #[serde(rename = "HIGH_ALARM")]
    #[doc = ""]
    HighAlarm,
    #[serde(rename = "HIGH_WARNING")]
    #[doc = ""]
    HighWarning,
    #[serde(rename = "LOW_ALARM")]
    #[doc = ""]
    LowAlarm,
    #[serde(rename = "LOW_WARNING")]
    #[doc = ""]
    LowWarning,
    #[serde(rename = "OK")]
    #[doc = ""]
    Ok,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectDiagnosticsLinkStatus {
    #[serde(rename = "arpCaches")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled"]
    pub arp_caches:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectDiagnosticsArpEntry>>>,
    #[serde(rename = "circuitId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The unique ID for this link assigned during turn up by Google."]
    pub circuit_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "googleDemarc")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Demarc address assigned by Google and provided in the LoA."]
    pub google_demarc: ::std::option::Option<::std::string::String>,
    #[serde(rename = "lacpStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub lacp_status:
        ::std::option::Option<::std::boxed::Box<InterconnectDiagnosticsLinkLacpStatus>>,
    #[serde(rename = "receivingOpticalPower")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level."]
    pub receiving_optical_power:
        ::std::option::Option<::std::boxed::Box<InterconnectDiagnosticsLinkOpticalPower>>,
    #[serde(rename = "transmittingOpticalPower")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level."]
    pub transmitting_optical_power:
        ::std::option::Option<::std::boxed::Box<InterconnectDiagnosticsLinkOpticalPower>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Response to the list request, and contains a list of interconnects."]
pub struct InterconnectList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Interconnect resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Interconnect>>>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#interconnectList for lists of interconnects."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InterconnectListWarning>,
}
mod interconnect_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InterconnectListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InterconnectListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InterconnectListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InterconnectListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Interconnect Attachment (VLAN) Location resource.\n\nYou can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read  Creating VLAN Attachments."]
pub struct InterconnectLocation {
    #[serde(rename = "address")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character."]
    pub address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "availabilityZone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: \"zone1\" or \"zone2\"."]
    pub availability_zone: ::std::option::Option<::std::string::String>,
    #[serde(rename = "city")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: \"Chicago, IL\", \"Amsterdam, Netherlands\"."]
    pub city: ::std::option::Option<::std::string::String>,
    #[serde(rename = "continent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Continent for this location, which can take one of the following values: \n- AFRICA \n- ASIA_PAC \n- EUROPE \n- NORTH_AMERICA \n- SOUTH_AMERICA"]
    pub continent: ::std::option::Option<InterconnectLocationContinentEnum>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "facilityProvider")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the provider for this facility (e.g., EQUINIX)."]
    pub facility_provider: ::std::option::Option<::std::string::String>,
    #[serde(rename = "facilityProviderFacilityId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1)."]
    pub facility_provider_facility_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_location_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peeringdbFacilityId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb)."]
    pub peeringdb_facility_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "regionInfos")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions."]
    pub region_infos:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectLocationRegionInfo>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of this InterconnectLocation, which can take one of the following values: \n- CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. \n- AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects."]
    pub status: ::std::option::Option<InterconnectLocationStatusEnum>,
}
mod interconnect_location_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectLocation")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Continent for this location, which can take one of the following values: \n- AFRICA \n- ASIA_PAC \n- EUROPE \n- NORTH_AMERICA \n- SOUTH_AMERICA"]
pub enum InterconnectLocationContinentEnum {
    #[serde(rename = "AFRICA")]
    #[doc = ""]
    Africa,
    #[serde(rename = "ASIA_PAC")]
    #[doc = ""]
    AsiaPac,
    #[serde(rename = "C_AFRICA")]
    #[doc = ""]
    CAfrica,
    #[serde(rename = "C_ASIA_PAC")]
    #[doc = ""]
    CAsiaPac,
    #[serde(rename = "C_EUROPE")]
    #[doc = ""]
    CEurope,
    #[serde(rename = "C_NORTH_AMERICA")]
    #[doc = ""]
    CNorthAmerica,
    #[serde(rename = "C_SOUTH_AMERICA")]
    #[doc = ""]
    CSouthAmerica,
    #[serde(rename = "EUROPE")]
    #[doc = ""]
    Europe,
    #[serde(rename = "NORTH_AMERICA")]
    #[doc = ""]
    NorthAmerica,
    #[serde(rename = "SOUTH_AMERICA")]
    #[doc = ""]
    SouthAmerica,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of this InterconnectLocation, which can take one of the following values: \n- CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. \n- AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects."]
pub enum InterconnectLocationStatusEnum {
    #[serde(rename = "AVAILABLE")]
    #[doc = ""]
    Available,
    #[serde(rename = "CLOSED")]
    #[doc = ""]
    Closed,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Response to the list request, and contains a list of interconnect locations."]
pub struct InterconnectLocationList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InterconnectLocation resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InterconnectLocation>>>,
    #[serde(rename = "kind")]
    #[serde(default = "interconnect_location_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<InterconnectLocationListWarning>,
}
mod interconnect_location_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#interconnectLocationList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct InterconnectLocationListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<InterconnectLocationListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<InterconnectLocationListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum InterconnectLocationListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InterconnectLocationListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region."]
pub struct InterconnectLocationRegionInfo {
    #[serde(rename = "expectedRttMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region."]
    pub expected_rtt_ms: ::std::option::Option<::std::string::String>,
    #[serde(rename = "locationPresence")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Identifies the network presence of this location."]
    pub location_presence:
        ::std::option::Option<InterconnectLocationRegionInfoLocationPresenceEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL for the region of this location."]
    pub region: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Identifies the network presence of this location."]
pub enum InterconnectLocationRegionInfoLocationPresenceEnum {
    #[serde(rename = "GLOBAL")]
    #[doc = ""]
    Global,
    #[serde(rename = "LOCAL_REGION")]
    #[doc = ""]
    LocalRegion,
    #[serde(rename = "LP_GLOBAL")]
    #[doc = ""]
    LpGlobal,
    #[serde(rename = "LP_LOCAL_REGION")]
    #[doc = ""]
    LpLocalRegion,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Description of a planned outage on this Interconnect."]
pub struct InterconnectOutageNotification {
    #[serde(rename = "affectedCircuits")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected."]
    pub affected_circuits: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A description about the purpose of the outage."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "endTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Scheduled end time for the outage (milliseconds since Unix epoch)."]
    pub end_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "issueType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Form this outage is expected to take, which can take one of the following values: \n- OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. \n- PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with \"IT_\" have been deprecated in favor of the unprefixed values."]
    pub issue_type: ::std::option::Option<InterconnectOutageNotificationIssueTypeEnum>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Unique identifier for this outage notification."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The party that generated this notification, which can take the following value: \n- GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE."]
    pub source: ::std::option::Option<InterconnectOutageNotificationSourceEnum>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Scheduled start time for the outage (milliseconds since Unix epoch)."]
    pub start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "State of this notification, which can take one of the following values: \n- ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. \n- CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with \"NS_\" have been deprecated in favor of the unprefixed values."]
    pub state: ::std::option::Option<InterconnectOutageNotificationStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Form this outage is expected to take, which can take one of the following values: \n- OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. \n- PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with \"IT_\" have been deprecated in favor of the unprefixed values."]
pub enum InterconnectOutageNotificationIssueTypeEnum {
    #[serde(rename = "IT_OUTAGE")]
    #[doc = ""]
    ItOutage,
    #[serde(rename = "IT_PARTIAL_OUTAGE")]
    #[doc = ""]
    ItPartialOutage,
    #[serde(rename = "OUTAGE")]
    #[doc = ""]
    Outage,
    #[serde(rename = "PARTIAL_OUTAGE")]
    #[doc = ""]
    PartialOutage,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The party that generated this notification, which can take the following value: \n- GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE."]
pub enum InterconnectOutageNotificationSourceEnum {
    #[serde(rename = "GOOGLE")]
    #[doc = ""]
    Google,
    #[serde(rename = "NSRC_GOOGLE")]
    #[doc = ""]
    NsrcGoogle,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "State of this notification, which can take one of the following values: \n- ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. \n- CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with \"NS_\" have been deprecated in favor of the unprefixed values."]
pub enum InterconnectOutageNotificationStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "CANCELLED")]
    #[doc = ""]
    Cancelled,
    #[serde(rename = "COMPLETED")]
    #[doc = ""]
    Completed,
    #[serde(rename = "NS_ACTIVE")]
    #[doc = ""]
    NsActive,
    #[serde(rename = "NS_CANCELED")]
    #[doc = ""]
    NsCanceled,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Response for the InterconnectsGetDiagnosticsRequest."]
pub struct InterconnectsGetDiagnosticsResponse {
    #[serde(rename = "result")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub result: ::std::option::Option<::std::boxed::Box<InterconnectDiagnostics>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InternalIpAddress {
    #[serde(rename = "cidr")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP CIDR address or range."]
    pub cidr: ::std::option::Option<::std::string::String>,
    #[serde(rename = "owner")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The owner of the internal IP address."]
    pub owner: ::std::option::Option<::std::string::String>,
    #[serde(rename = "purpose")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The purpose of the internal IP address if applicable."]
    pub purpose: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The region of the internal IP address if applicable."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of the internal IP address."]
    pub _type: ::std::option::Option<InternalIpAddressTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of the internal IP address."]
pub enum InternalIpAddressTypeEnum {
    #[serde(rename = "PEER_RESERVED")]
    #[doc = ""]
    PeerReserved,
    #[serde(rename = "PEER_USED")]
    #[doc = ""]
    PeerUsed,
    #[serde(rename = "REMOTE_RESERVED")]
    #[doc = ""]
    RemoteReserved,
    #[serde(rename = "REMOTE_USED")]
    #[doc = ""]
    RemoteUsed,
    #[serde(rename = "RESERVED")]
    #[doc = ""]
    Reserved,
    #[serde(rename = "SUBNETWORK")]
    #[doc = ""]
    Subnetwork,
    #[serde(rename = "TYPE_UNSPECIFIED")]
    #[doc = ""]
    TypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct InternalIpOwner {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP CIDR range being owned."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "owners")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs of the IP owners of the IP CIDR range."]
    pub owners: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "systemOwned")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether this IP CIDR range is reserved for system use."]
    pub system_owned: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct IpAddressesList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InternalIpAddress resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InternalIpAddress>>>,
    #[serde(rename = "kind")]
    #[serde(default = "ip_addresses_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#ipAddressesList for IP addresses lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<IpAddressesListWarning>,
}
mod ip_addresses_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#ipAddressesList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct IpAddressesListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<IpAddressesListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<IpAddressesListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum IpAddressesListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct IpAddressesListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of IP owners."]
pub struct IpOwnerList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InternalIpOwner resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InternalIpOwner>>>,
    #[serde(rename = "kind")]
    #[serde(default = "ip_owner_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#ipOwnerList for lists of IP owners."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<IpOwnerListWarning>,
}
mod ip_owner_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#ipOwnerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct IpOwnerListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<IpOwnerListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<IpOwnerListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum IpOwnerListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct IpOwnerListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] JWT configuration for origin authentication. JWT configuration for origin authentication."]
pub struct Jwt {
    #[serde(rename = "audiences")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A JWT containing any of these audiences will be accepted. The service name will be accepted if audiences is empty. Examples: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"]
    pub audiences: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "issuer")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Identifies the issuer that issued the JWT, which is usually a URL or an email address. Examples: https://securetoken.google.com, 1234567-compute@developer.gserviceaccount.com"]
    pub issuer: ::std::option::Option<::std::string::String>,
    #[serde(rename = "jwksPublicKeys")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The provider's public key set to validate the signature of the JWT."]
    pub jwks_public_keys: ::std::option::Option<::std::string::String>,
    #[serde(rename = "jwtHeaders")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "jwt_headers and jwt_params define where to extract the JWT from an HTTP request. If no explicit location is specified, the following default locations are tried in order:\n\n1. The Authorization header using the Bearer schema. See `here `_. Example:\n\nAuthorization: Bearer .\n\n2. `access_token` query parameter. See `this `_\n\nMultiple JWTs can be verified for a request. Each JWT has to be extracted from the locations its issuer specified or from the default locations.\n\nThis field is set if JWT is sent in a request header. This field specifies the header name. For example, if `header=x-goog-iap-jwt-assertion`, the header format will be x-goog-iap-jwt-assertion: ."]
    pub jwt_headers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<JwtHeader>>>,
    #[serde(rename = "jwtParams")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is set if JWT is sent in a query parameter. This field specifies the query parameter name. For example, if jwt_params[0] is jwt_token, the JWT format in the query parameter is /path?jwt_token=."]
    pub jwt_params: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] This message specifies a header location to extract JWT token. This message specifies a header location to extract JWT token."]
pub struct JwtHeader {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HTTP header name."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "valuePrefix")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value prefix. The value format is \"value_prefix\" For example, for \"Authorization: Bearer \", value_prefix=\"Bearer \" with a space at the end."]
    pub value_prefix: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a License resource.\n\nA License represents billing and aggregate usage data for public and marketplace images.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. (== resource_for {$api_version}.licenses ==)"]
pub struct License {
    #[serde(rename = "chargesUseFee")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee."]
    pub charges_use_fee: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional textual description of the resource; provided by the client when the resource is created."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "license_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#license for licenses."]
    pub kind: ::std::string::String,
    #[serde(rename = "licenseCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique code used to attach this license to images, snapshots, and disks."]
    pub license_code: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. The name must be 1-63 characters long and comply with RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "resourceRequirements")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub resource_requirements:
        ::std::option::Option<::std::boxed::Box<LicenseResourceRequirements>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "transferable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk."]
    pub transferable: ::std::option::Option<::std::primitive::bool>,
}
mod license_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#license")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a License Code resource.\n\nA License Code is a unique identifier used to represent a license resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. (== resource_for {$api_version}.licenseCodes ==)"]
pub struct LicenseCode {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Description of this License Code."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "license_code_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#licenseCode for licenses."]
    pub kind: ::std::string::String,
    #[serde(rename = "licenseAlias")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL and description aliases of Licenses with the same License Code."]
    pub license_alias:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<LicenseCodeLicenseAlias>>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Current state of this License Code."]
    pub state: ::std::option::Option<LicenseCodeStateEnum>,
    #[serde(rename = "transferable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred."]
    pub transferable: ::std::option::Option<::std::primitive::bool>,
}
mod license_code_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#licenseCode")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Current state of this License Code."]
pub enum LicenseCodeStateEnum {
    #[serde(rename = "DISABLED")]
    #[doc = ""]
    Disabled,
    #[serde(rename = "ENABLED")]
    #[doc = ""]
    Enabled,
    #[serde(rename = "RESTRICTED")]
    #[doc = ""]
    Restricted,
    #[serde(rename = "STATE_UNSPECIFIED")]
    #[doc = ""]
    StateUnspecified,
    #[serde(rename = "TERMINATED")]
    #[doc = ""]
    Terminated,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LicenseCodeLicenseAlias {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Description of this License Code."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of license corresponding to this License Code."]
    pub self_link: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Commitment for a particular license resource."]
pub struct LicenseResourceCommitment {
    #[serde(rename = "amount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of licenses purchased."]
    pub amount: ::std::option::Option<::std::string::String>,
    #[serde(rename = "coresPerLicense")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the core range of the instance for which this license applies."]
    pub cores_per_license: ::std::option::Option<::std::string::String>,
    #[serde(rename = "license")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Any applicable license URI."]
    pub license: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LicenseResourceRequirements {
    #[serde(rename = "minGuestCpuCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start."]
    pub min_guest_cpu_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minMemoryMb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum memory required to use the Instance. Enforced at Instance creation and Instance start."]
    pub min_memory_mb: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LicensesListResponse {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of License resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<License>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<LicensesListResponseWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct LicensesListResponseWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<LicensesListResponseWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<LicensesListResponseWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum LicensesListResponseWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LicensesListResponseWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LocalDisk {
    #[serde(rename = "diskCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the number of such disks."]
    pub disk_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the size of the disk in base-2 GB."]
    pub disk_size_gb: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "diskType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL."]
    pub disk_type: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region)."]
pub struct LocationPolicy {
    #[serde(rename = "locations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, like: zones/us-central1-a."]
    pub locations: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<LocationPolicyLocation>>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LocationPolicyLocation {
    #[serde(rename = "preference")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub preference: ::std::option::Option<LocationPolicyLocationPreferenceEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum LocationPolicyLocationPreferenceEnum {
    #[serde(rename = "ALLOW")]
    #[doc = ""]
    Allow,
    #[serde(rename = "DENY")]
    #[doc = ""]
    Deny,
    #[serde(rename = "PREFERENCE_UNSPECIFIED")]
    #[doc = ""]
    PreferenceUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies what kind of log the caller must write"]
pub struct LogConfig {
    #[serde(rename = "cloudAudit")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud audit options."]
    pub cloud_audit: ::std::option::Option<::std::boxed::Box<LogConfigCloudAuditOptions>>,
    #[serde(rename = "counter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Counter options."]
    pub counter: ::std::option::Option<::std::boxed::Box<LogConfigCounterOptions>>,
    #[serde(rename = "dataAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Data access options."]
    pub data_access: ::std::option::Option<::std::boxed::Box<LogConfigDataAccessOptions>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Write a Cloud Audit log"]
pub struct LogConfigCloudAuditOptions {
    #[serde(rename = "authorizationLoggingOptions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Information used by the Cloud Audit Logging pipeline."]
    pub authorization_logging_options:
        ::std::option::Option<::std::boxed::Box<AuthorizationLoggingOptions>>,
    #[serde(rename = "logName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The log_name to populate in the Cloud Audit Record."]
    pub log_name: ::std::option::Option<LogConfigCloudAuditOptionsLogNameEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The log_name to populate in the Cloud Audit Record."]
pub enum LogConfigCloudAuditOptionsLogNameEnum {
    #[serde(rename = "ADMIN_ACTIVITY")]
    #[doc = ""]
    AdminActivity,
    #[serde(rename = "DATA_ACCESS")]
    #[doc = ""]
    DataAccess,
    #[serde(rename = "UNSPECIFIED_LOG_NAME")]
    #[doc = ""]
    UnspecifiedLogName,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Increment a streamz counter with the specified metric and field names.\n\nMetric names should start with a '/', generally be lowercase-only, and end in \"_count\". Field names should not contain an initial slash. The actual exported metric names will have \"/iam/policy\" prepended.\n\nField names correspond to IAM request parameters and field values are their respective values.\n\nSupported field names: - \"authority\", which is \"[token]\" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - \"iam_principal\", a representation of IAMContext.principal even if a token or authority selector is present; or - \"\" (empty string), resulting in a counter with no fields.\n\nExamples: counter { metric: \"/debug_access_count\" field: \"iam_principal\" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}"]
pub struct LogConfigCounterOptions {
    #[serde(rename = "customFields")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Custom fields."]
    pub custom_fields: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<LogConfigCounterOptionsCustomField>>,
    >,
    #[serde(rename = "field")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The field value to attribute."]
    pub field: ::std::option::Option<::std::string::String>,
    #[serde(rename = "metric")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The metric to update."]
    pub metric: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields."]
pub struct LogConfigCounterOptionsCustomField {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name is the field name."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Write a Data Access (Gin) log"]
pub struct LogConfigDataAccessOptions {
    #[serde(rename = "logMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = ""]
    pub log_mode: ::std::option::Option<LogConfigDataAccessOptionsLogModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = ""]
pub enum LogConfigDataAccessOptionsLogModeEnum {
    #[serde(rename = "LOG_FAIL_CLOSED")]
    #[doc = ""]
    LogFailClosed,
    #[serde(rename = "LOG_MODE_UNSPECIFIED")]
    #[doc = ""]
    LogModeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a machine image resource.\n\nA machine image is a Compute Engine resource that stores all the configuration, metadata, permissions, and data from one or more disks required to create a Virtual machine (VM) instance. For more information, see Machine images. (== resource_for {$api_version}.machineImages ==)"]
pub struct MachineImage {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The creation timestamp for this machine image in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestFlush")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS)."]
    pub guest_flush: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A unique identifier for this machine image. The server defines this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "machine_image_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#machineImage for machine image."]
    pub kind: ::std::string::String,
    #[serde(rename = "machineImageEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts the machine image using a customer-supplied encryption key.\n\nAfter you encrypt a machine image using a customer-supplied key, you must provide the same key if you use the machine image later. For example, you must provide the encryption key when you create an instance from the encrypted machine image in a future request.\n\nCustomer-supplied encryption keys do not protect access to metadata of the machine image.\n\nIf you do not provide an encryption key when creating the machine image, then the machine image will be encrypted using an automatically generated key and you do not need to provide a key to use the machine image later."]
    pub machine_image_encryption_key:
        ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL for this machine image. The server defines this URL."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskEncryptionKeys")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key."]
    pub source_disk_encryption_keys:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SourceDiskEncryptionKey>>>,
    #[serde(rename = "sourceInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance \n- projects/project/zones/zone/instances/instance"]
    pub source_instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceInstanceProperties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Properties of source instance."]
    pub source_instance_properties:
        ::std::option::Option<::std::boxed::Box<SourceInstanceProperties>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING."]
    pub status: ::std::option::Option<MachineImageStatusEnum>,
    #[serde(rename = "storageLocations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The regional or multi-regional Cloud Storage bucket location where the machine image is stored."]
    pub storage_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "totalStorageBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Total size of the storage used by the machine image."]
    pub total_storage_bytes: ::std::option::Option<::std::string::String>,
}
mod machine_image_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#machineImage")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING."]
pub enum MachineImageStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
    #[serde(rename = "UPLOADING")]
    #[doc = ""]
    Uploading,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A list of machine images."]
pub struct MachineImageList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of MachineImage resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MachineImage>>>,
    #[serde(rename = "kind")]
    #[serde(default = "machine_image_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<MachineImageListWarning>,
}
mod machine_image_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#machineImageList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct MachineImageListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<MachineImageListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<MachineImageListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum MachineImageListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineImageListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Machine Type resource.\n\nYou can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types. (== resource_for {$api_version}.machineTypes ==)"]
pub struct MachineType {
    #[serde(rename = "accelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of accelerator configurations assigned to this machine type."]
    pub accelerators: ::std::option::Option<::std::vec::Vec<MachineTypeAccelerators>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this machine type. Only applicable if the machine type is unavailable."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestCpus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of virtual CPUs that are available to the instance."]
    pub guest_cpus: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "isSharedCpu")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information."]
    pub is_shared_cpu: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "kind")]
    #[serde(default = "machine_type_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#machineType for machine types."]
    pub kind: ::std::string::String,
    #[serde(rename = "maximumPersistentDisks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Maximum persistent disks allowed."]
    pub maximum_persistent_disks: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maximumPersistentDisksSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Maximum total persistent disks size (GB) allowed."]
    pub maximum_persistent_disks_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "memoryMb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The amount of physical memory available to the instance, defined in MB."]
    pub memory_mb: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the zone where the machine type resides, such as us-central1-a."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod machine_type_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#machineType")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypeAccelerators {
    #[serde(rename = "guestAcceleratorCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of accelerator cards exposed to the guest."]
    pub guest_accelerator_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "guestAcceleratorType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The accelerator type resource name, not a full URL, e.g. 'nvidia-tesla-k80'."]
    pub guest_accelerator_type: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypeAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of MachineTypesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<MachineTypesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "machine_type_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<MachineTypeAggregatedListWarning>,
}
mod machine_type_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#machineTypeAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct MachineTypeAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<MachineTypeAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<MachineTypeAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum MachineTypeAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypeAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of machine types."]
pub struct MachineTypeList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of MachineType resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MachineType>>>,
    #[serde(rename = "kind")]
    #[serde(default = "machine_type_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#machineTypeList for lists of machine types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<MachineTypeListWarning>,
}
mod machine_type_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#machineTypeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct MachineTypeListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<MachineTypeListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<MachineTypeListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum MachineTypeListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypeListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypesScopedList {
    #[serde(rename = "machineTypes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of machine types contained in this scope."]
    pub machine_types: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MachineType>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that appears when the machine types list is empty."]
    pub warning: ::std::option::Option<MachineTypesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that appears when the machine types list is empty."]
pub struct MachineTypesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<MachineTypesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<MachineTypesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum MachineTypesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MachineTypesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A Managed Instance resource."]
pub struct ManagedInstance {
    #[serde(rename = "currentAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: \n- NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. \n- CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. \n- CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. \n- RECREATING The managed instance group is recreating this instance. \n- DELETING The managed instance group is permanently deleting this instance. \n- ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. \n- RESTARTING The managed instance group is restarting the instance. \n- REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. \n- VERIFYING The managed instance group has created the instance and it is in the process of being verified."]
    pub current_action: ::std::option::Option<ManagedInstanceCurrentActionEnum>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] The unique identifier for this resource. This field is empty when instance does not exist."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created."]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceHealth")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Health state of the instance per health-check."]
    pub instance_health:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ManagedInstanceInstanceHealth>>>,
    #[serde(rename = "instanceStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the instance. This field is empty when the instance does not exist."]
    pub instance_status: ::std::option::Option<ManagedInstanceInstanceStatusEnum>,
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }."]
    pub instance_template: ::std::option::Option<::std::string::String>,
    #[serde(rename = "lastAttempt")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Information about the last attempt to create or delete the instance."]
    pub last_attempt: ::std::option::Option<::std::boxed::Box<ManagedInstanceLastAttempt>>,
    #[serde(rename = "preservedStateFromConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Preserved state applied from per-instance config for this instance."]
    pub preserved_state_from_config: ::std::option::Option<::std::boxed::Box<PreservedState>>,
    #[serde(rename = "preservedStateFromPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Preserved state generated based on stateful policy for this instance."]
    pub preserved_state_from_policy: ::std::option::Option<::std::boxed::Box<PreservedState>>,
    #[serde(rename = "tag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Tag describing the version."]
    pub tag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Intended version of this instance."]
    pub version: ::std::option::Option<::std::boxed::Box<ManagedInstanceVersion>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: \n- NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. \n- CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. \n- CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. \n- RECREATING The managed instance group is recreating this instance. \n- DELETING The managed instance group is permanently deleting this instance. \n- ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. \n- RESTARTING The managed instance group is restarting the instance. \n- REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. \n- VERIFYING The managed instance group has created the instance and it is in the process of being verified."]
pub enum ManagedInstanceCurrentActionEnum {
    #[serde(rename = "ABANDONING")]
    #[doc = ""]
    Abandoning,
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "CREATING_WITHOUT_RETRIES")]
    #[doc = ""]
    CreatingWithoutRetries,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "RECREATING")]
    #[doc = ""]
    Recreating,
    #[serde(rename = "REFRESHING")]
    #[doc = ""]
    Refreshing,
    #[serde(rename = "RESTARTING")]
    #[doc = ""]
    Restarting,
    #[serde(rename = "VERIFYING")]
    #[doc = ""]
    Verifying,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the instance. This field is empty when the instance does not exist."]
pub enum ManagedInstanceInstanceStatusEnum {
    #[serde(rename = "DEPROVISIONING")]
    #[doc = ""]
    Deprovisioning,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
    #[serde(rename = "REPAIRING")]
    #[doc = ""]
    Repairing,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
    #[serde(rename = "STAGING")]
    #[doc = ""]
    Staging,
    #[serde(rename = "STOPPED")]
    #[doc = ""]
    Stopped,
    #[serde(rename = "STOPPING")]
    #[doc = ""]
    Stopping,
    #[serde(rename = "SUSPENDED")]
    #[doc = ""]
    Suspended,
    #[serde(rename = "SUSPENDING")]
    #[doc = ""]
    Suspending,
    #[serde(rename = "TERMINATED")]
    #[doc = ""]
    Terminated,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ManagedInstanceInstanceHealth {
    #[serde(rename = "detailedHealthState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current detailed instance health state."]
    pub detailed_health_state:
        ::std::option::Option<ManagedInstanceInstanceHealthDetailedHealthStateEnum>,
    #[serde(rename = "healthCheck")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL for the health check that verifies whether the instance is healthy."]
    pub health_check: ::std::option::Option<::std::string::String>,
    #[serde(rename = "healthState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current instance health state. This field will not get promoted to beta/GA and might be removed from alpha APIs after 01/12/2019. Please use detailed_health_state field instead."]
    pub health_state: ::std::option::Option<ManagedInstanceInstanceHealthHealthStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current detailed instance health state."]
pub enum ManagedInstanceInstanceHealthDetailedHealthStateEnum {
    #[serde(rename = "DRAINING")]
    #[doc = ""]
    Draining,
    #[serde(rename = "HEALTHY")]
    #[doc = ""]
    Healthy,
    #[serde(rename = "TIMEOUT")]
    #[doc = ""]
    Timeout,
    #[serde(rename = "UNHEALTHY")]
    #[doc = ""]
    Unhealthy,
    #[serde(rename = "UNKNOWN")]
    #[doc = ""]
    Unknown,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current instance health state. This field will not get promoted to beta/GA and might be removed from alpha APIs after 01/12/2019. Please use detailed_health_state field instead."]
pub enum ManagedInstanceInstanceHealthHealthStateEnum {
    #[serde(rename = "HEALTHY")]
    #[doc = ""]
    Healthy,
    #[serde(rename = "UNHEALTHY")]
    #[doc = ""]
    Unhealthy,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ManagedInstanceLastAttempt {
    #[serde(rename = "errors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Encountered errors during the last attempt to create or delete the instance."]
    pub errors: ::std::option::Option<ManagedInstanceLastAttemptErrors>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Encountered errors during the last attempt to create or delete the instance."]
pub struct ManagedInstanceLastAttemptErrors {
    #[serde(rename = "errors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The array of errors encountered while processing this operation."]
    pub errors: ::std::option::Option<::std::vec::Vec<ManagedInstanceLastAttemptErrorsErrors>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ManagedInstanceLastAttemptErrorsErrors {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The error type identifier for this error."]
    pub code: ::std::option::Option<::std::string::String>,
    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Indicates the field in the request that caused the error. This property is optional."]
    pub location: ::std::option::Option<::std::string::String>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional, human-readable error message."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ManagedInstanceVersion {
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }."]
    pub instance_template: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the version."]
    pub name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A metadata key/value entry."]
pub struct Metadata {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve the resource."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Array of key/value pairs. The total size of all keys and values must be less than 512 KB."]
    pub items: ::std::option::Option<::std::vec::Vec<MetadataItems>>,
    #[serde(rename = "kind")]
    #[serde(default = "metadata_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#metadata for metadata."]
    pub kind: ::std::string::String,
}
mod metadata_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#metadata")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct MetadataItems {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB)."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Custom authenticator credentials. Custom authenticator credentials."]
pub struct MetadataCredentialsFromPlugin {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Plugin name."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "structConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A text proto that conforms to a Struct type definition interpreted by the plugin."]
    pub struct_config: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies.\nFor each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata.\nAn example for using metadataFilters would be: if loadbalancing involves  Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/base.proto#envoy-api-msg-core-node\" Node metadata of their XDS requests to loadbalancers."]
pub struct MetadataFilter {
    #[serde(rename = "filterLabels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria \nThis list must not be empty and can have at the most 64 entries."]
    pub filter_labels:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<MetadataFilterLabelMatch>>>,
    #[serde(rename = "filterMatchCriteria")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.\nSupported values are:  \n- MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. \n- MATCH_ALL: All filterLabels must have matching labels in the provided metadata."]
    pub filter_match_criteria: ::std::option::Option<MetadataFilterFilterMatchCriteriaEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.\nSupported values are:  \n- MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. \n- MATCH_ALL: All filterLabels must have matching labels in the provided metadata."]
pub enum MetadataFilterFilterMatchCriteriaEnum {
    #[serde(rename = "MATCH_ALL")]
    #[doc = ""]
    MatchAll,
    #[serde(rename = "MATCH_ANY")]
    #[doc = ""]
    MatchAny,
    #[serde(rename = "NOT_SET")]
    #[doc = ""]
    NotSet,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer."]
pub struct MetadataFilterLabelMatch {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of metadata label.\nThe name can have a maximum length of 1024 characters and must be at least 1 character long."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The value of the label must match the specified value.\nvalue can have a maximum length of 1024 characters."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Configuration for the mutual Tls mode for peer authentication. Configuration for the mutual Tls mode for peer authentication."]
pub struct MutualTls {
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS."]
    pub mode: ::std::option::Option<MutualTlsModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS."]
pub enum MutualTlsModeEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "PERMISSIVE")]
    #[doc = ""]
    Permissive,
    #[serde(rename = "STRICT")]
    #[doc = ""]
    Strict,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The named port. For example: ."]
pub struct NamedPort {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name for this named port. The name must be 1-63 characters long, and comply with RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The port number, which can be a value between 1 and 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a VPC Network resource.\n\nNetworks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network. (== resource_for {$api_version}.networks ==)"]
pub struct Network {
    #[serde(rename = "IPv4Range")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created."]
    pub i_pv4_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "autoCreateSubnetworks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Must be set to create a VPC network. If not set, a legacy network is created.\n\nWhen set to true, the VPC network is created in auto mode. When set to false, the VPC network is created in custom mode.\n\nAn auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges.\n\nFor custom mode VPC networks, you can add subnets using the subnetworks insert method."]
    pub auto_create_subnetworks: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this field when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "firewallPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the firewall policy the network is associated with."]
    pub firewall_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "gatewayIPv4")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The gateway address for default routing out of the network, selected by GCP."]
    pub gateway_i_pv4: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "network_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#network for networks."]
    pub kind: ::std::string::String,
    #[serde(rename = "mtu")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum Transmission Unit in bytes. The minimum value for this field is 1460 and the maximum value is 1500 bytes."]
    pub mtu: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of network peerings for the resource."]
    pub peerings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkPeering>>>,
    #[serde(rename = "routingConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The network-level routing configuration for this network. Used by Cloud Router to determine what type of network-wide routing behavior to enforce."]
    pub routing_config: ::std::option::Option<::std::boxed::Box<NetworkRoutingConfig>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetworks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network."]
    pub subnetworks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod network_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#network")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The network endpoint."]
pub struct NetworkEndpoint {
    #[serde(rename = "annotations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Metadata defined as annotations on the network endpoint."]
    pub annotations:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "fqdn")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT."]
    pub fqdn: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group.\n\nThe name must be 1-63 characters long, and comply with RFC1035."]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used."]
    pub port: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a collection of network endpoints.\n\nA network endpoint group (NEG) defines how a set of endpoints should be reached, whether they are reachable, and where they are located. For more information about using NEGs, see  Setting up external HTTP(S) Load Balancing with internet NEGs,  Setting up zonal NEGs, or  Setting up external HTTP(S) Load Balancing with serverless NEGs. (== resource_for {$api_version}.networkEndpointGroups ==) (== resource_for {$api_version}.globalNetworkEndpointGroups ==) (== resource_for {$api_version}.regionNetworkEndpointGroups ==)"]
pub struct NetworkEndpointGroup {
    #[serde(rename = "annotations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Metadata defined as annotations on the network endpoint group."]
    pub annotations:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "appEngine")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set."]
    pub app_engine: ::std::option::Option<::std::boxed::Box<NetworkEndpointGroupAppEngine>>,
    #[serde(rename = "cloudFunction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set."]
    pub cloud_function: ::std::option::Option<::std::boxed::Box<NetworkEndpointGroupCloudFunction>>,
    #[serde(rename = "cloudRun")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set."]
    pub cloud_run: ::std::option::Option<::std::boxed::Box<NetworkEndpointGroupCloudRun>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultPort")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The default port used if the port number is not specified in the network endpoint."]
    pub default_port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "network_endpoint_group_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group."]
    pub kind: ::std::string::String,
    #[serde(rename = "loadBalancer")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is only valid when the network endpoint group is used for load balancing. [Deprecated] This field is deprecated."]
    pub load_balancer:
        ::std::option::Option<::std::boxed::Box<NetworkEndpointGroupLbNetworkEndpointGroup>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network to which all network endpoints in the NEG belong. Uses \"default\" project network if unspecified."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkEndpointType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS."]
    pub network_endpoint_type: ::std::option::Option<NetworkEndpointGroupNetworkEndpointTypeEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the region where the network endpoint group is located."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serverlessDeployment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine cloudFunction or serverlessDeployment may be set."]
    pub serverless_deployment:
        ::std::option::Option<::std::boxed::Box<NetworkEndpointGroupServerlessDeployment>>,
    #[serde(rename = "size")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Number of network endpoints in the network endpoint group."]
    pub size: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional URL of the subnetwork to which all network endpoints in the NEG belong."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now."]
    pub _type: ::std::option::Option<NetworkEndpointGroupTypeEnum>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the zone where the network endpoint group is located."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod network_endpoint_group_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkEndpointGroup")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS."]
pub enum NetworkEndpointGroupNetworkEndpointTypeEnum {
    #[serde(rename = "GCE_VM_IP")]
    #[doc = ""]
    GceVmIp,
    #[serde(rename = "GCE_VM_IP_PORT")]
    #[doc = ""]
    GceVmIpPort,
    #[serde(rename = "GCE_VM_PRIMARY_IP")]
    #[doc = ""]
    GceVmPrimaryIp,
    #[serde(rename = "INTERNET_FQDN_PORT")]
    #[doc = ""]
    InternetFqdnPort,
    #[serde(rename = "INTERNET_IP_PORT")]
    #[doc = ""]
    InternetIpPort,
    #[serde(rename = "NON_GCP_PRIVATE_IP_PORT")]
    #[doc = ""]
    NonGcpPrivateIpPort,
    #[serde(rename = "SERVERLESS")]
    #[doc = ""]
    Serverless,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now."]
pub enum NetworkEndpointGroupTypeEnum {
    #[serde(rename = "LOAD_BALANCING")]
    #[doc = ""]
    LoadBalancing,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NetworkEndpointGroupsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<NetworkEndpointGroupsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "network_endpoint_group_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NetworkEndpointGroupAggregatedListWarning>,
}
mod network_endpoint_group_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkEndpointGroupAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NetworkEndpointGroupAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NetworkEndpointGroupAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NetworkEndpointGroupAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NetworkEndpointGroupAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present.\n\nNote: App Engine service must be in the same project and located in the same region as the Serverless NEG."]
pub struct NetworkEndpointGroupAppEngine {
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional serving service.\n\nThe service name is case-sensitive and must be 1-63 characters long.\n\nExample value: \"default\", \"my-service\"."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMask")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services.\n\nFor example, the request URLs \"foo1-dot-appname.appspot.com/v1\" and \"foo1-dot-appname.appspot.com/v2\" can be backed by the same Serverless NEG with URL mask \"-dot-appname.appspot.com/\". The URL mask will parse them to { service = \"foo1\", version = \"v1\" } and { service = \"foo1\", version = \"v2\" } respectively."]
    pub url_mask: ::std::option::Option<::std::string::String>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional serving version.\n\nThe version name is case-sensitive and must be 1-100 characters long.\n\nExample value: \"v1\", \"v2\"."]
    pub version: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask.\n\nNote: Cloud Function must be in the same project and located in the same region as the Serverless NEG."]
pub struct NetworkEndpointGroupCloudFunction {
    #[serde(rename = "function")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A user-defined name of the Cloud Function.\n\nThe function name is case-sensitive and must be 1-63 characters long.\n\nExample value: \"func1\"."]
    pub function: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMask")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services.\n\nFor example, request URLs \"mydomain.com/function1\" and \"mydomain.com/function2\" can be backed by the same Serverless NEG with URL mask \"/\". The URL mask will parse them to { function = \"function1\" } and { function = \"function2\" } respectively."]
    pub url_mask: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask.\n\nNote: Cloud Run service must be in the same project and located in the same region as the Serverless NEG."]
pub struct NetworkEndpointGroupCloudRun {
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud Run service is the main resource of Cloud Run.\n\nThe service must be 1-63 characters long, and comply with RFC1035.\n\nExample value: \"run-service\"."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional Cloud Run tag represents the \"named-revision\" to provide additional fine-grained traffic routing information.\n\nThe tag must be 1-63 characters long, and comply with RFC1035.\n\nExample value: \"revision-0010\"."]
    pub tag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMask")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services.\n\nFor example, request URLs \"foo1.domain.com/bar1\" and \"foo1.domain.com/bar2\" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask \".domain.com/\". The URL mask will parse them to { service=\"bar1\", tag=\"foo1\" } and { service=\"bar2\", tag=\"foo2\" } respectively."]
    pub url_mask: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Load balancing specific fields for network endpoint group."]
pub struct NetworkEndpointGroupLbNetworkEndpointGroup {
    #[serde(rename = "defaultPort")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The default port used if the port number is not specified in the network endpoint. [Deprecated] This field is deprecated."]
    pub default_port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network to which all network endpoints in the NEG belong. Uses \"default\" project network if unspecified. [Deprecated] This field is deprecated."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional URL of the subnetwork to which all network endpoints in the NEG belong. [Deprecated] This field is deprecated."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the zone where the network endpoint group is located. [Deprecated] This field is deprecated."]
    pub zone: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NetworkEndpointGroup resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpointGroup>>>,
    #[serde(rename = "kind")]
    #[serde(default = "network_endpoint_group_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NetworkEndpointGroupListWarning>,
}
mod network_endpoint_group_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkEndpointGroupList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NetworkEndpointGroupListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NetworkEndpointGroupListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NetworkEndpointGroupListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NetworkEndpointGroupListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration for a Serverless Deployment network endpoint group (NEG). The platform must be provided.\n\nNote: The target backend service must be in the same project and located in the same region as the Serverless NEG."]
pub struct NetworkEndpointGroupServerlessDeployment {
    #[serde(rename = "platform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The platform of the backend target(s) of this NEG. Possible values include:\n\n \n- apigateway.googleapis.com \n- appengine.googleapies.com \n- cloudfunctions.googleapis.com \n- run.googleapis.com"]
    pub platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "resource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The user-defined name of the workload/instance. This value must be provided explicitly or in the urlMask. The resource identified by this value is platform-specific and is as follows:\n\n \n- API Gateway: The gateway id \n- AppEngine: The service name \n- Cloud Functions: The function name \n- Cloud Run: The service name"]
    pub resource: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMask")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A template to parse platform-specific fields from a request URL. URL mask allows for routing to multiple services on the same serverless platform without having to create multiple Network Endpoint Groups and backend services. The fields parsed by this template is platform-specific and are as follows:\n\n \n- API Gateway: The gateway id \n- AppEngine: The service and version \n- Cloud Functions: The function \n- Cloud Run: The service and tag"]
    pub url_mask: ::std::option::Option<::std::string::String>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The optional resource version. The version identified by this value is as platform-specific and is follows:\n\n \n- API Gateway: Unused \n- AppEngine: The service version \n- Cloud Functions: Unused \n- Cloud Run: The service tag"]
    pub version: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsAttachEndpointsRequest {
    #[serde(rename = "networkEndpoints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of network endpoints to be attached."]
    pub network_endpoints:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpoint>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsDetachEndpointsRequest {
    #[serde(rename = "networkEndpoints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of network endpoints to be detached."]
    pub network_endpoints:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpoint>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsListEndpointsRequest {
    #[serde(rename = "endpointFilters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional list of endpoints to query. This is a more efficient but also limited version of filter parameter. Endpoints in the filter must have ip_address and port fields populated, other fields are not supported."]
    pub endpoint_filters: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter>,
        >,
    >,
    #[serde(rename = "healthStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided."]
    pub health_status:
        ::std::option::Option<NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided."]
pub enum NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum {
    #[serde(rename = "SHOW")]
    #[doc = ""]
    Show,
    #[serde(rename = "SKIP")]
    #[doc = ""]
    Skip,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter {
    #[serde(rename = "networkEndpoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub network_endpoint: ::std::option::Option<::std::boxed::Box<NetworkEndpoint>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsListNetworkEndpoints {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NetworkEndpointWithHealthStatus resources."]
    pub items:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpointWithHealthStatus>>>,
    #[serde(rename = "kind")]
    #[serde(default = "network_endpoint_groups_list_network_endpoints_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NetworkEndpointGroupsListNetworkEndpointsWarning>,
}
mod network_endpoint_groups_list_network_endpoints_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkEndpointGroupsListNetworkEndpoints")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NetworkEndpointGroupsListNetworkEndpointsWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<
        ::std::vec::Vec<NetworkEndpointGroupsListNetworkEndpointsWarningData>,
    >,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsListNetworkEndpointsWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsScopedList {
    #[serde(rename = "networkEndpointGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of network endpoint groups that are contained in this scope."]
    pub network_endpoint_groups:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkEndpointGroup>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty."]
    pub warning: ::std::option::Option<NetworkEndpointGroupsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty."]
pub struct NetworkEndpointGroupsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NetworkEndpointGroupsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NetworkEndpointGroupsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NetworkEndpointGroupsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointGroupsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkEndpointWithHealthStatus {
    #[serde(rename = "healths")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] The health status of network endpoint;"]
    pub healths:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthStatusForNetworkEndpoint>>>,
    #[serde(rename = "networkEndpoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] The network endpoint;"]
    pub network_endpoint: ::std::option::Option<::std::boxed::Box<NetworkEndpoint>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A network interface resource attached to an instance."]
pub struct NetworkInterface {
    #[serde(rename = "accessConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access."]
    pub access_configs: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AccessConfig>>>,
    #[serde(rename = "aliasIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks."]
    pub alias_ip_ranges: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AliasIpRange>>>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface, otherwise the request will fail with error 412 conditionNotMet."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "internalIpv6PrefixLength")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The prefix length of the primary internal IPv6 range."]
    pub internal_ipv6_prefix_length: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ipv6AccessConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access."]
    pub ipv6_access_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AccessConfig>>>,
    #[serde(rename = "ipv6AccessType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.\n\nValid only if stackType is IPV4_IPV6."]
    pub ipv6_access_type: ::std::option::Option<NetworkInterfaceIpv6AccessTypeEnum>,
    #[serde(rename = "ipv6Address")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An IPv6 internal network address for this network interface."]
    pub ipv6_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "network_interface_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#networkInterface for network interfaces."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.\n\nIf you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project/global/networks/network \n- projects/project/global/networks/network \n- global/networks/default"]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkIP")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system."]
    pub network_ip: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nicType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet."]
    pub nic_type: ::std::option::Option<NetworkInterfaceNicTypeEnum>,
    #[serde(rename = "queueCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users."]
    pub queue_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "stackType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.\n\nThis field can be both set at instance creation and update network interface operations."]
    pub stack_type: ::std::option::Option<NetworkInterfaceStackTypeEnum>,
    #[serde(rename = "subinterfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "SubInterfaces help enable L2 communication for the instance over subnetworks that support L2. Every network interface will get a default untagged (vlan not specified) subinterface. Users can specify additional tagged subinterfaces which are sub-fields to the Network Interface."]
    pub subinterfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkInterfaceSubInterface>>>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork \n- regions/region/subnetworks/subnetwork"]
    pub subnetwork: ::std::option::Option<::std::string::String>,
}
mod network_interface_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkInterface")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.\n\nValid only if stackType is IPV4_IPV6."]
pub enum NetworkInterfaceIpv6AccessTypeEnum {
    #[serde(rename = "EXTERNAL")]
    #[doc = ""]
    External,
    #[serde(rename = "INTERNAL")]
    #[doc = ""]
    Internal,
    #[serde(rename = "UNSPECIFIED_IPV6_ACCESS_TYPE")]
    #[doc = ""]
    UnspecifiedIpv6AccessType,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet."]
pub enum NetworkInterfaceNicTypeEnum {
    #[serde(rename = "GVNIC")]
    #[doc = ""]
    Gvnic,
    #[serde(rename = "UNSPECIFIED_NIC_TYPE")]
    #[doc = ""]
    UnspecifiedNicType,
    #[serde(rename = "VIRTIO_NET")]
    #[doc = ""]
    VirtioNet,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.\n\nThis field can be both set at instance creation and update network interface operations."]
pub enum NetworkInterfaceStackTypeEnum {
    #[serde(rename = "IPV4_IPV6")]
    #[doc = ""]
    Ipv4Ipv6,
    #[serde(rename = "IPV4_ONLY")]
    #[doc = ""]
    Ipv4Only,
    #[serde(rename = "UNSPECIFIED_STACK_TYPE")]
    #[doc = ""]
    UnspecifiedStackType,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkInterfaceSubInterface {
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An IPv4 internal IP address to assign to the instance for this subinterface."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If specified, this subnetwork must belong to the same network as that of the network interface. If not specified the subnet of network interface will be used. If you specify this property, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork \n- regions/region/subnetworks/subnetwork"]
    pub subnetwork: ::std::option::Option<::std::string::String>,
    #[serde(rename = "vlan")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "VLAN tag. Should match the VLAN(s) supported by the subnetwork to which this subinterface is connecting."]
    pub vlan: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of networks."]
pub struct NetworkList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Network resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Network>>>,
    #[serde(rename = "kind")]
    #[serde(default = "network_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#networkList for lists of networks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NetworkListWarning>,
}
mod network_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#networkList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NetworkListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NetworkListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NetworkListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NetworkListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering."]
pub struct NetworkPeering {
    #[serde(rename = "advertisePeerSubnetsViaRouters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether Cloud Routers in this network can automatically advertise subnets from the peer network."]
    pub advertise_peer_subnets_via_routers: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "autoCreateRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE."]
    pub auto_create_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "exchangeSubnetRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE."]
    pub exchange_subnet_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "exportCustomRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to export the custom routes to peer network."]
    pub export_custom_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "exportSubnetRoutesWithPublicIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field."]
    pub export_subnet_routes_with_public_ip: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "importCustomRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to import the custom routes from peer network."]
    pub import_custom_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "importSubnetRoutesWithPublicIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field."]
    pub import_subnet_routes_with_public_ip: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerMtu")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum Transmission Unit in bytes."]
    pub peer_mtu: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network."]
    pub state: ::std::option::Option<NetworkPeeringStateEnum>,
    #[serde(rename = "stateDetails")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Details about the current state of the peering."]
    pub state_details: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network."]
pub enum NetworkPeeringStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "INACTIVE")]
    #[doc = ""]
    Inactive,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworkPerformanceConfig {
    #[serde(rename = "externalIpEgressBandwidthTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub external_ip_egress_bandwidth_tier:
        ::std::option::Option<NetworkPerformanceConfigExternalIpEgressBandwidthTierEnum>,
    #[serde(rename = "totalEgressBandwidthTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub total_egress_bandwidth_tier:
        ::std::option::Option<NetworkPerformanceConfigTotalEgressBandwidthTierEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum NetworkPerformanceConfigExternalIpEgressBandwidthTierEnum {
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
    #[serde(rename = "TIER_1")]
    #[doc = ""]
    Tier1,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum NetworkPerformanceConfigTotalEgressBandwidthTierEnum {
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
    #[serde(rename = "TIER_1")]
    #[doc = ""]
    Tier1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide."]
pub struct NetworkRoutingConfig {
    #[serde(rename = "routingMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions."]
    pub routing_mode: ::std::option::Option<NetworkRoutingConfigRoutingModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions."]
pub enum NetworkRoutingConfigRoutingModeEnum {
    #[serde(rename = "GLOBAL")]
    #[doc = ""]
    Global,
    #[serde(rename = "REGIONAL")]
    #[doc = ""]
    Regional,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworksAddPeeringRequest {
    #[serde(rename = "autoCreateRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE."]
    pub auto_create_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "exportCustomRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field will be deprecated soon. Use export_custom_routes in network_peering instead. Whether to export the custom routes to peer network."]
    pub export_custom_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "importCustomRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field will be deprecated soon. Use import_custom_routes in network_peering instead. Whether to import the custom routes from peer network."]
    pub import_custom_routes: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the peering, which should conform to RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkPeering")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Network peering parameters. In order to specify route policies for peering using import and export custom routes, you must specify all peering related parameters (name, peer network, exchange_subnet_routes) in the network_peering field. The corresponding fields in NetworksAddPeeringRequest will be deprecated soon."]
    pub network_peering: ::std::option::Option<::std::boxed::Box<NetworkPeering>>,
    #[serde(rename = "peerNetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network."]
    pub peer_network: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworksGetEffectiveFirewallsResponse {
    #[serde(rename = "firewallPolicys")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls from firewall policy."]
    pub firewall_policys: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy>,
        >,
    >,
    #[serde(rename = "firewalls")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls on the network."]
    pub firewalls: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Firewall>>>,
    #[serde(rename = "organizationFirewalls")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Effective firewalls from organization policies."]
    pub organization_firewalls: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy>,
        >,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The display name of the firewall policy."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the firewall policy."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The rules that apply to the network."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<FirewallPolicyRule>>>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The type of the firewall policy."]
    pub _type:
        ::std::option::Option<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The type of the firewall policy."]
pub enum NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    #[serde(rename = "HIERARCHY")]
    #[doc = ""]
    Hierarchy,
    #[serde(rename = "NETWORK")]
    #[doc = ""]
    Network,
    #[serde(rename = "UNSPECIFIED")]
    #[doc = ""]
    Unspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A pruned SecurityPolicy containing ID and any applicable firewall rules."]
pub struct NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the security policy. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The rules that apply to the network."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicyRule>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworksRemovePeeringRequest {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the peering, which should conform to RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NetworksUpdatePeeringRequest {
    #[serde(rename = "networkPeering")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub network_peering: ::std::option::Option<::std::boxed::Box<NetworkPeering>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represent a sole-tenant Node Group resource.\n\nA sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes. (== resource_for {$api_version}.nodeGroups ==)"]
pub struct NodeGroup {
    #[serde(rename = "autoscalingPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how autoscaling should behave."]
    pub autoscaling_policy: ::std::option::Option<::std::boxed::Box<NodeGroupAutoscalingPolicy>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "node_group_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#nodeGroup for node group."]
    pub kind: ::std::string::String,
    #[serde(rename = "locationHint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup overrides any location_hint present in the NodeTemplate."]
    pub location_hint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "maintenancePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see  Maintenance policies."]
    pub maintenance_policy: ::std::option::Option<NodeGroupMaintenancePolicyEnum>,
    #[serde(rename = "maintenanceWindow")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub maintenance_window: ::std::option::Option<::std::boxed::Box<NodeGroupMaintenanceWindow>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nodeTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the node template to create the node group from."]
    pub node_template: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "size")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The total number of nodes in the node group."]
    pub size: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub status: ::std::option::Option<NodeGroupStatusEnum>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the zone where the node group resides, such as us-central1-a."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod node_group_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeGroup")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see  Maintenance policies."]
pub enum NodeGroupMaintenancePolicyEnum {
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
    #[serde(rename = "MAINTENANCE_POLICY_UNSPECIFIED")]
    #[doc = ""]
    MaintenancePolicyUnspecified,
    #[serde(rename = "MIGRATE_WITHIN_NODE_GROUP")]
    #[doc = ""]
    MigrateWithinNodeGroup,
    #[serde(rename = "RESTART_IN_PLACE")]
    #[doc = ""]
    RestartInPlace,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum NodeGroupStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeGroupsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<NodeGroupsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "node_group_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeGroupAggregatedListWarning>,
}
mod node_group_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeGroupAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeGroupAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeGroupAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeGroupAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeGroupAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupAutoscalingPolicy {
    #[serde(rename = "maxNodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100."]
    pub max_nodes: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minNodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of nodes that the group should have."]
    pub min_nodes: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see  Autoscaler modes."]
    pub mode: ::std::option::Option<NodeGroupAutoscalingPolicyModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see  Autoscaler modes."]
pub enum NodeGroupAutoscalingPolicyModeEnum {
    #[serde(rename = "MODE_UNSPECIFIED")]
    #[doc = ""]
    ModeUnspecified,
    #[serde(rename = "OFF")]
    #[doc = ""]
    Off,
    #[serde(rename = "ON")]
    #[doc = ""]
    On,
    #[serde(rename = "ONLY_SCALE_OUT")]
    #[doc = ""]
    OnlyScaleOut,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of nodeGroups."]
pub struct NodeGroupList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeGroup resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeGroup>>>,
    #[serde(rename = "kind")]
    #[serde(default = "node_group_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeGroupListWarning>,
}
mod node_group_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeGroupList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeGroupListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeGroupListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeGroupListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeGroupListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window."]
pub struct NodeGroupMaintenanceWindow {
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario."]
    pub duration: ::std::option::Option<::std::string::String>,
    #[serde(rename = "maintenanceDuration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario."]
    pub maintenance_duration: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid."]
    pub start_time: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupNode {
    #[serde(rename = "accelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Accelerators for this node."]
    pub accelerators: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "cpuOvercommitType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CPU overcommit."]
    pub cpu_overcommit_type: ::std::option::Option<NodeGroupNodeCpuOvercommitTypeEnum>,
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Local disk configurations."]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<LocalDisk>>>,
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Instances scheduled on this node."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the node."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nodeType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of this node."]
    pub node_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "serverBinding")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Binding properties for the physical server."]
    pub server_binding: ::std::option::Option<::std::boxed::Box<ServerBinding>>,
    #[serde(rename = "serverId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Server ID associated with this node."]
    pub server_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub status: ::std::option::Option<NodeGroupNodeStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "CPU overcommit."]
pub enum NodeGroupNodeCpuOvercommitTypeEnum {
    #[serde(rename = "CPU_OVERCOMMIT_TYPE_UNSPECIFIED")]
    #[doc = ""]
    CpuOvercommitTypeUnspecified,
    #[serde(rename = "ENABLED")]
    #[doc = ""]
    Enabled,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum NodeGroupNodeStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
    #[serde(rename = "REPAIRING")]
    #[doc = ""]
    Repairing,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsAddNodesRequest {
    #[serde(rename = "additionalNodeCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Count of additional nodes to be added to the node group."]
    pub additional_node_count: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsDeleteNodesRequest {
    #[serde(rename = "nodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Names of the nodes to delete."]
    pub nodes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsListNodes {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Node resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeGroupNode>>>,
    #[serde(rename = "kind")]
    #[serde(default = "node_groups_list_nodes_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeGroupsListNodesWarning>,
}
mod node_groups_list_nodes_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeGroupsListNodes")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeGroupsListNodesWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeGroupsListNodesWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeGroupsListNodesWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeGroupsListNodesWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsListNodesWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsScopedList {
    #[serde(rename = "nodeGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of node groups contained in this scope."]
    pub node_groups: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeGroup>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that appears when the nodeGroup list is empty."]
    pub warning: ::std::option::Option<NodeGroupsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that appears when the nodeGroup list is empty."]
pub struct NodeGroupsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeGroupsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeGroupsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeGroupsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeGroupsSetNodeTemplateRequest {
    #[serde(rename = "nodeTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Full or partial URL of the node template resource to be updated for this node group."]
    pub node_template: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represent a sole-tenant Node Template resource.\n\nYou can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances. (== resource_for {$api_version}.nodeTemplates ==)"]
pub struct NodeTemplate {
    #[serde(rename = "accelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub accelerators: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "cpuOvercommitType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CPU overcommit."]
    pub cpu_overcommit_type: ::std::option::Option<NodeTemplateCpuOvercommitTypeEnum>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<LocalDisk>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "node_template_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#nodeTemplate for node templates."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nodeAffinityLabels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to use for node affinity, which will be used in instance scheduling."]
    pub node_affinity_labels:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "nodeType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The node type to use for nodes group that are created from this template."]
    pub node_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nodeTypeFlexibility")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties.\n\nThis field is mutually exclusive with the node_type property; you can only define one or the other, but not both."]
    pub node_type_flexibility:
        ::std::option::Option<::std::boxed::Box<NodeTemplateNodeTypeFlexibility>>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the region where the node template resides, such as us-central1."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serverBinding")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Sets the binding properties for the physical server. Valid values include:  \n- [Default] RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server \n- RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible  \n\nSee Sole-tenant node options for more information."]
    pub server_binding: ::std::option::Option<::std::boxed::Box<ServerBinding>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING."]
    pub status: ::std::option::Option<NodeTemplateStatusEnum>,
    #[serde(rename = "statusMessage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional, human-readable explanation of the status."]
    pub status_message: ::std::option::Option<::std::string::String>,
}
mod node_template_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeTemplate")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "CPU overcommit."]
pub enum NodeTemplateCpuOvercommitTypeEnum {
    #[serde(rename = "CPU_OVERCOMMIT_TYPE_UNSPECIFIED")]
    #[doc = ""]
    CpuOvercommitTypeUnspecified,
    #[serde(rename = "ENABLED")]
    #[doc = ""]
    Enabled,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING."]
pub enum NodeTemplateStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplateAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeTemplatesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<NodeTemplatesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "node_template_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeTemplateAggregatedListWarning>,
}
mod node_template_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeTemplateAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeTemplateAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTemplateAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTemplateAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTemplateAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplateAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of node templates."]
pub struct NodeTemplateList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeTemplate resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeTemplate>>>,
    #[serde(rename = "kind")]
    #[serde(default = "node_template_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeTemplateListWarning>,
}
mod node_template_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeTemplateList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeTemplateListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTemplateListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTemplateListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTemplateListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplateListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplateNodeTypeFlexibility {
    #[serde(rename = "cpus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub cpus: ::std::option::Option<::std::string::String>,
    #[serde(rename = "localSsd")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub local_ssd: ::std::option::Option<::std::string::String>,
    #[serde(rename = "memory")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub memory: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplatesScopedList {
    #[serde(rename = "nodeTemplates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of node templates contained in this scope."]
    pub node_templates: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeTemplate>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that appears when the node templates list is empty."]
    pub warning: ::std::option::Option<NodeTemplatesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that appears when the node templates list is empty."]
pub struct NodeTemplatesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTemplatesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTemplatesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTemplatesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTemplatesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represent a sole-tenant Node Type resource.\n\nEach node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types. (== resource_for {$api_version}.nodeTypes ==)"]
pub struct NodeType {
    #[serde(rename = "cpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The CPU platform used by this node type."]
    pub cpu_platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this node type."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestCpus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The number of virtual CPUs that are available to the node type."]
    pub guest_cpus: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "node_type_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#nodeType for node types."]
    pub kind: ::std::string::String,
    #[serde(rename = "localSsdGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Local SSD available to the node type, defined in GB."]
    pub local_ssd_gb: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "memoryMb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The amount of physical memory available to the node type, defined in MB."]
    pub memory_mb: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The name of the zone where the node type resides, such as us-central1-a."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod node_type_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeType")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTypeAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeTypesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<NodeTypesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "node_type_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeTypeAggregatedListWarning>,
}
mod node_type_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeTypeAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeTypeAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTypeAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTypeAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTypeAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTypeAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of node types."]
pub struct NodeTypeList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NodeType resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeType>>>,
    #[serde(rename = "kind")]
    #[serde(default = "node_type_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#nodeTypeList for lists of node types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NodeTypeListWarning>,
}
mod node_type_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#nodeTypeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NodeTypeListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTypeListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTypeListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTypeListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTypeListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTypesScopedList {
    #[serde(rename = "nodeTypes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of node types contained in this scope."]
    pub node_types: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NodeType>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An informational warning that appears when the node types list is empty."]
    pub warning: ::std::option::Option<NodeTypesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] An informational warning that appears when the node types list is empty."]
pub struct NodeTypesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NodeTypesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NodeTypesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NodeTypesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NodeTypesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a notification endpoint.\n\nA notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service.\n\nFor more information, see  Health checks overview. (== resource_for {$api_version}.notificationEndpoint ==) (== resource_for {$api_version}.regionNotificationEndpoints ==)"]
pub struct NotificationEndpoint {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "grpcSettings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Settings of the gRPC notification endpoint including the endpoint URL and the retry duration."]
    pub grpc_settings: ::std::option::Option<::std::boxed::Box<NotificationEndpointGrpcSettings>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A unique identifier for this resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "notification_endpoint_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
}
mod notification_endpoint_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#notificationEndpoint")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of NotificationEndpointsScopedList."]
pub struct NotificationEndpointAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NotificationEndpointsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<NotificationEndpointsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "notification_endpoint_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NotificationEndpointAggregatedListWarning>,
}
mod notification_endpoint_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#notificationEndpointAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NotificationEndpointAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NotificationEndpointAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NotificationEndpointAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NotificationEndpointAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NotificationEndpointAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint."]
pub struct NotificationEndpointGrpcSettings {
    #[serde(rename = "authority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3"]
    pub authority: ::std::option::Option<::std::string::String>,
    #[serde(rename = "endpoint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name."]
    pub endpoint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "payloadName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. If specified, this field is used to populate the \"name\" field in gRPC requests."]
    pub payload_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "resendInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed."]
    pub resend_interval: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "retryDurationSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number."]
    pub retry_duration_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NotificationEndpointList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NotificationEndpoint resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NotificationEndpoint>>>,
    #[serde(rename = "kind")]
    #[serde(default = "notification_endpoint_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<NotificationEndpointListWarning>,
}
mod notification_endpoint_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#notificationEndpointList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct NotificationEndpointListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NotificationEndpointListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NotificationEndpointListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NotificationEndpointListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NotificationEndpointListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NotificationEndpointsScopedList {
    #[serde(rename = "resources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NotificationEndpoints contained in this scope."]
    pub resources: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NotificationEndpoint>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of notification endpoints when the list is empty."]
    pub warning: ::std::option::Option<NotificationEndpointsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of notification endpoints when the list is empty."]
pub struct NotificationEndpointsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<NotificationEndpointsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<NotificationEndpointsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum NotificationEndpointsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct NotificationEndpointsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an Operation resource.\n\nGoogle Compute Engine has three Operation resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations)\n\nYou can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses.\n\nOperations can be global, regional or zonal.  \n- For global operations, use the `globalOperations` resource. \n- For regional operations, use the `regionOperations` resource. \n- For zonal operations, use the `zonalOperations` resource.  \n\nFor more information, read  Global, Regional, and Zonal Resources. (== resource_for {$api_version}.globalOperations ==) (== resource_for {$api_version}.regionOperations ==) (== resource_for {$api_version}.zoneOperations ==)"]
pub struct Operation {
    #[serde(rename = "clientOperationId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The value of `requestId` if you provided it in the request. Not present otherwise."]
    pub client_operation_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] This field is deprecated."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A textual description of the operation, which is set when the operation is created."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "endTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The time that this operation was completed. This value is in RFC3339 text format."]
    pub end_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "error")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If errors are generated during processing of the operation, this field will be populated."]
    pub error: ::std::option::Option<OperationError>,
    #[serde(rename = "httpErrorMessage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`."]
    pub http_error_message: ::std::option::Option<::std::string::String>,
    #[serde(rename = "httpErrorStatusCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found."]
    pub http_error_status_code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the operation. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "insertTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The time that this operation was requested. This value is in RFC3339 text format."]
    pub insert_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "operation_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always `compute#operation` for Operation resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Service-specific metadata attached to this operation."]
    pub metadata: ::std::option::Option<::std::boxed::Box<Any>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the operation."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "operationGroupId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request."]
    pub operation_group_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "operationType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on."]
    pub operation_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "progress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses."]
    pub progress: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The time that this operation was started by the server. This value is in RFC3339 text format."]
    pub start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`."]
    pub status: ::std::option::Option<OperationStatusEnum>,
    #[serde(rename = "statusMessage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional textual description of the current status of the operation."]
    pub status_message: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique target ID, which identifies a specific incarnation of the target resource."]
    pub target_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from."]
    pub target_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "user")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] User who requested the operation, for example: `user@example.com`."]
    pub user: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warnings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If warning messages are generated during processing of the operation, this field will be populated."]
    pub warnings: ::std::option::Option<::std::vec::Vec<OperationWarnings>>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod operation_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#operation")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] If errors are generated during processing of the operation, this field will be populated."]
pub struct OperationError {
    #[serde(rename = "errors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The array of errors encountered while processing this operation."]
    pub errors: ::std::option::Option<::std::vec::Vec<OperationErrorErrors>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationErrorErrors {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The error type identifier for this error."]
    pub code: ::std::option::Option<::std::string::String>,
    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Indicates the field in the request that caused the error. This property is optional."]
    pub location: ::std::option::Option<::std::string::String>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An optional, human-readable error message."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`."]
pub enum OperationStatusEnum {
    #[serde(rename = "DONE")]
    #[doc = ""]
    Done,
    #[serde(rename = "PENDING")]
    #[doc = ""]
    Pending,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationWarnings {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<OperationWarningsCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<OperationWarningsData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum OperationWarningsCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationWarningsData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A map of scoped operation lists."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<OperationsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "operation_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<OperationAggregatedListWarning>,
}
mod operation_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#operationAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct OperationAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<OperationAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<OperationAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum OperationAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Operation resources."]
pub struct OperationList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of Operation resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Operation>>>,
    #[serde(rename = "kind")]
    #[serde(default = "operation_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always `compute#operations` for Operations resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<OperationListWarning>,
}
mod operation_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#operationList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct OperationListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<OperationListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<OperationListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum OperationListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationsScopedList {
    #[serde(rename = "operations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of operations contained in this scope."]
    pub operations: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Operation>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of operations when the list is empty."]
    pub warning: ::std::option::Option<OperationsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of operations when the list is empty."]
pub struct OperationsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<OperationsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<OperationsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum OperationsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OperationsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct OrganizationSecurityPoliciesListAssociationsResponse {
    #[serde(rename = "associations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of associations."]
    pub associations:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicyAssociation>>>,
    #[serde(rename = "kind")]
    #[serde(
        default = "organization_security_policies_list_associations_response_defaults :: kind"
    )]
    #[doc = "[Output Only] Type of securityPolicy associations. Always compute#organizationSecurityPoliciesListAssociations for lists of securityPolicy associations."]
    pub kind: ::std::string::String,
}
mod organization_security_policies_list_associations_response_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#organizationSecurityPoliciesListAssociationsResponse")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Configuration for the origin authentication method. Configuration for the origin authentication method."]
pub struct OriginAuthenticationMethod {
    #[serde(rename = "jwt")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub jwt: ::std::option::Option<::std::boxed::Box<Jwt>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service."]
pub struct OutlierDetection {
    #[serde(rename = "baseEjectionTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s."]
    pub base_ejection_time: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "consecutiveErrors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5."]
    pub consecutive_errors: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "consecutiveGatewayFailure")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3."]
    pub consecutive_gateway_failure: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "enforcingConsecutiveErrors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0."]
    pub enforcing_consecutive_errors: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "enforcingConsecutiveGatewayFailure")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100."]
    pub enforcing_consecutive_gateway_failure: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "enforcingSuccessRate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100."]
    pub enforcing_success_rate: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "interval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second."]
    pub interval: ::std::option::Option<::std::boxed::Box<Duration>>,
    #[serde(rename = "maxEjectionPercent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%."]
    pub max_ejection_percent: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "successRateMinimumHosts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5."]
    pub success_rate_minimum_hosts: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "successRateRequestVolume")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100."]
    pub success_rate_request_volume: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "successRateStdevFactor")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900."]
    pub success_rate_stdev_factor: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Next free: 7"]
pub struct PacketIntervals {
    #[serde(rename = "avgMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Average observed inter-packet interval in milliseconds."]
    pub avg_ms: ::std::option::Option<::std::string::String>,
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "From how long ago in the past these intervals were observed."]
    pub duration: ::std::option::Option<PacketIntervalsDurationEnum>,
    #[serde(rename = "maxMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum observed inter-packet interval in milliseconds."]
    pub max_ms: ::std::option::Option<::std::string::String>,
    #[serde(rename = "minMs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum observed inter-packet interval in milliseconds."]
    pub min_ms: ::std::option::Option<::std::string::String>,
    #[serde(rename = "numIntervals")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of inter-packet intervals from which these statistics were derived."]
    pub num_intervals: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of packets for which inter-packet intervals were computed."]
    pub _type: ::std::option::Option<PacketIntervalsTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "From how long ago in the past these intervals were observed."]
pub enum PacketIntervalsDurationEnum {
    #[serde(rename = "DURATION_UNSPECIFIED")]
    #[doc = ""]
    DurationUnspecified,
    #[serde(rename = "HOUR")]
    #[doc = ""]
    Hour,
    #[serde(rename = "MAX")]
    #[doc = ""]
    Max,
    #[serde(rename = "MINUTE")]
    #[doc = ""]
    Minute,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of packets for which inter-packet intervals were computed."]
pub enum PacketIntervalsTypeEnum {
    #[serde(rename = "LOOPBACK")]
    #[doc = ""]
    Loopback,
    #[serde(rename = "RECEIVE")]
    #[doc = ""]
    Receive,
    #[serde(rename = "TRANSMIT")]
    #[doc = ""]
    Transmit,
    #[serde(rename = "TYPE_UNSPECIFIED")]
    #[doc = ""]
    TypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Packet Mirroring resource.\n\nPacket Mirroring clones the traffic of specified instances in your Virtual Private Cloud (VPC) network and forwards it to a collector destination, such as an instance group of an internal TCP/UDP load balancer, for analysis or examination. For more information about setting up Packet Mirroring, see Using Packet Mirroring. (== resource_for {$api_version}.packetMirrorings ==)"]
pub struct PacketMirroring {
    #[serde(rename = "collectorIlb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true."]
    pub collector_ilb: ::std::option::Option<::std::boxed::Box<PacketMirroringForwardingRuleInfo>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.\n\nThe default is TRUE."]
    pub enable: ::std::option::Option<PacketMirroringEnableEnum>,
    #[serde(rename = "filter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Filter for mirrored traffic. If unspecified, all traffic is mirrored."]
    pub filter: ::std::option::Option<::std::boxed::Box<PacketMirroringFilter>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "packet_mirroring_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings."]
    pub kind: ::std::string::String,
    #[serde(rename = "mirroredResources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and/or tags for which traffic from/to all VM instances will be mirrored."]
    pub mirrored_resources:
        ::std::option::Option<::std::boxed::Box<PacketMirroringMirroredResourceInfo>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network."]
    pub network: ::std::option::Option<::std::boxed::Box<PacketMirroringNetworkInfo>>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins.\n\nDefault value is 1000. Valid range is 0 through 65535."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URI of the region where the packetMirroring resides."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
}
mod packet_mirroring_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#packetMirroring")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.\n\nThe default is TRUE."]
pub enum PacketMirroringEnableEnum {
    #[serde(rename = "FALSE")]
    #[doc = ""]
    False,
    #[serde(rename = "TRUE")]
    #[doc = ""]
    True,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of packetMirrorings."]
pub struct PacketMirroringAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of PacketMirroring resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<PacketMirroringsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "packet_mirroring_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<PacketMirroringAggregatedListWarning>,
}
mod packet_mirroring_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#packetMirroringAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct PacketMirroringAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PacketMirroringAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PacketMirroringAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PacketMirroringAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringFilter {
    #[serde(rename = "IPProtocols")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored."]
    pub ip_protocols: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "cidrRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored."]
    pub cidr_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "direction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH."]
    pub direction: ::std::option::Option<PacketMirroringFilterDirectionEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH."]
pub enum PacketMirroringFilterDirectionEnum {
    #[serde(rename = "BOTH")]
    #[doc = ""]
    Both,
    #[serde(rename = "EGRESS")]
    #[doc = ""]
    Egress,
    #[serde(rename = "INGRESS")]
    #[doc = ""]
    Ingress,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringForwardingRuleInfo {
    #[serde(rename = "canonicalUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the forwarding rule; defined by the server."]
    pub canonical_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic."]
    pub url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of PacketMirroring resources."]
pub struct PacketMirroringList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of PacketMirroring resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PacketMirroring>>>,
    #[serde(rename = "kind")]
    #[serde(default = "packet_mirroring_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<PacketMirroringListWarning>,
}
mod packet_mirroring_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#packetMirroringList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct PacketMirroringListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PacketMirroringListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PacketMirroringListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PacketMirroringListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringMirroredResourceInfo {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring.\n\nNote that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring.\n\nYou may specify a maximum of 50 Instances."]
    pub instances: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<PacketMirroringMirroredResourceInfoInstanceInfo>>,
    >,
    #[serde(rename = "subnetworks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring.\n\nYou may specify a maximum of 5 subnetworks."]
    pub subnetworks: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<PacketMirroringMirroredResourceInfoSubnetInfo>>,
    >,
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored."]
    pub tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringMirroredResourceInfoInstanceInfo {
    #[serde(rename = "canonicalUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the instance; defined by the server."]
    pub canonical_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource URL to the virtual machine instance which is being mirrored."]
    pub url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringMirroredResourceInfoSubnetInfo {
    #[serde(rename = "canonicalUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the subnetwork; defined by the server."]
    pub canonical_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored."]
    pub url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringNetworkInfo {
    #[serde(rename = "canonicalUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the network; defined by the server."]
    pub canonical_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the network resource."]
    pub url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringsScopedList {
    #[serde(rename = "packetMirrorings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of packetMirrorings contained in this scope."]
    pub packet_mirrorings:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PacketMirroring>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of packetMirrorings when the list is empty."]
    pub warning: ::std::option::Option<PacketMirroringsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of packetMirrorings when the list is empty."]
pub struct PacketMirroringsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PacketMirroringsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PacketMirroringsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PacketMirroringsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PacketMirroringsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used."]
pub struct PathMatcher {
    #[serde(rename = "defaultRouteAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "defaultRouteAction takes effect when none of the  pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any  weightedBackendServices.\nOnly one of defaultRouteAction or defaultUrlRedirect must be set.\nUrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction."]
    pub default_route_action: ::std::option::Option<::std::boxed::Box<HttpRouteAction>>,
    #[serde(rename = "defaultService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource:  \n- https://www.googleapis.com/compute/v1/projects/project/global/backendServices/backendService \n- compute/v1/projects/project/global/backendServices/backendService \n- global/backendServices/backendService  If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified.\nOnly one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set.\nAuthorization requires one or more of the following Google IAM permissions on the specified resource default_service:  \n- compute.backendBuckets.use \n- compute.backendServices.use"]
    pub default_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultUrlRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect.\nIf defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub default_url_redirect: ::std::option::Option<::std::boxed::Box<HttpRedirectAction>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies changes to request and response headers that need to take effect for the selected backendService.\nHeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap \nNote that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub header_action: ::std::option::Option<::std::boxed::Box<HttpHeaderAction>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name to which this PathMatcher is referred by the HostRule."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "pathRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis.\nFor example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list.\nWithin a given pathMatcher, only one of pathRules or routeRules must be set."]
    pub path_rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PathRule>>>,
    #[serde(rename = "routeRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number.\nWithin a given pathMatcher, you can set only one of pathRules or routeRules."]
    pub route_rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HttpRouteRule>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL."]
pub struct PathRule {
    #[serde(rename = "paths")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here."]
    pub paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "routeAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any  weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices.\nOnly one of routeAction or urlRedirect must be set.\nUrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction."]
    pub route_action: ::std::option::Option<::std::boxed::Box<HttpRouteAction>>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified.\nOnly one of urlRedirect, service or routeAction.weightedBackendService must be set."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "When a path pattern is matched, the request is redirected to a URL specified by urlRedirect.\nIf urlRedirect is specified, service or routeAction must not be set.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub url_redirect: ::std::option::Option<::std::boxed::Box<HttpRedirectAction>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Configuration for the peer authentication method. Configuration for the peer authentication method."]
pub struct PeerAuthenticationMethod {
    #[serde(rename = "mtls")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Set if mTLS is used for peer authentication."]
    pub mtls: ::std::option::Option<::std::boxed::Box<MutualTls>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PerInstanceConfig {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance config or the field needs to be unset."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of a per-instance config and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance config with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance config for a VM instance that either doesn't exist or is not part of the group will result in an error."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "preservedState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The intended preserved state for the given instance. Does not contain preserved state generated from a stateful policy."]
    pub preserved_state: ::std::option::Option<::std::boxed::Box<PreservedState>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of applying this per-instance config on the corresponding managed instance."]
    pub status: ::std::option::Option<PerInstanceConfigStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The status of applying this per-instance config on the corresponding managed instance."]
pub enum PerInstanceConfigStatusEnum {
    #[serde(rename = "APPLYING")]
    #[doc = ""]
    Applying,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "EFFECTIVE")]
    #[doc = ""]
    Effective,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "UNAPPLIED")]
    #[doc = ""]
    Unapplied,
    #[serde(rename = "UNAPPLIED_DELETION")]
    #[doc = ""]
    UnappliedDeletion,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] All fields defined in a permission are ANDed."]
pub struct Permission {
    #[serde(rename = "constraints")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Extra custom constraints. The constraints are ANDed together."]
    pub constraints:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PermissionConstraint>>>,
    #[serde(rename = "hosts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported."]
    pub hosts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "methods")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "HTTP method."]
    pub methods: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notHosts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of hosts. Specifies exclusions."]
    pub not_hosts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notMethods")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of methods. Specifies exclusions."]
    pub not_methods: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notPaths")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of paths. Specifies exclusions."]
    pub not_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of ports. Specifies exclusions."]
    pub not_ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "paths")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported."]
    pub paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port names or numbers."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Custom constraint that specifies a key and a list of allowed values for Istio attributes."]
pub struct PermissionConstraint {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Key of the constraint."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "values")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of allowed values."]
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.\n\n\n\nA `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.\n\nFor some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).\n\n**JSON example:**\n\n{ \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 }\n\n**YAML example:**\n\nbindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3\n\nFor a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."]
pub struct Policy {
    #[serde(rename = "auditConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies cloud audit logging configuration for this policy."]
    pub audit_configs: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AuditConfig>>>,
    #[serde(rename = "bindings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."]
    pub bindings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Binding>>>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.\n\n**Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "iamOwned")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = ""]
    pub iam_owned: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Rule>>>,
    #[serde(rename = "version")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the format of the policy.\n\nValid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected.\n\nAny operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations:\n\n* Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions\n\n**Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.\n\nIf a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.\n\nTo learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."]
    pub version: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PreconfiguredWafSet {
    #[serde(rename = "expressionSets")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of entities that are currently supported for WAF rules."]
    pub expression_sets:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<WafExpressionSet>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Preserved state for a given instance."]
pub struct PreservedState {
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preserved disks defined for this instance. This map is keyed with the device names of the disks."]
    pub disks: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<PreservedStatePreservedDisk>>,
    >,
    #[serde(rename = "externalIPs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preserved external IPs defined for this instance. This map is keyed with the name of the network interface."]
    pub external_i_ps: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<PreservedStatePreservedNetworkIp>>,
    >,
    #[serde(rename = "internalIPs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preserved internal IPs defined for this instance. This map is keyed with the name of the network interface."]
    pub internal_i_ps: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<PreservedStatePreservedNetworkIp>>,
    >,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preserved metadata defined for this instance."]
    pub metadata:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PreservedStatePreservedDisk {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted."]
    pub auto_delete: ::std::option::Option<PreservedStatePreservedDiskAutoDeleteEnum>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode."]
    pub mode: ::std::option::Option<PreservedStatePreservedDiskModeEnum>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the disk resource that is stateful and should be attached to the VM instance."]
    pub source: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted."]
pub enum PreservedStatePreservedDiskAutoDeleteEnum {
    #[serde(rename = "NEVER")]
    #[doc = ""]
    Never,
    #[serde(rename = "ON_PERMANENT_INSTANCE_DELETION")]
    #[doc = ""]
    OnPermanentInstanceDeletion,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode."]
pub enum PreservedStatePreservedDiskModeEnum {
    #[serde(rename = "READ_ONLY")]
    #[doc = ""]
    ReadOnly,
    #[serde(rename = "READ_WRITE")]
    #[doc = ""]
    ReadWrite,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PreservedStatePreservedNetworkIp {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted."]
    pub auto_delete: ::std::option::Option<PreservedStatePreservedNetworkIpAutoDeleteEnum>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Ip address representation"]
    pub ip_address:
        ::std::option::Option<::std::boxed::Box<PreservedStatePreservedNetworkIpIpAddress>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted."]
pub enum PreservedStatePreservedNetworkIpAutoDeleteEnum {
    #[serde(rename = "NEVER")]
    #[doc = ""]
    Never,
    #[serde(rename = "ON_PERMANENT_INSTANCE_DELETION")]
    #[doc = ""]
    OnPermanentInstanceDeletion,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PreservedStatePreservedNetworkIpIpAddress {
    #[serde(rename = "address")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the reservation for this IP address."]
    pub address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "literal")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An IPv4 internal network address to assign to the instance for this network interface."]
    pub literal: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] All fields defined in a principal are ANDed."]
pub struct Principal {
    #[serde(rename = "condition")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An expression to specify custom condition."]
    pub condition: ::std::option::Option<::std::string::String>,
    #[serde(rename = "groups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The groups the principal belongs to. Exact match, prefix match, and suffix match are supported."]
    pub groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "ips")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IPv4 or IPv6 address or range (In CIDR format)"]
    pub ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "namespaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The namespaces. Exact match, prefix match, and suffix match are supported."]
    pub namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of groups. Specifies exclusions."]
    pub not_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of IPs. Specifies exclusions."]
    pub not_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notNamespaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of namespaces. Specifies exclusions."]
    pub not_namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "notUsers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Negate of users. Specifies exclusions."]
    pub not_users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "properties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A map of Istio attribute to expected values. Exact match, prefix match, and suffix match are supported for values. For example, `request.headers[version]: \"v1\"`. The properties are ANDed together."]
    pub properties:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "users")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The user names/IDs or service accounts. Exact match, prefix match, and suffix match are supported."]
    pub users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Project resource.\n\nA project is used to organize resources in a Google Cloud Platform environment. For more information, read about the  Resource Hierarchy. (== resource_for {$api_version}.projects ==)"]
pub struct Project {
    #[serde(rename = "commonInstanceMetadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Metadata key/value pairs available to all instances contained in this project. See Custom metadata for more information."]
    pub common_instance_metadata: ::std::option::Option<::std::boxed::Box<Metadata>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultNetworkTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM."]
    pub default_network_tier: ::std::option::Option<ProjectDefaultNetworkTierEnum>,
    #[serde(rename = "defaultServiceAccount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Default service account used by VMs running in this project."]
    pub default_service_account: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enabledFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Restricted features enabled for use on this project."]
    pub enabled_features: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server. This is not the project ID, and is just a unique ID used by Compute Engine to identify resources."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "project_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#project for projects."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "quotas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Quotas assigned to this project."]
    pub quotas: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Quota>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "usageExportLocation")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The naming prefix for daily usage reports and the Google Cloud Storage bucket where they are stored."]
    pub usage_export_location: ::std::option::Option<::std::boxed::Box<UsageExportLocation>>,
    #[serde(rename = "xpnProjectStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated."]
    pub xpn_project_status: ::std::option::Option<ProjectXpnProjectStatusEnum>,
}
mod project_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#project")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM."]
pub enum ProjectDefaultNetworkTierEnum {
    #[serde(rename = "FIXED_STANDARD")]
    #[doc = ""]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "SELECT")]
    #[doc = ""]
    Select,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    #[doc = ""]
    StandardOverridesFixedStandard,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated."]
pub enum ProjectXpnProjectStatusEnum {
    #[serde(rename = "HOST")]
    #[doc = ""]
    Host,
    #[serde(rename = "UNSPECIFIED_XPN_PROJECT_STATUS")]
    #[doc = ""]
    UnspecifiedXpnProjectStatus,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsDisableXpnResourceRequest {
    #[serde(rename = "xpnResource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service resource (a.k.a service project) ID."]
    pub xpn_resource: ::std::option::Option<::std::boxed::Box<XpnResourceId>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsEnableXpnResourceRequest {
    #[serde(rename = "xpnResource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service resource (a.k.a service project) ID."]
    pub xpn_resource: ::std::option::Option<::std::boxed::Box<XpnResourceId>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsGetXpnResources {
    #[serde(rename = "kind")]
    #[serde(default = "projects_get_xpn_resources_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects)"]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "resources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Service resources (a.k.a service projects) attached to this project as their shared VPC host."]
    pub resources: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<XpnResourceId>>>,
}
mod projects_get_xpn_resources_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#projectsGetXpnResources")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsListXpnHostsRequest {
    #[serde(rename = "organization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project."]
    pub organization: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsSetDefaultNetworkTierRequest {
    #[serde(rename = "networkTier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Default network tier to be set."]
    pub network_tier: ::std::option::Option<ProjectsSetDefaultNetworkTierRequestNetworkTierEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Default network tier to be set."]
pub enum ProjectsSetDefaultNetworkTierRequestNetworkTierEnum {
    #[serde(rename = "FIXED_STANDARD")]
    #[doc = ""]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "SELECT")]
    #[doc = ""]
    Select,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    #[doc = ""]
    StandardOverridesFixedStandard,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ProjectsSetDefaultServiceAccountRequest {
    #[serde(rename = "email")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Email address of the service account."]
    pub email: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet."]
pub struct PublicAdvertisedPrefix {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "dnsVerificationIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IPv4 address to be used for reverse DNS verification."]
    pub dns_verification_ip: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IPv4 address range, in CIDR format, represented by this public advertised prefix."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "public_advertised_prefix_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "publicDelegatedPrefixs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of public delegated prefixes that exist for this public advertised prefix."]
    pub public_delegated_prefixs: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<PublicAdvertisedPrefixPublicDelegatedPrefix>>,
    >,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL with id for the resource."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sharedSecret")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The shared secret to be used for reverse DNS verification."]
    pub shared_secret: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of the public advertised prefix."]
    pub status: ::std::option::Option<PublicAdvertisedPrefixStatusEnum>,
}
mod public_advertised_prefix_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#publicAdvertisedPrefix")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The status of the public advertised prefix."]
pub enum PublicAdvertisedPrefixStatusEnum {
    #[serde(rename = "INITIAL")]
    #[doc = ""]
    Initial,
    #[serde(rename = "PREFIX_CONFIGURATION_COMPLETE")]
    #[doc = ""]
    PrefixConfigurationComplete,
    #[serde(rename = "PREFIX_CONFIGURATION_IN_PROGRESS")]
    #[doc = ""]
    PrefixConfigurationInProgress,
    #[serde(rename = "PREFIX_REMOVAL_IN_PROGRESS")]
    #[doc = ""]
    PrefixRemovalInProgress,
    #[serde(rename = "PTR_CONFIGURED")]
    #[doc = ""]
    PtrConfigured,
    #[serde(rename = "REVERSE_DNS_LOOKUP_FAILED")]
    #[doc = ""]
    ReverseDnsLookupFailed,
    #[serde(rename = "VALIDATED")]
    #[doc = ""]
    Validated,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicAdvertisedPrefixList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of PublicAdvertisedPrefix resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PublicAdvertisedPrefix>>>,
    #[serde(rename = "kind")]
    #[serde(default = "public_advertised_prefix_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<PublicAdvertisedPrefixListWarning>,
}
mod public_advertised_prefix_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#publicAdvertisedPrefixList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct PublicAdvertisedPrefixListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PublicAdvertisedPrefixListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PublicAdvertisedPrefixListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PublicAdvertisedPrefixListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicAdvertisedPrefixListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a CIDR range which can be used to assign addresses."]
pub struct PublicAdvertisedPrefixPublicDelegatedPrefix {
    #[serde(rename = "ipRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP address range of the public delegated prefix"]
    pub ip_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the public delegated prefix"]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "project")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The project number of the public delegated prefix"]
    pub project: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The region of the public delegated prefix if it is regional. If absent, the prefix is global."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active."]
    pub status: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block."]
pub struct PublicDelegatedPrefix {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IPv4 address range, in CIDR format, represented by this public delegated prefix."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "isLiveMigration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, the prefix will be live migrated."]
    pub is_live_migration: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "kind")]
    #[serde(default = "public_delegated_prefix_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "parentPrefix")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix."]
    pub parent_prefix: ::std::option::Option<::std::string::String>,
    #[serde(rename = "publicDelegatedSubPrefixs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of sub public delegated prefixes that exist for this public delegated prefix."]
    pub public_delegated_sub_prefixs: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<PublicDelegatedPrefixPublicDelegatedSubPrefix>>,
    >,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL with id for the resource."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the public delegated prefix."]
    pub status: ::std::option::Option<PublicDelegatedPrefixStatusEnum>,
}
mod public_delegated_prefix_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#publicDelegatedPrefix")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the public delegated prefix."]
pub enum PublicDelegatedPrefixStatusEnum {
    #[serde(rename = "ANNOUNCED")]
    #[doc = ""]
    Announced,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INITIALIZING")]
    #[doc = ""]
    Initializing,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of PublicDelegatedPrefixesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<PublicDelegatedPrefixesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "public_delegated_prefix_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<PublicDelegatedPrefixAggregatedListWarning>,
}
mod public_delegated_prefix_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#publicDelegatedPrefixAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct PublicDelegatedPrefixAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PublicDelegatedPrefixAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data:
        ::std::option::Option<::std::vec::Vec<PublicDelegatedPrefixAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PublicDelegatedPrefixAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of PublicDelegatedPrefix resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PublicDelegatedPrefix>>>,
    #[serde(rename = "kind")]
    #[serde(default = "public_delegated_prefix_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<PublicDelegatedPrefixListWarning>,
}
mod public_delegated_prefix_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#publicDelegatedPrefixList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct PublicDelegatedPrefixListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PublicDelegatedPrefixListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PublicDelegatedPrefixListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PublicDelegatedPrefixListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a sub PublicDelegatedPrefix."]
pub struct PublicDelegatedPrefixPublicDelegatedSubPrefix {
    #[serde(rename = "delegateeProject")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the project scoping this PublicDelegatedSubPrefix."]
    pub delegatee_project: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IPv4 address range, in CIDR format, represented by this sub public delegated prefix."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "isAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the sub prefix is delegated to create Address resources in the delegatee project."]
    pub is_address: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the sub public delegated prefix."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the sub public delegated prefix."]
    pub status: ::std::option::Option<PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the sub public delegated prefix."]
pub enum PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "INACTIVE")]
    #[doc = ""]
    Inactive,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixesScopedList {
    #[serde(rename = "publicDelegatedPrefixes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of PublicDelegatedPrefixes contained in this scope."]
    pub public_delegated_prefixes:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PublicDelegatedPrefix>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty."]
    pub warning: ::std::option::Option<PublicDelegatedPrefixesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty."]
pub struct PublicDelegatedPrefixesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<PublicDelegatedPrefixesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<PublicDelegatedPrefixesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum PublicDelegatedPrefixesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct PublicDelegatedPrefixesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A quotas entry."]
pub struct Quota {
    #[serde(rename = "limit")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Quota limit for this metric."]
    pub limit: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "metric")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the quota metric."]
    pub metric: ::std::option::Option<QuotaMetricEnum>,
    #[serde(rename = "owner")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Owning resource. This is the resource on which this quota is applied."]
    pub owner: ::std::option::Option<::std::string::String>,
    #[serde(rename = "usage")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Current usage of this metric."]
    pub usage: ::std::option::Option<::std::primitive::f64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Name of the quota metric."]
pub enum QuotaMetricEnum {
    #[serde(rename = "A2_CPUS")]
    #[doc = ""]
    A2Cpus,
    #[serde(rename = "AFFINITY_GROUPS")]
    #[doc = ""]
    AffinityGroups,
    #[serde(rename = "ALIASES_PER_NETWORK_GLOBAL")]
    #[doc = ""]
    AliasesPerNetworkGlobal,
    #[serde(rename = "AMD_S9300_GPUS")]
    #[doc = ""]
    AmdS9300Gpus,
    #[serde(rename = "AUTOSCALERS")]
    #[doc = ""]
    Autoscalers,
    #[serde(rename = "BACKEND_BUCKETS")]
    #[doc = ""]
    BackendBuckets,
    #[serde(rename = "BACKEND_SERVICES")]
    #[doc = ""]
    BackendServices,
    #[serde(rename = "C2_CPUS")]
    #[doc = ""]
    C2Cpus,
    #[serde(rename = "COMMITMENTS")]
    #[doc = ""]
    Commitments,
    #[serde(rename = "COMMITTED_A2_CPUS")]
    #[doc = ""]
    CommittedA2Cpus,
    #[serde(rename = "COMMITTED_C2_CPUS")]
    #[doc = ""]
    CommittedC2Cpus,
    #[serde(rename = "COMMITTED_CPUS")]
    #[doc = ""]
    CommittedCpus,
    #[serde(rename = "COMMITTED_E2_CPUS")]
    #[doc = ""]
    CommittedE2Cpus,
    #[serde(rename = "COMMITTED_LICENSES")]
    #[doc = ""]
    CommittedLicenses,
    #[serde(rename = "COMMITTED_LOCAL_SSD_TOTAL_GB")]
    #[doc = ""]
    CommittedLocalSsdTotalGb,
    #[serde(rename = "COMMITTED_MEMORY_OPTIMIZED_CPUS")]
    #[doc = ""]
    CommittedMemoryOptimizedCpus,
    #[serde(rename = "COMMITTED_N2D_CPUS")]
    #[doc = ""]
    CommittedN2DCpus,
    #[serde(rename = "COMMITTED_N2_CPUS")]
    #[doc = ""]
    CommittedN2Cpus,
    #[serde(rename = "COMMITTED_NVIDIA_A100_GPUS")]
    #[doc = ""]
    CommittedNvidiaA100Gpus,
    #[serde(rename = "COMMITTED_NVIDIA_K80_GPUS")]
    #[doc = ""]
    CommittedNvidiaK80Gpus,
    #[serde(rename = "COMMITTED_NVIDIA_P100_GPUS")]
    #[doc = ""]
    CommittedNvidiaP100Gpus,
    #[serde(rename = "COMMITTED_NVIDIA_P4_GPUS")]
    #[doc = ""]
    CommittedNvidiaP4Gpus,
    #[serde(rename = "COMMITTED_NVIDIA_T4_GPUS")]
    #[doc = ""]
    CommittedNvidiaT4Gpus,
    #[serde(rename = "COMMITTED_NVIDIA_V100_GPUS")]
    #[doc = ""]
    CommittedNvidiaV100Gpus,
    #[serde(rename = "CPUS")]
    #[doc = ""]
    Cpus,
    #[serde(rename = "CPUS_ALL_REGIONS")]
    #[doc = ""]
    CpusAllRegions,
    #[serde(rename = "DISKS_TOTAL_GB")]
    #[doc = ""]
    DisksTotalGb,
    #[serde(rename = "E2_CPUS")]
    #[doc = ""]
    E2Cpus,
    #[serde(rename = "EXTERNAL_NETWORK_LB_FORWARDING_RULES")]
    #[doc = ""]
    ExternalNetworkLbForwardingRules,
    #[serde(rename = "EXTERNAL_PROTOCOL_FORWARDING_RULES")]
    #[doc = ""]
    ExternalProtocolForwardingRules,
    #[serde(rename = "EXTERNAL_VPN_GATEWAYS")]
    #[doc = ""]
    ExternalVpnGateways,
    #[serde(rename = "FIREWALLS")]
    #[doc = ""]
    Firewalls,
    #[serde(rename = "FORWARDING_RULES")]
    #[doc = ""]
    ForwardingRules,
    #[serde(rename = "GLOBAL_INTERNAL_ADDRESSES")]
    #[doc = ""]
    GlobalInternalAddresses,
    #[serde(rename = "GPUS_ALL_REGIONS")]
    #[doc = ""]
    GpusAllRegions,
    #[serde(rename = "HEALTH_CHECKS")]
    #[doc = ""]
    HealthChecks,
    #[serde(rename = "IMAGES")]
    #[doc = ""]
    Images,
    #[serde(rename = "INSTANCES")]
    #[doc = ""]
    Instances,
    #[serde(rename = "INSTANCES_PER_NETWORK_GLOBAL")]
    #[doc = ""]
    InstancesPerNetworkGlobal,
    #[serde(rename = "INSTANCE_GROUPS")]
    #[doc = ""]
    InstanceGroups,
    #[serde(rename = "INSTANCE_GROUP_MANAGERS")]
    #[doc = ""]
    InstanceGroupManagers,
    #[serde(rename = "INSTANCE_TEMPLATES")]
    #[doc = ""]
    InstanceTemplates,
    #[serde(rename = "INTERCONNECTS")]
    #[doc = ""]
    Interconnects,
    #[serde(rename = "INTERCONNECT_ATTACHMENTS_PER_REGION")]
    #[doc = ""]
    InterconnectAttachmentsPerRegion,
    #[serde(rename = "INTERCONNECT_ATTACHMENTS_TOTAL_MBPS")]
    #[doc = ""]
    InterconnectAttachmentsTotalMbps,
    #[serde(rename = "INTERCONNECT_TOTAL_GBPS")]
    #[doc = ""]
    InterconnectTotalGbps,
    #[serde(rename = "INTERNAL_ADDRESSES")]
    #[doc = ""]
    InternalAddresses,
    #[serde(rename = "INTERNAL_FORWARDING_RULES_PER_NETWORK")]
    #[doc = ""]
    InternalForwardingRulesPerNetwork,
    #[serde(rename = "INTERNAL_FORWARDING_RULES_WITH_GLOBAL_ACCESS_PER_NETWORK")]
    #[doc = ""]
    InternalForwardingRulesWithGlobalAccessPerNetwork,
    #[serde(rename = "INTERNAL_FORWARDING_RULES_WITH_TARGET_INSTANCE_PER_NETWORK")]
    #[doc = ""]
    InternalForwardingRulesWithTargetInstancePerNetwork,
    #[serde(rename = "INTERNAL_TARGET_INSTANCE_WITH_GLOBAL_ACCESS_PER_NETWORK")]
    #[doc = ""]
    InternalTargetInstanceWithGlobalAccessPerNetwork,
    #[serde(rename = "INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES")]
    #[doc = ""]
    InternalTrafficDirectorForwardingRules,
    #[serde(rename = "IN_PLACE_SNAPSHOTS")]
    #[doc = ""]
    InPlaceSnapshots,
    #[serde(rename = "IN_USE_ADDRESSES")]
    #[doc = ""]
    InUseAddresses,
    #[serde(rename = "IN_USE_BACKUP_SCHEDULES")]
    #[doc = ""]
    InUseBackupSchedules,
    #[serde(rename = "IN_USE_MAINTENANCE_WINDOWS")]
    #[doc = ""]
    InUseMaintenanceWindows,
    #[serde(rename = "IN_USE_SNAPSHOT_SCHEDULES")]
    #[doc = ""]
    InUseSnapshotSchedules,
    #[serde(rename = "LOCAL_SSD_TOTAL_GB")]
    #[doc = ""]
    LocalSsdTotalGb,
    #[serde(rename = "M1_CPUS")]
    #[doc = ""]
    M1Cpus,
    #[serde(rename = "M2_CPUS")]
    #[doc = ""]
    M2Cpus,
    #[serde(rename = "MACHINE_IMAGES")]
    #[doc = ""]
    MachineImages,
    #[serde(rename = "N2D_CPUS")]
    #[doc = ""]
    N2DCpus,
    #[serde(rename = "N2_CPUS")]
    #[doc = ""]
    N2Cpus,
    #[serde(rename = "NETWORKS")]
    #[doc = ""]
    Networks,
    #[serde(rename = "NETWORK_ENDPOINT_GROUPS")]
    #[doc = ""]
    NetworkEndpointGroups,
    #[serde(rename = "NETWORK_FIREWALL_POLICIES")]
    #[doc = ""]
    NetworkFirewallPolicies,
    #[serde(rename = "NODE_GROUPS")]
    #[doc = ""]
    NodeGroups,
    #[serde(rename = "NODE_TEMPLATES")]
    #[doc = ""]
    NodeTemplates,
    #[serde(rename = "NVIDIA_A100_GPUS")]
    #[doc = ""]
    NvidiaA100Gpus,
    #[serde(rename = "NVIDIA_K80_GPUS")]
    #[doc = ""]
    NvidiaK80Gpus,
    #[serde(rename = "NVIDIA_P100_GPUS")]
    #[doc = ""]
    NvidiaP100Gpus,
    #[serde(rename = "NVIDIA_P100_VWS_GPUS")]
    #[doc = ""]
    NvidiaP100VwsGpus,
    #[serde(rename = "NVIDIA_P4_GPUS")]
    #[doc = ""]
    NvidiaP4Gpus,
    #[serde(rename = "NVIDIA_P4_VWS_GPUS")]
    #[doc = ""]
    NvidiaP4VwsGpus,
    #[serde(rename = "NVIDIA_T4_GPUS")]
    #[doc = ""]
    NvidiaT4Gpus,
    #[serde(rename = "NVIDIA_T4_VWS_GPUS")]
    #[doc = ""]
    NvidiaT4VwsGpus,
    #[serde(rename = "NVIDIA_V100_GPUS")]
    #[doc = ""]
    NvidiaV100Gpus,
    #[serde(rename = "PACKET_MIRRORINGS")]
    #[doc = ""]
    PacketMirrorings,
    #[serde(rename = "PD_EXTREME_TOTAL_PROVISIONED_IOPS")]
    #[doc = ""]
    PdExtremeTotalProvisionedIops,
    #[serde(rename = "PREEMPTIBLE_CPUS")]
    #[doc = ""]
    PreemptibleCpus,
    #[serde(rename = "PREEMPTIBLE_LOCAL_SSD_GB")]
    #[doc = ""]
    PreemptibleLocalSsdGb,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_A100_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaA100Gpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_K80_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaK80Gpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_P100_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaP100Gpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_P100_VWS_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaP100VwsGpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_P4_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaP4Gpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_P4_VWS_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaP4VwsGpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_T4_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaT4Gpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_T4_VWS_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaT4VwsGpus,
    #[serde(rename = "PREEMPTIBLE_NVIDIA_V100_GPUS")]
    #[doc = ""]
    PreemptibleNvidiaV100Gpus,
    #[serde(rename = "PRIVATE_V6_ACCESS_SUBNETWORKS")]
    #[doc = ""]
    PrivateV6AccessSubnetworks,
    #[serde(rename = "PSC_GOOGLE_APIS_FORWARDING_RULES_PER_NETWORK")]
    #[doc = ""]
    PscGoogleApisForwardingRulesPerNetwork,
    #[serde(rename = "PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK")]
    #[doc = ""]
    PscIlbConsumerForwardingRulesPerProducerNetwork,
    #[serde(rename = "PUBLIC_ADVERTISED_PREFIXES")]
    #[doc = ""]
    PublicAdvertisedPrefixes,
    #[serde(rename = "PUBLIC_DELEGATED_PREFIXES")]
    #[doc = ""]
    PublicDelegatedPrefixes,
    #[serde(rename = "REGIONAL_AUTOSCALERS")]
    #[doc = ""]
    RegionalAutoscalers,
    #[serde(rename = "REGIONAL_INSTANCE_GROUP_MANAGERS")]
    #[doc = ""]
    RegionalInstanceGroupManagers,
    #[serde(rename = "RESERVATIONS")]
    #[doc = ""]
    Reservations,
    #[serde(rename = "RESOURCE_POLICIES")]
    #[doc = ""]
    ResourcePolicies,
    #[serde(rename = "ROUTERS")]
    #[doc = ""]
    Routers,
    #[serde(rename = "ROUTES")]
    #[doc = ""]
    Routes,
    #[serde(rename = "SECURITY_POLICIES")]
    #[doc = ""]
    SecurityPolicies,
    #[serde(rename = "SECURITY_POLICY_CEVAL_RULES")]
    #[doc = ""]
    SecurityPolicyCevalRules,
    #[serde(rename = "SECURITY_POLICY_RULES")]
    #[doc = ""]
    SecurityPolicyRules,
    #[serde(rename = "SNAPSHOTS")]
    #[doc = ""]
    Snapshots,
    #[serde(rename = "SSD_TOTAL_GB")]
    #[doc = ""]
    SsdTotalGb,
    #[serde(rename = "SSL_CERTIFICATES")]
    #[doc = ""]
    SslCertificates,
    #[serde(rename = "STATIC_ADDRESSES")]
    #[doc = ""]
    StaticAddresses,
    #[serde(rename = "STATIC_BYOIP_ADDRESSES")]
    #[doc = ""]
    StaticByoipAddresses,
    #[serde(rename = "SUBNETWORKS")]
    #[doc = ""]
    Subnetworks,
    #[serde(rename = "SUBNET_RANGES_PER_NETWORK")]
    #[doc = ""]
    SubnetRangesPerNetwork,
    #[serde(rename = "TARGET_HTTPS_PROXIES")]
    #[doc = ""]
    TargetHttpsProxies,
    #[serde(rename = "TARGET_HTTP_PROXIES")]
    #[doc = ""]
    TargetHttpProxies,
    #[serde(rename = "TARGET_INSTANCES")]
    #[doc = ""]
    TargetInstances,
    #[serde(rename = "TARGET_POOLS")]
    #[doc = ""]
    TargetPools,
    #[serde(rename = "TARGET_SSL_PROXIES")]
    #[doc = ""]
    TargetSslProxies,
    #[serde(rename = "TARGET_TCP_PROXIES")]
    #[doc = ""]
    TargetTcpProxies,
    #[serde(rename = "TARGET_VPN_GATEWAYS")]
    #[doc = ""]
    TargetVpnGateways,
    #[serde(rename = "URL_MAPS")]
    #[doc = ""]
    UrlMaps,
    #[serde(rename = "VPN_GATEWAYS")]
    #[doc = ""]
    VpnGateways,
    #[serde(rename = "VPN_TUNNELS")]
    #[doc = ""]
    VpnTunnels,
    #[serde(rename = "XPN_SERVICE_PROJECTS")]
    #[doc = ""]
    XpnServiceProjects,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RbacPolicy {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the RbacPolicy."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "permissions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of permissions."]
    pub permissions: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Permission>>>,
    #[serde(rename = "principals")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of principals."]
    pub principals: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Principal>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a reference to a resource."]
pub struct Reference {
    #[serde(rename = "kind")]
    #[serde(default = "reference_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#reference for references."]
    pub kind: ::std::string::String,
    #[serde(rename = "referenceType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A description of the reference type with no implied semantics. Possible values include:  \n- MEMBER_OF"]
    pub reference_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "referrer")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the resource which refers to the target."]
    pub referrer: ::std::option::Option<::std::string::String>,
    #[serde(rename = "target")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the resource to which this reference points."]
    pub target: ::std::option::Option<::std::string::String>,
}
mod reference_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#reference")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Region resource.\n\nA region is a geographical area where a resource is located. For more information, read Regions and Zones. (== resource_for {$api_version}.regions ==)"]
pub struct Region {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this region."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "region_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#region for regions."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "quotas")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Quotas assigned to this region."]
    pub quotas: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Quota>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Status of the region, either UP or DOWN."]
    pub status: ::std::option::Option<RegionStatusEnum>,
    #[serde(rename = "supportsPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub supports_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "zones")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of zones available in this region, in the form of resource URLs."]
    pub zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod region_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#region")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Status of the region, either UP or DOWN."]
pub enum RegionStatusEnum {
    #[serde(rename = "DOWN")]
    #[doc = ""]
    Down,
    #[serde(rename = "UP")]
    #[doc = ""]
    Up,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of autoscalers."]
pub struct RegionAutoscalerList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Autoscaler resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Autoscaler>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_autoscaler_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionAutoscalerListWarning>,
}
mod region_autoscaler_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionAutoscalerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionAutoscalerListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionAutoscalerListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionAutoscalerListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionAutoscalerListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionAutoscalerListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionCommitmentsUpdateReservationsRequest {
    #[serde(rename = "reservations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of two reservations to transfer GPUs and local SSD between."]
    pub reservations: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Reservation>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionDiskTypeList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of DiskType resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<DiskType>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_disk_type_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionDiskTypeListWarning>,
}
mod region_disk_type_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionDiskTypeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionDiskTypeListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionDiskTypeListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionDiskTypeListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionDiskTypeListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionDiskTypeListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionDisksAddResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be added to this disk."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionDisksRemoveResourcePoliciesRequest {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policies to be removed from this disk."]
    pub resource_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionDisksResizeRequest {
    #[serde(rename = "sizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The new size of the regional persistent disk, which is specified in GB."]
    pub size_gb: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of InstanceGroup resources."]
pub struct RegionInstanceGroupList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroup resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroup>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_instance_group_list_defaults :: kind")]
    #[doc = "The resource type."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionInstanceGroupListWarning>,
}
mod region_instance_group_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionInstanceGroupList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionInstanceGroupListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionInstanceGroupListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionInstanceGroupListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionInstanceGroupListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "RegionInstanceGroupManagers.deletePerInstanceConfigs"]
pub struct RegionInstanceGroupManagerDeleteInstanceConfigReq {
    #[serde(rename = "names")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of instance names for which we want to delete per-instance configs on this managed instance group."]
    pub names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of managed instance groups."]
pub struct RegionInstanceGroupManagerList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceGroupManager resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceGroupManager>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_instance_group_manager_list_defaults :: kind")]
    #[doc = "[Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionInstanceGroupManagerListWarning>,
}
mod region_instance_group_manager_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionInstanceGroupManagerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionInstanceGroupManagerListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionInstanceGroupManagerListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionInstanceGroupManagerListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionInstanceGroupManagerListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagerListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "RegionInstanceGroupManagers.patchPerInstanceConfigs"]
pub struct RegionInstanceGroupManagerPatchInstanceConfigReq {
    #[serde(rename = "perInstanceConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of per-instance configs to insert or patch on this managed instance group."]
    pub per_instance_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "RegionInstanceGroupManagers.updatePerInstanceConfigs"]
pub struct RegionInstanceGroupManagerUpdateInstanceConfigReq {
    #[serde(rename = "perInstanceConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of per-instance configs to insert or patch on this managed instance group."]
    pub per_instance_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersAbandonInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "RegionInstanceGroupManagers.applyUpdatesToInstances"]
pub struct RegionInstanceGroupManagersApplyUpdatesRequest {
    #[serde(rename = "allInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flag to update all instances instead of specified list of ?instances?. If the flag is set to true then the instances may not be specified in the request."]
    pub all_instances: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "maximalAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action."]
    pub maximal_action:
        ::std::option::Option<RegionInstanceGroupManagersApplyUpdatesRequestMaximalActionEnum>,
    #[serde(rename = "minimalAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimal action that you want to perform on each instance during the update:  \n- REPLACE: At minimum, delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update."]
    pub minimal_action:
        ::std::option::Option<RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum>,
    #[serde(rename = "mostDisruptiveAllowedAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The most disruptive action that you want to perform on each instance during the update:  \n- REPLACE: Delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail."]
    pub most_disruptive_allowed_action: ::std::option::Option<
        RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action."]
pub enum RegionInstanceGroupManagersApplyUpdatesRequestMaximalActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The minimal action that you want to perform on each instance during the update:  \n- REPLACE: At minimum, delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update."]
pub enum RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The most disruptive action that you want to perform on each instance during the update:  \n- REPLACE: Delete the instance and create it again. \n- RESTART: Stop the instance and start it again. \n- REFRESH: Do not stop the instance. \n- NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail."]
pub enum RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "REFRESH")]
    #[doc = ""]
    Refresh,
    #[serde(rename = "REPLACE")]
    #[doc = ""]
    Replace,
    #[serde(rename = "RESTART")]
    #[doc = ""]
    Restart,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "RegionInstanceGroupManagers.createInstances"]
pub struct RegionInstanceGroupManagersCreateInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Required] List of specifications of per-instance configs."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersDeleteInstancesRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "skipInapplicableInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Skip instances which cannot be deleted (instances not belonging to this managed group, already being deleted or being abandoned). If `false`, fail whole flow, if such instance is passed."]
    pub skip_inapplicable_instances: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersListErrorsResponse {
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of errors of the managed instance group."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceManagedByIgmError>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersListInstanceConfigsResp {
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of PerInstanceConfig."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PerInstanceConfig>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionInstanceGroupManagersListInstanceConfigsRespWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionInstanceGroupManagersListInstanceConfigsRespWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code:
        ::std::option::Option<RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<
        ::std::vec::Vec<RegionInstanceGroupManagersListInstanceConfigsRespWarningData>,
    >,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersListInstanceConfigsRespWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersListInstancesResponse {
    #[serde(rename = "managedInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of managed instances."]
    pub managed_instances:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ManagedInstance>>>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersRecreateRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersResizeAdvancedRequest {
    #[serde(rename = "noCreationRetries")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If this flag is true, the managed instance group attempts to create all instances initiated by this resize request only once. If there is an error during creation, the managed instance group does not retry create this instance, and we will decrease the targetSize of the request instead. If the flag is false, the group attempts to recreate each instance continuously until it succeeds.\n\nThis flag matters only in the first attempt of creation of an instance. After an instance is successfully created while this flag is enabled, the instance behaves the same way as all the other instances created with a regular resize request. In particular, if a running instance dies unexpectedly at a later time and needs to be recreated, this mode does not affect the recreation behavior in that scenario.\n\nThis flag is applicable only to the current resize request. It does not influence other resize requests in any way.\n\nYou can see which instances ar being created in which mode by calling the get or listManagedInstances API."]
    pub no_creation_retries: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "targetSize")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter."]
    pub target_size: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersSetAutoHealingRequest {
    #[serde(rename = "autoHealingPolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub auto_healing_policies: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<InstanceGroupManagerAutoHealingPolicy>>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersSetTargetPoolsRequest {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "targetPools")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."]
    pub target_pools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupManagersSetTemplateRequest {
    #[serde(rename = "instanceTemplate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the InstanceTemplate resource from which all new instances will be created."]
    pub instance_template: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupsListInstances {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of InstanceWithNamedPorts resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceWithNamedPorts>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_instance_groups_list_instances_defaults :: kind")]
    #[doc = "The resource type."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionInstanceGroupsListInstancesWarning>,
}
mod region_instance_groups_list_instances_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionInstanceGroupsListInstances")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionInstanceGroupsListInstancesWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionInstanceGroupsListInstancesWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionInstanceGroupsListInstancesWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionInstanceGroupsListInstancesWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupsListInstancesWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupsListInstancesRequest {
    #[serde(rename = "instanceState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances."]
    pub instance_state:
        ::std::option::Option<RegionInstanceGroupsListInstancesRequestInstanceStateEnum>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances."]
    pub port_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances."]
pub enum RegionInstanceGroupsListInstancesRequestInstanceStateEnum {
    #[serde(rename = "ALL")]
    #[doc = ""]
    All,
    #[serde(rename = "RUNNING")]
    #[doc = ""]
    Running,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstanceGroupsSetNamedPortsRequest {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "namedPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of named ports to set for this instance group."]
    pub named_ports: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NamedPort>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionInstantSnapshotsExportRequest {
    #[serde(rename = "exportParams")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Parameters to export the changed blocks."]
    pub export_params: ::std::option::Option<::std::boxed::Box<InstantSnapshotExportParams>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of region resources."]
pub struct RegionList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Region resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Region>>>,
    #[serde(rename = "kind")]
    #[serde(default = "region_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#regionList for lists of regions."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RegionListWarning>,
}
mod region_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#regionList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RegionListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RegionListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RegionListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RegionListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionSetLabelsRequest {
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The labels to set for this resource."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionSetPolicyRequest {
    #[serde(rename = "bindings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings."]
    pub bindings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Binding>>>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "policy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them."]
    pub policy: ::std::option::Option<::std::boxed::Box<Policy>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionTargetHttpsProxiesSetSslCertificatesRequest {
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RegionUrlMapsValidateRequest {
    #[serde(rename = "resource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Content of the UrlMap to be validated."]
    pub resource: ::std::option::Option<::std::boxed::Box<UrlMap>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow."]
pub struct RequestMirrorPolicy {
    #[serde(rename = "backendService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL to the BackendService resource being mirrored to."]
    pub backend_service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read  Reserving zonal resources. (== resource_for {$api_version}.reservations ==)"]
pub struct Reservation {
    #[serde(rename = "commitment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment."]
    pub commitment: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "reservation_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#reservations for reservations."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined fully-qualified URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "shareSettings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Share-settings for shared-reservation"]
    pub share_settings: ::std::option::Option<::std::boxed::Box<AllocationShareSettings>>,
    #[serde(rename = "specificReservation")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Reservation for instances with specific machine shapes."]
    pub specific_reservation:
        ::std::option::Option<::std::boxed::Box<AllocationSpecificSkuReservation>>,
    #[serde(rename = "specificReservationRequired")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether the reservation can be consumed by VMs with affinity for \"any\" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation."]
    pub specific_reservation_required: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the reservation."]
    pub status: ::std::option::Option<ReservationStatusEnum>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod reservation_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#reservation")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the reservation."]
pub enum ReservationStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
    #[serde(rename = "UPDATING")]
    #[doc = ""]
    Updating,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specifies the reservations that this instance can consume from."]
pub struct ReservationAffinity {
    #[serde(rename = "consumeReservationType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples."]
    pub consume_reservation_type:
        ::std::option::Option<ReservationAffinityConsumeReservationTypeEnum>,
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "values")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Corresponds to the label values of a reservation resource."]
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples."]
pub enum ReservationAffinityConsumeReservationTypeEnum {
    #[serde(rename = "ANY_RESERVATION")]
    #[doc = ""]
    AnyReservation,
    #[serde(rename = "NO_RESERVATION")]
    #[doc = ""]
    NoReservation,
    #[serde(rename = "SPECIFIC_RESERVATION")]
    #[doc = ""]
    SpecificReservation,
    #[serde(rename = "SPECIFIC_THEN_ANY_RESERVATION")]
    #[doc = ""]
    SpecificThenAnyReservation,
    #[serde(rename = "UNSPECIFIED")]
    #[doc = ""]
    Unspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of reservations."]
pub struct ReservationAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Allocation resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<ReservationsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "reservation_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ReservationAggregatedListWarning>,
}
mod reservation_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#reservationAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ReservationAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ReservationAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ReservationAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ReservationAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of Allocation resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Reservation>>>,
    #[serde(rename = "kind")]
    #[serde(default = "reservation_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#reservationsList for listsof reservations"]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ReservationListWarning>,
}
mod reservation_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#reservationList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ReservationListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ReservationListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ReservationListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ReservationListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationsResizeRequest {
    #[serde(rename = "specificSkuCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of allocated resources can be resized with minimum = 1 and maximum = 1000."]
    pub specific_sku_count: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationsScopedList {
    #[serde(rename = "reservations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of reservations contained in this scope."]
    pub reservations: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Reservation>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of reservations when the list is empty."]
    pub warning: ::std::option::Option<ReservationsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of reservations when the list is empty."]
pub struct ReservationsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ReservationsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ReservationsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ReservationsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ReservationsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Commitment for a particular resource (a Commitment is composed of one or more of these)."]
pub struct ResourceCommitment {
    #[serde(rename = "acceleratorType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the accelerator type resource. Applicable only when the type is ACCELERATOR."]
    pub accelerator_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "amount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU."]
    pub amount: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Type of resource for which this commitment applies. Possible values are VCPU and MEMORY"]
    pub _type: ::std::option::Option<ResourceCommitmentTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Type of resource for which this commitment applies. Possible values are VCPU and MEMORY"]
pub enum ResourceCommitmentTypeEnum {
    #[serde(rename = "ACCELERATOR")]
    #[doc = ""]
    Accelerator,
    #[serde(rename = "LOCAL_SSD")]
    #[doc = ""]
    LocalSsd,
    #[serde(rename = "MEMORY")]
    #[doc = ""]
    Memory,
    #[serde(rename = "UNSPECIFIED")]
    #[doc = ""]
    Unspecified,
    #[serde(rename = "VCPU")]
    #[doc = ""]
    Vcpu,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourceGroupReference {
    #[serde(rename = "group")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A URI referencing one of the instance groups or network endpoint groups listed in the backend service."]
    pub group: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePoliciesScopedList {
    #[serde(rename = "resourcePolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of resourcePolicies contained in this scope."]
    pub resource_policies:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ResourcePolicy>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of resourcePolicies when the list is empty."]
    pub warning: ::std::option::Option<ResourcePoliciesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of resourcePolicies when the list is empty."]
pub struct ResourcePoliciesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ResourcePoliciesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ResourcePoliciesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ResourcePoliciesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePoliciesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.\n\n(== resource_for {$api_version}.resourcePolicies ==)"]
pub struct ResourcePolicy {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "groupPlacementPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policy for instances for placement configuration."]
    pub group_placement_policy:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyGroupPlacementPolicy>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instanceSchedulePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policy for scheduling instance operations."]
    pub instance_schedule_policy:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyInstanceSchedulePolicy>>,
    #[serde(rename = "kind")]
    #[serde(default = "resource_policy_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#resource_policies for resource policies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "resourceStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The system status of the resource policy."]
    pub resource_status: ::std::option::Option<::std::boxed::Box<ResourcePolicyResourceStatus>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined fully-qualified URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "snapshotSchedulePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policy for persistent disks for creating snapshots."]
    pub snapshot_schedule_policy:
        ::std::option::Option<::std::boxed::Box<ResourcePolicySnapshotSchedulePolicy>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of resource policy creation."]
    pub status: ::std::option::Option<ResourcePolicyStatusEnum>,
    #[serde(rename = "vmMaintenancePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Resource policy applicable to VMs for infrastructure maintenance."]
    pub vm_maintenance_policy:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyVmMaintenancePolicy>>,
}
mod resource_policy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#resourcePolicy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of resource policy creation."]
pub enum ResourcePolicyStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "EXPIRED")]
    #[doc = ""]
    Expired,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of resourcePolicies."]
pub struct ResourcePolicyAggregatedList {
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ResourcePolicy resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<ResourcePoliciesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "resource_policy_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ResourcePolicyAggregatedListWarning>,
}
mod resource_policy_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#resourcePolicyAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ResourcePolicyAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ResourcePolicyAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ResourcePolicyAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ResourcePolicyAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Time window specified for daily operations."]
pub struct ResourcePolicyDailyCycle {
    #[serde(rename = "daysInCycle")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle."]
    pub days_in_cycle: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario."]
    pub duration: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid."]
    pub start_time: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality"]
pub struct ResourcePolicyGroupPlacementPolicy {
    #[serde(rename = "availabilityDomainCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network"]
    pub availability_domain_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "collocation")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies network collocation"]
    pub collocation: ::std::option::Option<ResourcePolicyGroupPlacementPolicyCollocationEnum>,
    #[serde(rename = "locality")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies network locality"]
    pub locality: ::std::option::Option<ResourcePolicyGroupPlacementPolicyLocalityEnum>,
    #[serde(rename = "scope")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Scope specifies the availability domain to which the VMs should be spread."]
    pub scope: ::std::option::Option<ResourcePolicyGroupPlacementPolicyScopeEnum>,
    #[serde(rename = "style")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies instances to hosts placement relationship"]
    pub style: ::std::option::Option<ResourcePolicyGroupPlacementPolicyStyleEnum>,
    #[serde(rename = "vmCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of vms in this placement group"]
    pub vm_count: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies network collocation"]
pub enum ResourcePolicyGroupPlacementPolicyCollocationEnum {
    #[serde(rename = "CLUSTERED")]
    #[doc = ""]
    Clustered,
    #[serde(rename = "COLLOCATED")]
    #[doc = ""]
    Collocated,
    #[serde(rename = "UNSPECIFIED_COLLOCATION")]
    #[doc = ""]
    UnspecifiedCollocation,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies network locality"]
pub enum ResourcePolicyGroupPlacementPolicyLocalityEnum {
    #[serde(rename = "BEST_EFFORT")]
    #[doc = ""]
    BestEffort,
    #[serde(rename = "STRICT")]
    #[doc = ""]
    Strict,
    #[serde(rename = "UNSPECIFIED_LOCALITY")]
    #[doc = ""]
    UnspecifiedLocality,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Scope specifies the availability domain to which the VMs should be spread."]
pub enum ResourcePolicyGroupPlacementPolicyScopeEnum {
    #[serde(rename = "HOST")]
    #[doc = ""]
    Host,
    #[serde(rename = "UNSPECIFIED_SCOPE")]
    #[doc = ""]
    UnspecifiedScope,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies instances to hosts placement relationship"]
pub enum ResourcePolicyGroupPlacementPolicyStyleEnum {
    #[serde(rename = "COMPACT")]
    #[doc = ""]
    Compact,
    #[serde(rename = "FULLY_SPREAD")]
    #[doc = ""]
    FullySpread,
    #[serde(rename = "UNSPECIFIED_PLACEMENT_TYPE")]
    #[doc = ""]
    UnspecifiedPlacementType,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Time window specified for hourly operations."]
pub struct ResourcePolicyHourlyCycle {
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario."]
    pub duration: ::std::option::Option<::std::string::String>,
    #[serde(rename = "hoursInCycle")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle."]
    pub hours_in_cycle: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT."]
    pub start_time: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance."]
pub struct ResourcePolicyInstanceSchedulePolicy {
    #[serde(rename = "expirationTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The expiration time of the schedule. The timestamp is an RFC3339 string."]
    pub expiration_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The start time of the schedule. The timestamp is an RFC3339 string."]
    pub start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "timeZone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database."]
    pub time_zone: ::std::option::Option<::std::string::String>,
    #[serde(rename = "vmStartSchedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the schedule for starting instances."]
    pub vm_start_schedule:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyInstanceSchedulePolicySchedule>>,
    #[serde(rename = "vmStopSchedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the schedule for stopping instances."]
    pub vm_stop_schedule:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyInstanceSchedulePolicySchedule>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Schedule for an instance operation."]
pub struct ResourcePolicyInstanceSchedulePolicySchedule {
    #[serde(rename = "schedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the frequency for the operation, using the unix-cron format."]
    pub schedule: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyList {
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of ResourcePolicy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ResourcePolicy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "resource_policy_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies"]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ResourcePolicyListWarning>,
}
mod resource_policy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#resourcePolicyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ResourcePolicyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ResourcePolicyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ResourcePolicyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ResourcePolicyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this \"status\" field should mimic the structure of ResourcePolicy proto specification."]
pub struct ResourcePolicyResourceStatus {
    #[serde(rename = "instanceSchedulePolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field."]
    pub instance_schedule_policy: ::std::option::Option<
        ::std::boxed::Box<ResourcePolicyResourceStatusInstanceSchedulePolicyStatus>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {
    #[serde(rename = "lastRunStartTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string."]
    pub last_run_start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextRunStartTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string."]
    pub next_run_start_time: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained."]
pub struct ResourcePolicySnapshotSchedulePolicy {
    #[serde(rename = "retentionPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Retention policy applied to snapshots created by this resource policy."]
    pub retention_policy: ::std::option::Option<
        ::std::boxed::Box<ResourcePolicySnapshotSchedulePolicyRetentionPolicy>,
    >,
    #[serde(rename = "schedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy."]
    pub schedule:
        ::std::option::Option<::std::boxed::Box<ResourcePolicySnapshotSchedulePolicySchedule>>,
    #[serde(rename = "snapshotProperties")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Properties with which snapshots are created such as labels, encryption keys."]
    pub snapshot_properties: ::std::option::Option<
        ::std::boxed::Box<ResourcePolicySnapshotSchedulePolicySnapshotProperties>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Policy for retention of scheduled snapshots."]
pub struct ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
    #[serde(rename = "maxRetentionDays")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maximum age of the snapshot that is allowed to be kept."]
    pub max_retention_days: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "onPolicySwitch")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "TODO(b/165626794): Remove this field Specifies the behavior to apply to existing, scheduled snapshots snapshots if the policy is changed."]
    pub on_policy_switch: ::std::option::Option<
        ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnPolicySwitchEnum,
    >,
    #[serde(rename = "onSourceDiskDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the behavior to apply to scheduled snapshots when the source disk is deleted."]
    pub on_source_disk_delete: ::std::option::Option<
        ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "TODO(b/165626794): Remove this field Specifies the behavior to apply to existing, scheduled snapshots snapshots if the policy is changed."]
pub enum ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnPolicySwitchEnum {
    #[serde(rename = "DO_NOT_RETROACTIVELY_APPLY")]
    #[doc = ""]
    DoNotRetroactivelyApply,
    #[serde(rename = "RETROACTIVELY_APPLY")]
    #[doc = ""]
    RetroactivelyApply,
    #[serde(rename = "UNSPECIFIED_ON_POLICY_SWITCH")]
    #[doc = ""]
    UnspecifiedOnPolicySwitch,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the behavior to apply to scheduled snapshots when the source disk is deleted."]
pub enum ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum {
    #[serde(rename = "APPLY_RETENTION_POLICY")]
    #[doc = ""]
    ApplyRetentionPolicy,
    #[serde(rename = "KEEP_AUTO_SNAPSHOTS")]
    #[doc = ""]
    KeepAutoSnapshots,
    #[serde(rename = "UNSPECIFIED_ON_SOURCE_DISK_DELETE")]
    #[doc = ""]
    UnspecifiedOnSourceDiskDelete,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A schedule for disks where the schedueled operations are performed."]
pub struct ResourcePolicySnapshotSchedulePolicySchedule {
    #[serde(rename = "dailySchedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub daily_schedule: ::std::option::Option<::std::boxed::Box<ResourcePolicyDailyCycle>>,
    #[serde(rename = "hourlySchedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub hourly_schedule: ::std::option::Option<::std::boxed::Box<ResourcePolicyHourlyCycle>>,
    #[serde(rename = "weeklySchedule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub weekly_schedule: ::std::option::Option<::std::boxed::Box<ResourcePolicyWeeklyCycle>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Specified snapshot properties for scheduled snapshots created by this policy."]
pub struct ResourcePolicySnapshotSchedulePolicySnapshotProperties {
    #[serde(rename = "chainName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Chain name that the snapshot is created in."]
    pub chain_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestFlush")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indication to perform a 'guest aware' snapshot."]
    pub guest_flush: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "storageLocations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional)."]
    pub storage_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyVmMaintenancePolicy {
    #[serde(rename = "concurrencyControlGroup")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub concurrency_control_group: ::std::option::Option<
        ::std::boxed::Box<ResourcePolicyVmMaintenancePolicyConcurrencyControl>,
    >,
    #[serde(rename = "maintenanceWindow")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Maintenance windows that are applied to VMs covered by this policy."]
    pub maintenance_window: ::std::option::Option<
        ::std::boxed::Box<ResourcePolicyVmMaintenancePolicyMaintenanceWindow>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A concurrency control configuration. Defines a group config that, when attached to an instance, recognizes that instance as part of a group of instances where only up the concurrency_limit of instances in that group can undergo simultaneous maintenance. For more information: go/concurrency-control-design-doc"]
pub struct ResourcePolicyVmMaintenancePolicyConcurrencyControl {
    #[serde(rename = "concurrencyLimit")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub concurrency_limit: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A maintenance window for VMs. When set, we restrict our maintenance operations to this window."]
pub struct ResourcePolicyVmMaintenancePolicyMaintenanceWindow {
    #[serde(rename = "dailyMaintenanceWindow")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub daily_maintenance_window:
        ::std::option::Option<::std::boxed::Box<ResourcePolicyDailyCycle>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Time window specified for weekly operations."]
pub struct ResourcePolicyWeeklyCycle {
    #[serde(rename = "dayOfWeeks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Up to 7 intervals/windows, one for each day of the week."]
    pub day_of_weeks: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<ResourcePolicyWeeklyCycleDayOfWeek>>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourcePolicyWeeklyCycleDayOfWeek {
    #[serde(rename = "day")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY."]
    pub day: ::std::option::Option<ResourcePolicyWeeklyCycleDayOfWeekDayEnum>,
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario."]
    pub duration: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT."]
    pub start_time: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY."]
pub enum ResourcePolicyWeeklyCycleDayOfWeekDayEnum {
    #[serde(rename = "FRIDAY")]
    #[doc = ""]
    Friday,
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "MONDAY")]
    #[doc = ""]
    Monday,
    #[serde(rename = "SATURDAY")]
    #[doc = ""]
    Saturday,
    #[serde(rename = "SUNDAY")]
    #[doc = ""]
    Sunday,
    #[serde(rename = "THURSDAY")]
    #[doc = ""]
    Thursday,
    #[serde(rename = "TUESDAY")]
    #[doc = ""]
    Tuesday,
    #[serde(rename = "WEDNESDAY")]
    #[doc = ""]
    Wednesday,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls."]
pub struct ResourceStatus {
    #[serde(rename = "scheduling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub scheduling: ::std::option::Option<::std::boxed::Box<ResourceStatusScheduling>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ResourceStatusScheduling {
    #[serde(rename = "availabilityDomain")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the availability domain (AD), which this instance should be scheduled on. The AD belongs to the spread GroupPlacementPolicy resource policy that has been assigned to the instance. Specify a value between 1-max count of availability domains in your GroupPlacementPolicy. See go/placement-policy-extension for more details."]
    pub availability_domain: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A rollout policy configuration."]
pub struct RolloutPolicy {
    #[serde(rename = "defaultRolloutTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional RFC3339 timestamp on or after which the update is considered rolled out to any zone that is not explicitly stated."]
    pub default_rollout_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "locationRolloutPolicies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Location based rollout policies to apply to the resource.\n\nCurrently only zone names are supported and must be represented as valid URLs, like: zones/us-central1-a.\n\nThe value expects an RFC3339 timestamp on or after which the update is considered rolled out to the specified location."]
    pub location_rollout_policies:
        ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Route resource.\n\nA route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview. (== resource_for {$api_version}.routes ==)"]
pub struct Route {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this field when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "destRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported."]
    pub dest_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "route_defaults :: kind")]
    #[doc = "[Output Only] Type of this resource. Always compute#routes for Route resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fully-qualified URL of the network that this route applies to."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL:  projects/project/global/gateways/default-internet-gateway"]
    pub next_hop_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopIlb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs:  \n- 10.128.0.56 \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule \n- regions/region/forwardingRules/forwardingRule"]
    pub next_hop_ilb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example:\nhttps://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/"]
    pub next_hop_instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopInterconnectAttachment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The URL to an InterconnectAttachment which is the next hop for the route. This field will only be populated for the dynamic routes generated by Cloud Router with a linked interconnectAttachment."]
    pub next_hop_interconnect_attachment: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The network IP address of an instance that should handle matching packets. Only IPv4 is supported."]
    pub next_hop_ip: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopNetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the local network if it should handle matching packets."]
    pub next_hop_network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopPeering")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The network peering name that should handle matching packets, which should conform to RFC1035."]
    pub next_hop_peering: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextHopVpnTunnel")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL to a VpnTunnel that should handle matching packets."]
    pub next_hop_vpn_tunnel: ::std::option::Option<::std::string::String>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined fully-qualified URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of instance tags to which this route applies."]
    pub tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warnings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages."]
    pub warnings: ::std::option::Option<::std::vec::Vec<RouteWarnings>>,
}
mod route_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#route")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouteWarnings {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RouteWarningsCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RouteWarningsData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RouteWarningsCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouteWarningsData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Route resources."]
pub struct RouteList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Route resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Route>>>,
    #[serde(rename = "kind")]
    #[serde(default = "route_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RouteListWarning>,
}
mod route_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#routeList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RouteListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RouteListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RouteListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RouteListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouteListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Cloud Router resource.\n\nFor more information about Cloud Router, read the Cloud Router overview."]
pub struct Router {
    #[serde(rename = "bgp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "BGP information specific to this router."]
    pub bgp: ::std::option::Option<::std::boxed::Box<RouterBgp>>,
    #[serde(rename = "bgpPeers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273."]
    pub bgp_peers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterBgpPeer>>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "encryptedInterconnectRouter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Field to indicate if a router is dedicated to use with encrypted Interconnect Attachment (Encrypted Interconnect feature)."]
    pub encrypted_interconnect_router: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both."]
    pub interfaces: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterInterface>>>,
    #[serde(rename = "kind")]
    #[serde(default = "router_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#router for routers."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nats")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of NAT services created in this router."]
    pub nats: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterNat>>>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URI of the network to which this router belongs."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
}
mod router_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#router")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Description-tagged IP ranges for the router to advertise."]
pub struct RouterAdvertisedIpRange {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified description for the IP range."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "range")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP range to advertise. The value must be a CIDR-formatted string."]
    pub range: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of routers."]
pub struct RouterAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Router resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<RoutersScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "router_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RouterAggregatedListWarning>,
}
mod router_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#routerAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RouterAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RouterAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RouterAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RouterAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterBgp {
    #[serde(rename = "advertiseMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM."]
    pub advertise_mode: ::std::option::Option<RouterBgpAdvertiseModeEnum>,
    #[serde(rename = "advertisedGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups."]
    pub advertised_groups: ::std::option::Option<::std::vec::Vec<RouterBgpAdvertisedGroupsEnum>>,
    #[serde(rename = "advertisedIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges."]
    pub advertised_ip_ranges:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterAdvertisedIpRange>>>,
    #[serde(rename = "asn")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN."]
    pub asn: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "keepaliveInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The interval in seconds between BGP keepalive messages that are sent to the peer.\nNot currently available publicly.\nHold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer.\nBGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers.\nIf set, this value must be between 1 and 120. The default is 20."]
    pub keepalive_interval: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM."]
pub enum RouterBgpAdvertiseModeEnum {
    #[serde(rename = "CUSTOM")]
    #[doc = ""]
    Custom,
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum RouterBgpAdvertisedGroupsEnum {
    #[serde(rename = "ALL_PEER_VPC_SUBNETS")]
    #[doc = ""]
    AllPeerVpcSubnets,
    #[serde(rename = "ALL_SUBNETS")]
    #[doc = ""]
    AllSubnets,
    #[serde(rename = "ALL_VPC_SUBNETS")]
    #[doc = ""]
    AllVpcSubnets,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterBgpPeer {
    #[serde(rename = "advertiseMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified flag to indicate which mode to use for advertisement."]
    pub advertise_mode: ::std::option::Option<RouterBgpPeerAdvertiseModeEnum>,
    #[serde(rename = "advertisedGroups")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: \n- ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. \n- ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. \n- ALL_PEER_VPC_SUBNETS: Advertises peer subnets of the router's VPC network. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the \"bgp\" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups."]
    pub advertised_groups:
        ::std::option::Option<::std::vec::Vec<RouterBgpPeerAdvertisedGroupsEnum>>,
    #[serde(rename = "advertisedIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the \"bgp\" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges."]
    pub advertised_ip_ranges:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterAdvertisedIpRange>>>,
    #[serde(rename = "advertisedRoutePriority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win."]
    pub advertised_route_priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "bfd")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "BFD configuration for the BGP peering.\nNot currently available publicly."]
    pub bfd: ::std::option::Option<::std::boxed::Box<RouterBgpPeerBfd>>,
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of the BGP peer connection.\nNot currently available publicly.\nIf set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE."]
    pub enable: ::std::option::Option<RouterBgpPeerEnableEnum>,
    #[serde(rename = "interfaceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the interface the BGP peer is associated with."]
    pub interface_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the interface inside Google Cloud Platform. Only IPv4 is supported."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "managementType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The resource that configures and manages this BGP peer. \n- MANAGED_BY_USER is the default value and can be managed by you or other users \n- MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted."]
    pub management_type: ::std::option::Option<RouterBgpPeerManagementTypeEnum>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerAsn")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value."]
    pub peer_asn: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "peerIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported."]
    pub peer_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "routerApplianceInstance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session."]
    pub router_appliance_instance: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "User-specified flag to indicate which mode to use for advertisement."]
pub enum RouterBgpPeerAdvertiseModeEnum {
    #[serde(rename = "CUSTOM")]
    #[doc = ""]
    Custom,
    #[serde(rename = "DEFAULT")]
    #[doc = ""]
    Default,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum RouterBgpPeerAdvertisedGroupsEnum {
    #[serde(rename = "ALL_PEER_VPC_SUBNETS")]
    #[doc = ""]
    AllPeerVpcSubnets,
    #[serde(rename = "ALL_SUBNETS")]
    #[doc = ""]
    AllSubnets,
    #[serde(rename = "ALL_VPC_SUBNETS")]
    #[doc = ""]
    AllVpcSubnets,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The status of the BGP peer connection.\nNot currently available publicly.\nIf set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE."]
pub enum RouterBgpPeerEnableEnum {
    #[serde(rename = "FALSE")]
    #[doc = ""]
    False,
    #[serde(rename = "TRUE")]
    #[doc = ""]
    True,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The resource that configures and manages this BGP peer. \n- MANAGED_BY_USER is the default value and can be managed by you or other users \n- MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted."]
pub enum RouterBgpPeerManagementTypeEnum {
    #[serde(rename = "MANAGED_BY_ATTACHMENT")]
    #[doc = ""]
    ManagedByAttachment,
    #[serde(rename = "MANAGED_BY_USER")]
    #[doc = ""]
    ManagedByUser,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterBgpPeerBfd {
    #[serde(rename = "minReceiveInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router.\nNot currently available publicly.\nIf set, this value must be between 100 and 30000.\nThe default is 300."]
    pub min_receive_interval: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "minTransmitInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router.\nNot currently available publicly.\nIf set, this value must be between 100 and 30000.\nThe default is 300."]
    pub min_transmit_interval: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE."]
    pub mode: ::std::option::Option<RouterBgpPeerBfdModeEnum>,
    #[serde(rename = "multiplier")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable.\nNot currently available publicly.\nIf set, the value must be a value between 2 and 16.\nThe default is 3."]
    pub multiplier: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "packetMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO."]
    pub packet_mode: ::std::option::Option<RouterBgpPeerBfdPacketModeEnum>,
    #[serde(rename = "sessionInitializationMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The BFD session initialization mode for this BGP peer.\nNot currently available publicly.\nIf set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE."]
    pub session_initialization_mode:
        ::std::option::Option<RouterBgpPeerBfdSessionInitializationModeEnum>,
    #[serde(rename = "slowTimerInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum interval, in milliseconds, between BFD control packets transmitted to and received from the peer router when BFD echo mode is enabled on both routers. The actual transmit and receive intervals are negotiated between the two routers and are equal to the greater of this value and the corresponding interval on the other router. If set, this value must be between 1000 and 30000. The default is 5000."]
    pub slow_timer_interval: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE."]
pub enum RouterBgpPeerBfdModeEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DISABLED")]
    #[doc = ""]
    Disabled,
    #[serde(rename = "PASSIVE")]
    #[doc = ""]
    Passive,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO."]
pub enum RouterBgpPeerBfdPacketModeEnum {
    #[serde(rename = "CONTROL_AND_ECHO")]
    #[doc = ""]
    ControlAndEcho,
    #[serde(rename = "CONTROL_ONLY")]
    #[doc = ""]
    ControlOnly,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The BFD session initialization mode for this BGP peer.\nNot currently available publicly.\nIf set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE."]
pub enum RouterBgpPeerBfdSessionInitializationModeEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DISABLED")]
    #[doc = ""]
    Disabled,
    #[serde(rename = "PASSIVE")]
    #[doc = ""]
    Passive,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterInterface {
    #[serde(rename = "ipRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface."]
    pub ip_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "linkedInterconnectAttachment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance."]
    pub linked_interconnect_attachment: ::std::option::Option<::std::string::String>,
    #[serde(rename = "linkedVpnTunnel")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance."]
    pub linked_vpn_tunnel: ::std::option::Option<::std::string::String>,
    #[serde(rename = "managementType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The resource that configures and manages this interface. \n- MANAGED_BY_USER is the default value and can be managed directly by users. \n- MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted."]
    pub management_type: ::std::option::Option<RouterInterfaceManagementTypeEnum>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM."]
    pub private_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "redundantInterface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub redundant_interface: ::std::option::Option<::std::string::String>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The resource that configures and manages this interface. \n- MANAGED_BY_USER is the default value and can be managed directly by users. \n- MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted."]
pub enum RouterInterfaceManagementTypeEnum {
    #[serde(rename = "MANAGED_BY_ATTACHMENT")]
    #[doc = ""]
    ManagedByAttachment,
    #[serde(rename = "MANAGED_BY_USER")]
    #[doc = ""]
    ManagedByUser,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Router resources."]
pub struct RouterList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Router resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Router>>>,
    #[serde(rename = "kind")]
    #[serde(default = "router_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#router for routers."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<RouterListWarning>,
}
mod router_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#routerList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct RouterListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RouterListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RouterListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RouterListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided."]
pub struct RouterNat {
    #[serde(rename = "drainNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only."]
    pub drain_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "enableEndpointIndependentMapping")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub enable_endpoint_independent_mapping: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "icmpIdleTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Timeout (in seconds) for ICMP connections. Defaults to 30s if not set."]
    pub icmp_idle_timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "logConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configure logging on this NAT."]
    pub log_config: ::std::option::Option<::std::boxed::Box<RouterNatLogConfig>>,
    #[serde(rename = "minPortsPerVm")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM."]
    pub min_ports_per_vm: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "natIpAllocateOption")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specify the NatIpAllocateOption, which can take one of the following values: \n- MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. \n- AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty."]
    pub nat_ip_allocate_option: ::std::option::Option<RouterNatNatIpAllocateOptionEnum>,
    #[serde(rename = "natIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project."]
    pub nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of rules associated with this NAT."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterNatRule>>>,
    #[serde(rename = "sourceSubnetworkIpRangesToNat")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specify the Nat option, which can take one of the following values: \n- ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. \n- ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. \n- LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region."]
    pub source_subnetwork_ip_ranges_to_nat:
        ::std::option::Option<RouterNatSourceSubnetworkIpRangesToNatEnum>,
    #[serde(rename = "subnetworks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above."]
    pub subnetworks:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterNatSubnetworkToNat>>>,
    #[serde(rename = "tcpEstablishedIdleTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set."]
    pub tcp_established_idle_timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "tcpTimeWaitTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set."]
    pub tcp_time_wait_timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "tcpTransitoryIdleTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set."]
    pub tcp_transitory_idle_timeout_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "udpIdleTimeoutSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Timeout (in seconds) for UDP connections. Defaults to 30s if not set."]
    pub udp_idle_timeout_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specify the NatIpAllocateOption, which can take one of the following values: \n- MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. \n- AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty."]
pub enum RouterNatNatIpAllocateOptionEnum {
    #[serde(rename = "AUTO_ONLY")]
    #[doc = ""]
    AutoOnly,
    #[serde(rename = "MANUAL_ONLY")]
    #[doc = ""]
    ManualOnly,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specify the Nat option, which can take one of the following values: \n- ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. \n- ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. \n- LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region."]
pub enum RouterNatSourceSubnetworkIpRangesToNatEnum {
    #[serde(rename = "ALL_SUBNETWORKS_ALL_IP_RANGES")]
    #[doc = ""]
    AllSubnetworksAllIpRanges,
    #[serde(rename = "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES")]
    #[doc = ""]
    AllSubnetworksAllPrimaryIpRanges,
    #[serde(rename = "LIST_OF_SUBNETWORKS")]
    #[doc = ""]
    ListOfSubnetworks,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration of logging on a NAT."]
pub struct RouterNatLogConfig {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether or not to export logs. This is false by default."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "filter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: \n- ERRORS_ONLY: Export logs only for connection failures. \n- TRANSLATIONS_ONLY: Export logs only for successful connections. \n- ALL: Export logs for all connections, successful and unsuccessful."]
    pub filter: ::std::option::Option<RouterNatLogConfigFilterEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: \n- ERRORS_ONLY: Export logs only for connection failures. \n- TRANSLATIONS_ONLY: Export logs only for successful connections. \n- ALL: Export logs for all connections, successful and unsuccessful."]
pub enum RouterNatLogConfigFilterEnum {
    #[serde(rename = "ALL")]
    #[doc = ""]
    All,
    #[serde(rename = "ERRORS_ONLY")]
    #[doc = ""]
    ErrorsOnly,
    #[serde(rename = "TRANSLATIONS_ONLY")]
    #[doc = ""]
    TranslationsOnly,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterNatRule {
    #[serde(rename = "action")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The action to be enforced for traffic that matches this rule."]
    pub action: ::std::option::Option<::std::boxed::Box<RouterNatRuleAction>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this rule."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding ?action? is enforced.\n\nThe following examples are valid match expressions:\n\n\"inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')\"\n\n\"destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'\""]
    pub _match: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ruleNumber")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT."]
    pub rule_number: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterNatRuleAction {
    #[serde(rename = "sourceNatActiveIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project."]
    pub source_nat_active_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceNatDrainIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only."]
    pub source_nat_drain_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Defines the IP ranges that want to use NAT for a subnetwork."]
pub struct RouterNatSubnetworkToNat {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL for the subnetwork resource that will use NAT."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "secondaryIpRangeNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if \"LIST_OF_SECONDARY_IP_RANGES\" is one of the values in source_ip_ranges_to_nat."]
    pub secondary_ip_range_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sourceIpRangesToNat")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: [\"PRIMARY_IP_RANGE\", \"LIST_OF_SECONDARY_IP_RANGES\"] Default: [ALL_IP_RANGES]"]
    pub source_ip_ranges_to_nat:
        ::std::option::Option<::std::vec::Vec<RouterNatSubnetworkToNatSourceIpRangesToNatEnum>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum RouterNatSubnetworkToNatSourceIpRangesToNatEnum {
    #[serde(rename = "ALL_IP_RANGES")]
    #[doc = ""]
    AllIpRanges,
    #[serde(rename = "LIST_OF_SECONDARY_IP_RANGES")]
    #[doc = ""]
    ListOfSecondaryIpRanges,
    #[serde(rename = "PRIMARY_IP_RANGE")]
    #[doc = ""]
    PrimaryIpRange,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterStatus {
    #[serde(rename = "bestRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Best routes for this router's network."]
    pub best_routes: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Route>>>,
    #[serde(rename = "bestRoutesForRouter")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Best routes learned by this router."]
    pub best_routes_for_router: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Route>>>,
    #[serde(rename = "bgpPeerStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub bgp_peer_status:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterStatusBgpPeerStatus>>>,
    #[serde(rename = "natStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub nat_status:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<RouterStatusNatStatus>>>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URI of the network to which this router belongs."]
    pub network: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterStatusBgpPeerStatus {
    #[serde(rename = "advertisedRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Routes that were advertised to the remote BGP peer"]
    pub advertised_routes: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Route>>>,
    #[serde(rename = "bfdStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub bfd_status: ::std::option::Option<::std::boxed::Box<BfdStatus>>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the local BGP interface."]
    pub ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "linkedVpnTunnel")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the VPN tunnel that this BGP peer controls."]
    pub linked_vpn_tunnel: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of this BGP peer. Unique within the Routers resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "numLearnedRoutes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of routes learned from the remote BGP Peer."]
    pub num_learned_routes: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "peerIpAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the remote BGP interface."]
    pub peer_ip_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "BGP state as specified in RFC1771."]
    pub state: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Status of the BGP peer: {UP, DOWN}"]
    pub status: ::std::option::Option<RouterStatusBgpPeerStatusStatusEnum>,
    #[serde(rename = "uptime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds"]
    pub uptime: ::std::option::Option<::std::string::String>,
    #[serde(rename = "uptimeSeconds")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Time this session has been up, in seconds. Format: 145"]
    pub uptime_seconds: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Status of the BGP peer: {UP, DOWN}"]
pub enum RouterStatusBgpPeerStatusStatusEnum {
    #[serde(rename = "DOWN")]
    #[doc = ""]
    Down,
    #[serde(rename = "UNKNOWN")]
    #[doc = ""]
    Unknown,
    #[serde(rename = "UP")]
    #[doc = ""]
    Up,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Status of a NAT contained in this router."]
pub struct RouterStatusNatStatus {
    #[serde(rename = "autoAllocatedNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of IPs auto-allocated for NAT. Example: [\"1.1.1.1\", \"129.2.16.89\"]"]
    pub auto_allocated_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "drainAutoAllocatedNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of IPs auto-allocated for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"]."]
    pub drain_auto_allocated_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "drainUserAllocatedNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of IPs user-allocated for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"]."]
    pub drain_user_allocated_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "minExtraNatIpsNeeded")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used."]
    pub min_extra_nat_ips_needed: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Unique name of this NAT."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "numVmEndpointsWithNatMappings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of VM endpoints (i.e., Nics) that can use NAT."]
    pub num_vm_endpoints_with_nat_mappings: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ruleStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Status of rules in this NAT."]
    pub rule_status: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<RouterStatusNatStatusNatRuleStatus>>,
    >,
    #[serde(rename = "userAllocatedNatIpResources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of fully qualified URLs of reserved IP address resources."]
    pub user_allocated_nat_ip_resources:
        ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "userAllocatedNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of IPs user-allocated for NAT. They will be raw IP strings like \"179.12.26.133\"."]
    pub user_allocated_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Status of a NAT Rule contained in this NAT."]
pub struct RouterStatusNatStatusNatRuleStatus {
    #[serde(rename = "activeNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of active IPs for NAT. Example: [\"1.1.1.1\", \"179.12.26.133\"]."]
    pub active_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "drainNatIps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of IPs for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"]."]
    pub drain_nat_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "minExtraIpsNeeded")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT."]
    pub min_extra_ips_needed: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numVmEndpointsWithNatMappings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule."]
    pub num_vm_endpoints_with_nat_mappings: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ruleNumber")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Rule number of the rule."]
    pub rule_number: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RouterStatusResponse {
    #[serde(rename = "kind")]
    #[serde(default = "router_status_response_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "result")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub result: ::std::option::Option<::std::boxed::Box<RouterStatus>>,
}
mod router_status_response_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#routerStatusResponse")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RoutersPreviewResponse {
    #[serde(rename = "resource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preview of given router."]
    pub resource: ::std::option::Option<::std::boxed::Box<Router>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RoutersScopedList {
    #[serde(rename = "routers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of routers contained in this scope."]
    pub routers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Router>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of routers when the list is empty."]
    pub warning: ::std::option::Option<RoutersScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of routers when the list is empty."]
pub struct RoutersScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<RoutersScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<RoutersScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum RoutersScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct RoutersScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A rule to be applied in a Policy."]
pub struct Rule {
    #[serde(rename = "action")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Required"]
    pub action: ::std::option::Option<RuleActionEnum>,
    #[serde(rename = "conditions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Additional restrictions that must be met. All conditions must pass for the rule to match."]
    pub conditions: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Condition>>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Human-readable description of the rule."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ins")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries."]
    pub ins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "logConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action."]
    pub log_configs: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<LogConfig>>>,
    #[serde(rename = "notIns")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries."]
    pub not_ins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "permissions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs."]
    pub permissions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Required"]
pub enum RuleActionEnum {
    #[serde(rename = "ALLOW")]
    #[doc = ""]
    Allow,
    #[serde(rename = "ALLOW_WITH_LOG")]
    #[doc = ""]
    AllowWithLog,
    #[serde(rename = "DENY")]
    #[doc = ""]
    Deny,
    #[serde(rename = "DENY_WITH_LOG")]
    #[doc = ""]
    DenyWithLog,
    #[serde(rename = "LOG")]
    #[doc = ""]
    Log,
    #[serde(rename = "NO_ACTION")]
    #[doc = ""]
    NoAction,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslHealthCheck {
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, SSL health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<SslHealthCheckPortSpecificationEnum>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<SslHealthCheckProxyHeaderEnum>,
    #[serde(rename = "request")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII."]
    pub request: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, SSL health check follows behavior specified in port and portName fields."]
pub enum SslHealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum SslHealthCheckProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An instance-attached disk resource."]
pub struct SavedAttachedDisk {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance)."]
    pub auto_delete: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "boot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem."]
    pub boot: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "deviceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the name of the disk attached to the source instance."]
    pub device_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The encryption key for the disk."]
    pub disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The size of the disk in base-2 GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the disk type resource. For example: projects/project/zones/zone/diskTypes/pd-standard or pd-ssd"]
    pub disk_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options."]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "index")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies zero-based index of the disk that is attached to the source instance."]
    pub index: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "interface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME."]
    pub interface: ::std::option::Option<SavedAttachedDiskInterfaceEnum>,
    #[serde(rename = "kind")]
    #[serde(default = "saved_attached_disk_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#attachedDisk for attached disks."]
    pub kind: ::std::string::String,
    #[serde(rename = "licenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Any valid publicly visible licenses."]
    pub licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "mode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY."]
    pub mode: ::std::option::Option<SavedAttachedDiskModeEnum>,
    #[serde(rename = "source")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a URL of the disk attached to the source instance."]
    pub source: ::std::option::Option<::std::string::String>,
    #[serde(rename = "storageBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A size of the storage used by the disk's snapshot by this machine image."]
    pub storage_bytes: ::std::option::Option<::std::string::String>,
    #[serde(rename = "storageBytesStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."]
    pub storage_bytes_status: ::std::option::Option<SavedAttachedDiskStorageBytesStatusEnum>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of the attached disk, either SCRATCH or PERSISTENT."]
    pub _type: ::std::option::Option<SavedAttachedDiskTypeEnum>,
}
mod saved_attached_disk_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#savedAttachedDisk")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME."]
pub enum SavedAttachedDiskInterfaceEnum {
    #[serde(rename = "NVDIMM")]
    #[doc = ""]
    Nvdimm,
    #[serde(rename = "NVME")]
    #[doc = ""]
    Nvme,
    #[serde(rename = "SCSI")]
    #[doc = ""]
    Scsi,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY."]
pub enum SavedAttachedDiskModeEnum {
    #[serde(rename = "READ_ONLY")]
    #[doc = ""]
    ReadOnly,
    #[serde(rename = "READ_WRITE")]
    #[doc = ""]
    ReadWrite,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."]
pub enum SavedAttachedDiskStorageBytesStatusEnum {
    #[serde(rename = "UPDATING")]
    #[doc = ""]
    Updating,
    #[serde(rename = "UP_TO_DATE")]
    #[doc = ""]
    UpToDate,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of the attached disk, either SCRATCH or PERSISTENT."]
pub enum SavedAttachedDiskTypeEnum {
    #[serde(rename = "PERSISTENT")]
    #[doc = ""]
    Persistent,
    #[serde(rename = "SCRATCH")]
    #[doc = ""]
    Scratch,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ScalingScheduleStatus {
    #[serde(rename = "lastStartTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is in RFC3339 text format."]
    pub last_start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "nextStartTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different. The timestamp is in RFC3339 text format."]
    pub next_start_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The current state of a scaling schedule."]
    pub state: ::std::option::Option<ScalingScheduleStatusStateEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The current state of a scaling schedule."]
pub enum ScalingScheduleStatusStateEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DISABLED")]
    #[doc = ""]
    Disabled,
    #[serde(rename = "OBSOLETE")]
    #[doc = ""]
    Obsolete,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Sets the scheduling options for an Instance. NextID: 17"]
pub struct Scheduling {
    #[serde(rename = "automaticRestart")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted.\n\nBy default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine."]
    pub automatic_restart: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "availabilityDomain")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the availability domain (AD), which this instance should be scheduled on. The AD belongs to the spread GroupPlacementPolicy resource policy that has been assigned to the instance. Specify a value between 1-max count of availability domains in your GroupPlacementPolicy. See go/placement-policy-extension for more details."]
    pub availability_domain: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "latencyTolerant")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance is tolerant of higher cpu latency. This can only be set during instance creation, or when the instance is not currently running. It must not be set if the preemptible option is also set."]
    pub latency_tolerant: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "locationHint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API."]
    pub location_hint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "maintenanceFreezeDurationHours")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the number of hours after instance creation where the instance won't be scheduled for maintenance."]
    pub maintenance_freeze_duration_hours: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "maintenanceInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies whether this VM may be a stable fleet VM. Setting this to \"Periodic\" designates this VM as a Stable Fleet VM.\n\nSee go/stable-fleet-ug for more details."]
    pub maintenance_interval: ::std::option::Option<SchedulingMaintenanceIntervalEnum>,
    #[serde(rename = "minNodeCpus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node."]
    pub min_node_cpus: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "nodeAffinities")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity."]
    pub node_affinities:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SchedulingNodeAffinity>>>,
    #[serde(rename = "onHostMaintenance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options."]
    pub on_host_maintenance: ::std::option::Option<SchedulingOnHostMaintenanceEnum>,
    #[serde(rename = "preemptible")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states."]
    pub preemptible: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies whether this VM may be a stable fleet VM. Setting this to \"Periodic\" designates this VM as a Stable Fleet VM.\n\nSee go/stable-fleet-ug for more details."]
pub enum SchedulingMaintenanceIntervalEnum {
    #[serde(rename = "PERIODIC")]
    #[doc = ""]
    Periodic,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options."]
pub enum SchedulingOnHostMaintenanceEnum {
    #[serde(rename = "MIGRATE")]
    #[doc = ""]
    Migrate,
    #[serde(rename = "TERMINATE")]
    #[doc = ""]
    Terminate,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled."]
pub struct SchedulingNodeAffinity {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Corresponds to the label key of Node resource."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "operator")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity."]
    pub operator: ::std::option::Option<SchedulingNodeAffinityOperatorEnum>,
    #[serde(rename = "values")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Corresponds to the label values of Node resource."]
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity."]
pub enum SchedulingNodeAffinityOperatorEnum {
    #[serde(rename = "IN")]
    #[doc = ""]
    In,
    #[serde(rename = "NOT_IN")]
    #[doc = ""]
    NotIn,
    #[serde(rename = "OPERATOR_UNSPECIFIED")]
    #[doc = ""]
    OperatorUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An instance's screenshot."]
pub struct Screenshot {
    #[serde(rename = "contents")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The Base64-encoded screenshot data."]
    pub contents: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "screenshot_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#screenshot for the screenshots."]
    pub kind: ::std::string::String,
}
mod screenshot_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#screenshot")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] The configuration to access the SDS server. The configuration to access the SDS server."]
pub struct SdsConfig {
    #[serde(rename = "grpcServiceConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configuration to access the SDS server over GRPC."]
    pub grpc_service_config: ::std::option::Option<::std::boxed::Box<GrpcServiceConfig>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPoliciesListPreconfiguredExpressionSetsResponse {
    #[serde(rename = "preconfiguredExpressionSets")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub preconfigured_expression_sets:
        ::std::option::Option<::std::boxed::Box<SecurityPoliciesWafConfig>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPoliciesWafConfig {
    #[serde(rename = "wafRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub waf_rules: ::std::option::Option<::std::boxed::Box<PreconfiguredWafSet>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Google Cloud Armor security policy resource.\n\nOnly external backend services that use load balancers can reference a security policy. For more information, see  Google Cloud Armor security policy overview. (== resource_for {$api_version}.securityPolicies ==)"]
pub struct SecurityPolicy {
    #[serde(rename = "adaptiveProtectionConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub adaptive_protection_config:
        ::std::option::Option<::std::boxed::Box<SecurityPolicyAdaptiveProtectionConfig>>,
    #[serde(rename = "associations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of associations that belong to this policy."]
    pub associations:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicyAssociation>>>,
    #[serde(rename = "cloudArmorConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub cloud_armor_config:
        ::std::option::Option<::std::boxed::Box<SecurityPolicyCloudArmorConfig>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User-provided name of the Organization security plicy. The name should be unique in the organization in which the security policy is created. This should only be used when SecurityPolicyType is FIREWALL. The name must be 1-63 characters long, and comply with https://www.ietf.org/rfc/rfc1035.txt. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make get() request to the security policy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "security_policy_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#securityPolicyfor security policies"]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this security policy, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.\n\nTo see the latest fingerprint, make get() request to the security policy."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "parent")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The parent of the security policy."]
    pub parent: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ruleTupleCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Total count of all security policy rule tuples. A security policy can not exceed a set number of tuples."]
    pub rule_tuple_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "rules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match \"*\"). If no rules are provided when creating a security policy, a default rule with action \"allow\" will be added."]
    pub rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicyRule>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type indicates the intended use of the security policy. CLOUD_ARMOR policies apply to backend services. FIREWALL policies apply to organizations."]
    pub _type: ::std::option::Option<SecurityPolicyTypeEnum>,
}
mod security_policy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#securityPolicy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type indicates the intended use of the security policy. CLOUD_ARMOR policies apply to backend services. FIREWALL policies apply to organizations."]
pub enum SecurityPolicyTypeEnum {
    #[serde(rename = "CLOUD_ARMOR")]
    #[doc = ""]
    CloudArmor,
    #[serde(rename = "CLOUD_ARMOR_EDGE")]
    #[doc = ""]
    CloudArmorEdge,
    #[serde(rename = "FIREWALL")]
    #[doc = ""]
    Firewall,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration options for Cloud Armor Adaptive Protection (CAAP)."]
pub struct SecurityPolicyAdaptiveProtectionConfig {
    #[serde(rename = "layer7DdosDefenseConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, enables Cloud Armor Machine Learning."]
    pub layer7_ddos_defense_config: ::std::option::Option<
        ::std::boxed::Box<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration options for L7 DDoS detection."]
pub struct SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, enables CAAP for L7 DDoS detection."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "ruleVisibility")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules."]
    pub rule_visibility: ::std::option::Option<
        SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules."]
pub enum SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum {
    #[serde(rename = "PREMIUM")]
    #[doc = ""]
    Premium,
    #[serde(rename = "STANDARD")]
    #[doc = ""]
    Standard,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyAssociation {
    #[serde(rename = "attachmentId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The resource that the security policy is attached to."]
    pub attachment_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The display name of the security policy of the association."]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name for an association."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "securityPolicyId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The security policy ID of the association."]
    pub security_policy_id: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration options for Cloud Armor."]
pub struct SecurityPolicyCloudArmorConfig {
    #[serde(rename = "enableMl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, enables Cloud Armor Machine Learning."]
    pub enable_ml: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of SecurityPolicy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SecurityPolicy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "security_policy_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies"]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SecurityPolicyListWarning>,
}
mod security_policy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#securityPolicyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SecurityPolicyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SecurityPolicyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SecurityPolicyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SecurityPolicyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyReference {
    #[serde(rename = "securityPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub security_policy: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny)."]
pub struct SecurityPolicyRule {
    #[serde(rename = "action")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The Action to preform when the client connection triggers the rule. Can currently be either \"allow\" or \"deny()\" where valid values for status are 403, 404, and 502."]
    pub action: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "direction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL."]
    pub direction: ::std::option::Option<SecurityPolicyRuleDirectionEnum>,
    #[serde(rename = "enableLogging")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on \"goto_next\" rules.\n\nThis field may only be specified when the versioned_expr is set to FIREWALL."]
    pub enable_logging: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "kind")]
    #[serde(default = "security_policy_rule_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules"]
    pub kind: ::std::string::String,
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced."]
    pub _match: ::std::option::Option<::std::boxed::Box<SecurityPolicyRuleMatcher>>,
    #[serde(rename = "preview")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If set to true, the specified action is not enforced."]
    pub preview: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority."]
    pub priority: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "rateLimitOptions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Must be specified if the action is \"rate_based_ban\" or \"throttle\". Cannot be specified for any other actions."]
    pub rate_limit_options:
        ::std::option::Option<::std::boxed::Box<SecurityPolicyRuleRateLimitOptions>>,
    #[serde(rename = "redirectTarget")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This must be specified for redirect actions. Cannot be specified for any other actions."]
    pub redirect_target: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ruleNumber")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Identifier for the rule. This is only unique within the given security policy. This can only be set during rule creation, if rule number is not specified it will be generated by the server."]
    pub rule_number: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ruleTupleCount")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Calculation of the complexity of a single firewall security policy rule."]
    pub rule_tuple_count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "targetResources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub target_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "targetServiceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts indicating the sets of instances that are applied with this rule."]
    pub target_service_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod security_policy_rule_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#securityPolicyRule")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL."]
pub enum SecurityPolicyRuleDirectionEnum {
    #[serde(rename = "EGRESS")]
    #[doc = ""]
    Egress,
    #[serde(rename = "INGRESS")]
    #[doc = ""]
    Ingress,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified."]
pub struct SecurityPolicyRuleMatcher {
    #[serde(rename = "config")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified."]
    pub config: ::std::option::Option<::std::boxed::Box<SecurityPolicyRuleMatcherConfig>>,
    #[serde(rename = "expr")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header."]
    pub expr: ::std::option::Option<::std::boxed::Box<Expr>>,
    #[serde(rename = "versionedExpr")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config."]
    pub versioned_expr: ::std::option::Option<SecurityPolicyRuleMatcherVersionedExprEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config."]
pub enum SecurityPolicyRuleMatcherVersionedExprEnum {
    #[serde(rename = "FIREWALL")]
    #[doc = ""]
    Firewall,
    #[serde(rename = "SRC_IPS_V1")]
    #[doc = ""]
    SrcIpsV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyRuleMatcherConfig {
    #[serde(rename = "destIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CIDR IP address range.\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub dest_ip_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "destPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Pairs of IP protocols and ports that the rule should match.\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub dest_ports: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<SecurityPolicyRuleMatcherConfigDestinationPort>>,
    >,
    #[serde(rename = "layer4Configs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Pairs of IP protocols and ports that the rule should match.\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub layer4_configs: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<SecurityPolicyRuleMatcherConfigLayer4Config>>,
    >,
    #[serde(rename = "srcIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "CIDR IP address range. Maximum number of src_ip_ranges allowed is 10."]
    pub src_ip_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyRuleMatcherConfigDestinationPort {
    #[serde(rename = "ipProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number."]
    pub ip_protocol: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyRuleMatcherConfigLayer4Config {
    #[serde(rename = "ipProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number."]
    pub ip_protocol: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ports")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].\n\nThis field may only be specified when versioned_expr is set to FIREWALL."]
    pub ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyRuleRateLimitOptions {
    #[serde(rename = "banDurationSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if the action for the rule is \"rate_based_ban\". If specified, the key will be banned for the configured 'ban_duration' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'."]
    pub ban_duration_sec: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "banThreshold")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if the action for the rule is \"rate_based_ban\". If specified, the key will be banned for the configured 'ban_duration' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'."]
    pub ban_threshold:
        ::std::option::Option<::std::boxed::Box<SecurityPolicyRuleRateLimitOptionsThreshold>>,
    #[serde(rename = "blockDuration")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if the action for the rule is \"rate_based_ban\" If specified, determines the time (in seconds) the traffic will continue to be blocked by the rate limit after the rate falls below the threshold. The default value is 0 seconds. [Deprecated] This field is deprecated."]
    pub block_duration: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "conformAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Action to take when requests are under the given threshold. When requests are throttled, this is also the action for all requests which are not dropped. Valid options are \"allow\", \"fairshare\", and \"drop_overload\"."]
    pub conform_action: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enforceOnKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Determines the key to enforce the threshold_rps limit on. If key is \"IP\", each IP has this limit enforced separately, whereas \"ALL_IPs\" means a single limit is applied to all requests matching this rule."]
    pub enforce_on_key: ::std::option::Option<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyEnum>,
    #[serde(rename = "exceedAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "When a request is denied, returns the HTTP response code specified. Valid options are \"deny()\" where valid values for status are 403, 404, 429, and 502."]
    pub exceed_action: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rateLimitThreshold")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Threshold at which to begin ratelimiting."]
    pub rate_limit_threshold:
        ::std::option::Option<::std::boxed::Box<SecurityPolicyRuleRateLimitOptionsThreshold>>,
    #[serde(rename = "thresholdRps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Rate in requests per second at which to begin ratelimiting. [Deprecated] This field is deprecated."]
    pub threshold_rps: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Determines the key to enforce the threshold_rps limit on. If key is \"IP\", each IP has this limit enforced separately, whereas \"ALL_IPs\" means a single limit is applied to all requests matching this rule."]
pub enum SecurityPolicyRuleRateLimitOptionsEnforceOnKeyEnum {
    #[serde(rename = "ALL_IPS")]
    #[doc = ""]
    AllIps,
    #[serde(rename = "IP")]
    #[doc = ""]
    Ip,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SecurityPolicyRuleRateLimitOptionsThreshold {
    #[serde(rename = "count")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Number of HTTP(S) requests for calculating the threshold."]
    pub count: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "intervalSec")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Interval over which the threshold is computed."]
    pub interval_sec: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The authentication and authorization settings for a BackendService."]
pub struct SecuritySettings {
    #[serde(rename = "authentication")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Use clientTlsPolicy instead."]
    pub authentication: ::std::option::Option<::std::string::String>,
    #[serde(rename = "authenticationPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal."]
    pub authentication_policy: ::std::option::Option<::std::boxed::Box<AuthenticationPolicy>>,
    #[serde(rename = "authorizationConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config."]
    pub authorization_config: ::std::option::Option<::std::boxed::Box<AuthorizationConfig>>,
    #[serde(rename = "clientTlsPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends.\nclientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED.\nIf left blank, communications are not encrypted.\nNote: This field currently has no impact."]
    pub client_tls_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "clientTlsSettings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] TLS Settings for the backend service."]
    pub client_tls_settings: ::std::option::Option<::std::boxed::Box<ClientTlsSettings>>,
    #[serde(rename = "subjectAltNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service.\nNote that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities.\nOnly applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode).\nNote: This field currently has no impact."]
    pub subject_alt_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An instance's serial console output."]
pub struct SerialPortOutput {
    #[serde(rename = "contents")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The contents of the console output."]
    pub contents: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "serial_port_output_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#serialPortOutput for serial port output."]
    pub kind: ::std::string::String,
    #[serde(rename = "next")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the `contents` property. Use this value in the next request as the start parameter."]
    pub next: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "start")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the `start` value that was specified in the request."]
    pub start: ::std::option::Option<::std::string::String>,
}
mod serial_port_output_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#serialPortOutput")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServerBinding {
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub _type: ::std::option::Option<ServerBindingTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum ServerBindingTypeEnum {
    #[serde(rename = "RESTART_NODE_ON_ANY_SERVER")]
    #[doc = ""]
    RestartNodeOnAnyServer,
    #[serde(rename = "RESTART_NODE_ON_MINIMAL_SERVERS")]
    #[doc = ""]
    RestartNodeOnMinimalServers,
    #[serde(rename = "SERVER_BINDING_TYPE_UNSPECIFIED")]
    #[doc = ""]
    ServerBindingTypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The TLS settings for the server."]
pub struct ServerTlsSettings {
    #[serde(rename = "proxyTlsContext")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configures the mechanism to obtain security certificates and identity information."]
    pub proxy_tls_context: ::std::option::Option<::std::boxed::Box<TlsContext>>,
    #[serde(rename = "subjectAltNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of alternate names to verify the subject identity in the certificate presented by the client."]
    pub subject_alt_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "tlsMode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following:  \n- SIMPLE Secure connections with standard TLS semantics.  \n- MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication."]
    pub tls_mode: ::std::option::Option<ServerTlsSettingsTlsModeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following:  \n- SIMPLE Secure connections with standard TLS semantics.  \n- MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication."]
pub enum ServerTlsSettingsTlsModeEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "MUTUAL")]
    #[doc = ""]
    Mutual,
    #[serde(rename = "SIMPLE")]
    #[doc = ""]
    Simple,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A service account."]
pub struct ServiceAccount {
    #[serde(rename = "email")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Email address of the service account."]
    pub email: ::std::option::Option<::std::string::String>,
    #[serde(rename = "scopes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of scopes to be made available for this service account."]
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a ServiceAttachment resource.\n\nA service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service. next tag = 16"]
pub struct ServiceAttachment {
    #[serde(rename = "connectionPreference")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules."]
    pub connection_preference: ::std::option::Option<ServiceAttachmentConnectionPreferenceEnum>,
    #[serde(rename = "consumerForwardingRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An array of forwarding rules for all the consumers connected to this service attachment."]
    pub consumer_forwarding_rules: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<ServiceAttachmentConsumerForwardingRule>>,
    >,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enableProxyProtocol")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers."]
    pub enable_proxy_protocol: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "service_attachment_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#serviceAttachment for service attachments."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "natSubnets")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment."]
    pub nat_subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "producerForwardingRule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment."]
    pub producer_forwarding_rule: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
}
mod service_attachment_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#serviceAttachment")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules."]
pub enum ServiceAttachmentConnectionPreferenceEnum {
    #[serde(rename = "ACCEPT_AUTOMATIC")]
    #[doc = ""]
    AcceptAutomatic,
    #[serde(rename = "CONNECTION_PREFERENCE_UNSPECIFIED")]
    #[doc = ""]
    ConnectionPreferenceUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of ServiceAttachmentsScopedList."]
pub struct ServiceAttachmentAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ServiceAttachmentsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<ServiceAttachmentsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "service_attachment_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ServiceAttachmentAggregatedListWarning>,
}
mod service_attachment_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#serviceAttachmentAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ServiceAttachmentAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ServiceAttachmentAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ServiceAttachmentAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ServiceAttachmentAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceAttachmentAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] A consumer forwarding rule connected to this service attachment."]
pub struct ServiceAttachmentConsumerForwardingRule {
    #[serde(rename = "forwardingRule")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The url of a consumer forwarding rule."]
    pub forwarding_rule: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The status of the forwarding rule."]
    pub status: ::std::option::Option<ServiceAttachmentConsumerForwardingRuleStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The status of the forwarding rule."]
pub enum ServiceAttachmentConsumerForwardingRuleStatusEnum {
    #[serde(rename = "ACCEPTED")]
    #[doc = ""]
    Accepted,
    #[serde(rename = "PENDING")]
    #[doc = ""]
    Pending,
    #[serde(rename = "REJECTED")]
    #[doc = ""]
    Rejected,
    #[serde(rename = "STATUS_UNSPECIFIED")]
    #[doc = ""]
    StatusUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceAttachmentList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ServiceAttachment resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ServiceAttachment>>>,
    #[serde(rename = "kind")]
    #[serde(default = "service_attachment_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#serviceAttachment for service attachments."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ServiceAttachmentListWarning>,
}
mod service_attachment_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#serviceAttachmentList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ServiceAttachmentListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ServiceAttachmentListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ServiceAttachmentListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ServiceAttachmentListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceAttachmentListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceAttachmentsScopedList {
    #[serde(rename = "resources")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of ServiceAttachments contained in this scope."]
    pub resources: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ServiceAttachment>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of service attachments when the list is empty."]
    pub warning: ::std::option::Option<ServiceAttachmentsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of service attachments when the list is empty."]
pub struct ServiceAttachmentsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ServiceAttachmentsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ServiceAttachmentsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ServiceAttachmentsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceAttachmentsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A set of Shielded Instance options."]
pub struct ShieldedInstanceConfig {
    #[serde(rename = "enableIntegrityMonitoring")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has integrity monitoring enabled. Enabled by default."]
    pub enable_integrity_monitoring: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableSecureBoot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has Secure Boot enabled. Disabled by default."]
    pub enable_secure_boot: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableVtpm")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has the vTPM enabled. Enabled by default."]
    pub enable_vtpm: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A shielded Instance identity entry."]
pub struct ShieldedInstanceIdentity {
    #[serde(rename = "encryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An Endorsement Key (EK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM."]
    pub encryption_key: ::std::option::Option<::std::boxed::Box<ShieldedInstanceIdentityEntry>>,
    #[serde(rename = "kind")]
    #[serde(default = "shielded_instance_identity_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry."]
    pub kind: ::std::string::String,
    #[serde(rename = "signingKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An Attestation Key (AK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM."]
    pub signing_key: ::std::option::Option<::std::boxed::Box<ShieldedInstanceIdentityEntry>>,
}
mod shielded_instance_identity_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#shieldedInstanceIdentity")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A Shielded Instance Identity Entry."]
pub struct ShieldedInstanceIdentityEntry {
    #[serde(rename = "ekCert")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A PEM-encoded X.509 certificate. This field can be empty."]
    pub ek_cert: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ekPub")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A PEM-encoded public key."]
    pub ek_pub: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The policy describes the baseline against which Instance boot integrity is measured."]
pub struct ShieldedInstanceIntegrityPolicy {
    #[serde(rename = "updateAutoLearnPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Updates the integrity policy baseline using the measurements from the VM instance's most recent boot."]
    pub update_auto_learn_policy: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A set of Shielded VM options."]
pub struct ShieldedVmConfig {
    #[serde(rename = "enableIntegrityMonitoring")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has integrity monitoring enabled."]
    pub enable_integrity_monitoring: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableSecureBoot")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has Secure Boot enabled."]
    pub enable_secure_boot: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableVtpm")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines whether the instance has the vTPM enabled."]
    pub enable_vtpm: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A shielded VM identity entry."]
pub struct ShieldedVmIdentity {
    #[serde(rename = "encryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An Endorsement Key (EK) issued to the Shielded VM's vTPM."]
    pub encryption_key: ::std::option::Option<::std::boxed::Box<ShieldedVmIdentityEntry>>,
    #[serde(rename = "kind")]
    #[serde(default = "shielded_vm_identity_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#shieldedVmIdentity for shielded VM identity entry."]
    pub kind: ::std::string::String,
    #[serde(rename = "signingKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An Attestation Key (AK) issued to the Shielded VM's vTPM."]
    pub signing_key: ::std::option::Option<::std::boxed::Box<ShieldedVmIdentityEntry>>,
}
mod shielded_vm_identity_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#shieldedVmIdentity")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A Shielded Instance Identity Entry."]
pub struct ShieldedVmIdentityEntry {
    #[serde(rename = "ekCert")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A PEM-encoded X.509 certificate. This field can be empty."]
    pub ek_cert: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ekPub")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A PEM-encoded public key."]
    pub ek_pub: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The policy describes the baseline against which VM instance boot integrity is measured."]
pub struct ShieldedVmIntegrityPolicy {
    #[serde(rename = "updateAutoLearnPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Updates the integrity policy baseline using the measurements from the VM instance's most recent boot."]
    pub update_auto_learn_policy: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs"]
pub struct SignedUrlKey {
    #[serde(rename = "keyName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub key_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "keyValue")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string."]
    pub key_value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Persistent Disk Snapshot resource.\n\nYou can use snapshots to back up data on a regular interval. For more information, read  Creating persistent disk snapshots. (== resource_for {$api_version}.snapshots ==)"]
pub struct Snapshot {
    #[serde(rename = "autoCreated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk."]
    pub auto_created: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "chainName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value."]
    pub chain_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "diskSizeGb")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Size of the source disk, specified in GB."]
    pub disk_size_gb: ::std::option::Option<::std::string::String>,
    #[serde(rename = "downloadBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Number of bytes downloaded to restore a snapshot to a disk."]
    pub download_bytes: ::std::option::Option<::std::string::String>,
    #[serde(rename = "guestFlush")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS)."]
    pub guest_flush: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "guestOsFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options."]
    pub guest_os_features:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<GuestOsFeature>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "snapshot_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#snapshot for Snapshot resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a snapshot."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "licenseCodes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Integer license codes indicating which licenses are attached to this snapshot."]
    pub license_codes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "licenses")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image)."]
    pub licenses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "locationHint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API."]
    pub location_hint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "satisfiesPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub satisfies_pzs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource's resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "snapshotEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Encrypts the snapshot using a customer-supplied encryption key.\n\nAfter you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request.\n\nCustomer-supplied encryption keys do not protect access to metadata of the snapshot.\n\nIf you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later."]
    pub snapshot_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The source disk used to create this snapshot."]
    pub source_disk: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceDiskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key."]
    pub source_disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceDiskId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name."]
    pub source_disk_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING."]
    pub status: ::std::option::Option<SnapshotStatusEnum>,
    #[serde(rename = "storageBytes")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion."]
    pub storage_bytes: ::std::option::Option<::std::string::String>,
    #[serde(rename = "storageBytesStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."]
    pub storage_bytes_status: ::std::option::Option<SnapshotStorageBytesStatusEnum>,
    #[serde(rename = "storageLocations")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Cloud Storage bucket storage location of the snapshot (regional or multi-regional)."]
    pub storage_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod snapshot_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#snapshot")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING."]
pub enum SnapshotStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
    #[serde(rename = "UPLOADING")]
    #[doc = ""]
    Uploading,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."]
pub enum SnapshotStorageBytesStatusEnum {
    #[serde(rename = "UPDATING")]
    #[doc = ""]
    Updating,
    #[serde(rename = "UP_TO_DATE")]
    #[doc = ""]
    UpToDate,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Snapshot resources."]
pub struct SnapshotList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Snapshot resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Snapshot>>>,
    #[serde(rename = "kind")]
    #[serde(default = "snapshot_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SnapshotListWarning>,
}
mod snapshot_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#snapshotList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SnapshotListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SnapshotListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SnapshotListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SnapshotListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SnapshotListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SourceDiskEncryptionKey {
    #[serde(rename = "diskEncryptionKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key."]
    pub disk_encryption_key: ::std::option::Option<::std::boxed::Box<CustomerEncryptionKey>>,
    #[serde(rename = "sourceDisk")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk \n- projects/project/zones/zone/disks/disk \n- zones/zone/disks/disk"]
    pub source_disk: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A specification of the parameters to use when creating the instance template from a source instance."]
pub struct SourceInstanceParams {
    #[serde(rename = "diskConfigs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes."]
    pub disk_configs:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<DiskInstantiationConfig>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = ""]
pub struct SourceInstanceProperties {
    #[serde(rename = "canIpForward")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information."]
    pub can_ip_forward: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "deletionProtection")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the instance created from this machine image should be protected against deletion."]
    pub deletion_protection: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional text description for the instances that are created from this machine image."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of disks that are associated with the instances that are created from this machine image."]
    pub disks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SavedAttachedDisk>>>,
    #[serde(rename = "guestAccelerators")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of guest accelerator cards' type and count to use for instances created from this machine image."]
    pub guest_accelerators:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<AcceleratorConfig>>>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels to apply to instances that are created from this machine image."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "machineType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The machine type to use for instances that are created from this machine image."]
    pub machine_type: ::std::option::Option<::std::string::String>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information."]
    pub metadata: ::std::option::Option<::std::boxed::Box<Metadata>>,
    #[serde(rename = "minCpuPlatform")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\". For more information, read Specifying a Minimum CPU Platform."]
    pub min_cpu_platform: ::std::option::Option<::std::string::String>,
    #[serde(rename = "networkInterfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of network access configurations for this interface."]
    pub network_interfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<NetworkInterface>>>,
    #[serde(rename = "postKeyRevocationActionType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "PostKeyRevocationActionType of the instance."]
    pub post_key_revocation_action_type:
        ::std::option::Option<SourceInstancePropertiesPostKeyRevocationActionTypeEnum>,
    #[serde(rename = "scheduling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the scheduling options for the instances that are created from this machine image."]
    pub scheduling: ::std::option::Option<::std::boxed::Box<Scheduling>>,
    #[serde(rename = "serviceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances."]
    pub service_accounts: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<ServiceAccount>>>,
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035."]
    pub tags: ::std::option::Option<::std::boxed::Box<Tags>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "PostKeyRevocationActionType of the instance."]
pub enum SourceInstancePropertiesPostKeyRevocationActionTypeEnum {
    #[serde(rename = "NOOP")]
    #[doc = ""]
    Noop,
    #[serde(rename = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    #[doc = ""]
    PostKeyRevocationActionTypeUnspecified,
    #[serde(rename = "SHUTDOWN")]
    #[doc = ""]
    Shutdown,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an SSL Certificate resource.\n\nGoogle Compute Engine has two SSL Certificate resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/sslCertificates) * [Regional](/compute/docs/reference/rest/{$api_version}/regionSslCertificates)\n\n\n\nThe sslCertificates are used by:  \n- external HTTPS load balancers \n- SSL proxy load balancers  \n\nThe regionSslCertificates are used by internal HTTPS load balancers.\n\nOptionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read  Creating and using SSL certificates, SSL certificates quotas and limits, and  Troubleshooting SSL certificates. (== resource_for {$api_version}.sslCertificates ==) (== resource_for {$api_version}.regionSslCertificates ==)"]
pub struct SslCertificate {
    #[serde(rename = "certificate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert."]
    pub certificate: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expireTime")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Expire time of the certificate. RFC3339"]
    pub expire_time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "ssl_certificate_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates."]
    pub kind: ::std::string::String,
    #[serde(rename = "managed")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configuration and status of a managed SSL certificate."]
    pub managed: ::std::option::Option<::std::boxed::Box<SslCertificateManagedSslCertificate>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field."]
    pub private_key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfManaged")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Configuration and status of a self-managed SSL certificate."]
    pub self_managed:
        ::std::option::Option<::std::boxed::Box<SslCertificateSelfManagedSslCertificate>>,
    #[serde(rename = "subjectAlternativeNames")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Domains associated with the certificate via Subject Alternative Name."]
    pub subject_alternative_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "(Optional) Specifies the type of SSL certificate, either \"SELF_MANAGED\" or \"MANAGED\". If not specified, the certificate is self-managed and the fields certificate and private_key are used."]
    pub _type: ::std::option::Option<SslCertificateTypeEnum>,
}
mod ssl_certificate_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#sslCertificate")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "(Optional) Specifies the type of SSL certificate, either \"SELF_MANAGED\" or \"MANAGED\". If not specified, the certificate is self-managed and the fields certificate and private_key are used."]
pub enum SslCertificateTypeEnum {
    #[serde(rename = "MANAGED")]
    #[doc = ""]
    Managed,
    #[serde(rename = "SELF_MANAGED")]
    #[doc = ""]
    SelfManaged,
    #[serde(rename = "TYPE_UNSPECIFIED")]
    #[doc = ""]
    TypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslCertificateAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of SslCertificatesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<SslCertificatesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "ssl_certificate_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SslCertificateAggregatedListWarning>,
}
mod ssl_certificate_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#sslCertificateAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SslCertificateAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SslCertificateAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SslCertificateAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SslCertificateAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslCertificateAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of SslCertificate resources."]
pub struct SslCertificateList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of SslCertificate resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SslCertificate>>>,
    #[serde(rename = "kind")]
    #[serde(default = "ssl_certificate_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SslCertificateListWarning>,
}
mod ssl_certificate_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#sslCertificateList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SslCertificateListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SslCertificateListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SslCertificateListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SslCertificateListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslCertificateListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration and status of a managed SSL certificate."]
pub struct SslCertificateManagedSslCertificate {
    #[serde(rename = "domainStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Detailed statuses of the domains specified for managed certificate resource."]
    pub domain_status: ::std::option::Option<
        ::std::collections::BTreeMap<String, SslCertificateManagedSslCertificateDomainStatusEnum>,
    >,
    #[serde(rename = "domains")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates)."]
    pub domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output only] Status of the managed certificate resource."]
    pub status: ::std::option::Option<SslCertificateManagedSslCertificateStatusEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum SslCertificateManagedSslCertificateDomainStatusEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "DOMAIN_STATUS_UNSPECIFIED")]
    #[doc = ""]
    DomainStatusUnspecified,
    #[serde(rename = "FAILED_CAA_CHECKING")]
    #[doc = ""]
    FailedCaaChecking,
    #[serde(rename = "FAILED_CAA_FORBIDDEN")]
    #[doc = ""]
    FailedCaaForbidden,
    #[serde(rename = "FAILED_NOT_VISIBLE")]
    #[doc = ""]
    FailedNotVisible,
    #[serde(rename = "FAILED_RATE_LIMITED")]
    #[doc = ""]
    FailedRateLimited,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output only] Status of the managed certificate resource."]
pub enum SslCertificateManagedSslCertificateStatusEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "MANAGED_CERTIFICATE_STATUS_UNSPECIFIED")]
    #[doc = ""]
    ManagedCertificateStatusUnspecified,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
    #[serde(rename = "PROVISIONING_FAILED")]
    #[doc = ""]
    ProvisioningFailed,
    #[serde(rename = "PROVISIONING_FAILED_PERMANENTLY")]
    #[doc = ""]
    ProvisioningFailedPermanently,
    #[serde(rename = "RENEWAL_FAILED")]
    #[doc = ""]
    RenewalFailed,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration and status of a self-managed SSL certificate."]
pub struct SslCertificateSelfManagedSslCertificate {
    #[serde(rename = "certificate")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert."]
    pub certificate: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateKey")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A write-only private key in PEM format. Only insert requests will include this field."]
    pub private_key: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslCertificatesScopedList {
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of SslCertificates contained in this scope."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SslCertificate>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<SslCertificatesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct SslCertificatesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SslCertificatesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SslCertificatesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SslCertificatesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslCertificatesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPoliciesList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of SslPolicy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SslPolicy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "ssl_policies_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SslPoliciesListWarning>,
}
mod ssl_policies_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#sslPoliciesList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SslPoliciesListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SslPoliciesListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SslPoliciesListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SslPoliciesListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPoliciesListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPoliciesListAvailableFeaturesResponse {
    #[serde(rename = "features")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub features: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents an SSL Policy resource.\n\nUse SSL policies to control the SSL features, such as versions and cipher suites, offered by an HTTPS or SSL Proxy load balancer. For more information, read  SSL Policy Concepts. (== resource_for {$api_version}.sslPolicies ==)"]
pub struct SslPolicy {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "customFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of features enabled when the selected profile is CUSTOM. The\n- method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM."]
    pub custom_features: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enabledFeatures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The list of features enabled in the SSL policy."]
    pub enabled_features: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an SslPolicy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "ssl_policy_defaults :: kind")]
    #[doc = "[Output only] Type of the resource. Always compute#sslPolicyfor SSL policies."]
    pub kind: ::std::string::String,
    #[serde(rename = "minTlsVersion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2."]
    pub min_tls_version: ::std::option::Option<SslPolicyMinTlsVersionEnum>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "profile")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field."]
    pub profile: ::std::option::Option<SslPolicyProfileEnum>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tlsSettings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Security settings for the proxy. This field is only applicable to a global backend service with the loadBalancingScheme set to INTERNAL_SELF_MANAGED."]
    pub tls_settings: ::std::option::Option<::std::boxed::Box<ServerTlsSettings>>,
    #[serde(rename = "warnings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages."]
    pub warnings: ::std::option::Option<::std::vec::Vec<SslPolicyWarnings>>,
}
mod ssl_policy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#sslPolicy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2."]
pub enum SslPolicyMinTlsVersionEnum {
    #[serde(rename = "TLS_1_0")]
    #[doc = ""]
    Tls10,
    #[serde(rename = "TLS_1_1")]
    #[doc = ""]
    Tls11,
    #[serde(rename = "TLS_1_2")]
    #[doc = ""]
    Tls12,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field."]
pub enum SslPolicyProfileEnum {
    #[serde(rename = "COMPATIBLE")]
    #[doc = ""]
    Compatible,
    #[serde(rename = "CUSTOM")]
    #[doc = ""]
    Custom,
    #[serde(rename = "MODERN")]
    #[doc = ""]
    Modern,
    #[serde(rename = "RESTRICTED")]
    #[doc = ""]
    Restricted,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPolicyWarnings {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SslPolicyWarningsCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SslPolicyWarningsData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SslPolicyWarningsCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPolicyWarningsData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SslPolicyReference {
    #[serde(rename = "sslPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource."]
    pub ssl_policy: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct StatefulPolicy {
    #[serde(rename = "preservedState")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub preserved_state: ::std::option::Option<::std::boxed::Box<StatefulPolicyPreservedState>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Configuration of preserved resources."]
pub struct StatefulPolicyPreservedState {
    #[serde(rename = "disks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks."]
    pub disks: ::std::option::Option<
        ::std::collections::BTreeMap<
            String,
            ::std::boxed::Box<StatefulPolicyPreservedStateDiskDevice>,
        >,
    >,
    #[serde(rename = "externalIPs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name."]
    pub external_i_ps: ::std::option::Option<
        ::std::collections::BTreeMap<
            String,
            ::std::boxed::Box<StatefulPolicyPreservedStateNetworkIp>,
        >,
    >,
    #[serde(rename = "internalIPs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name."]
    pub internal_i_ps: ::std::option::Option<
        ::std::collections::BTreeMap<
            String,
            ::std::boxed::Box<StatefulPolicyPreservedStateNetworkIp>,
        >,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct StatefulPolicyPreservedStateDiskDevice {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted."]
    pub auto_delete: ::std::option::Option<StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted."]
pub enum StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum {
    #[serde(rename = "NEVER")]
    #[doc = ""]
    Never,
    #[serde(rename = "ON_PERMANENT_INSTANCE_DELETION")]
    #[doc = ""]
    OnPermanentInstanceDeletion,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct StatefulPolicyPreservedStateNetworkIp {
    #[serde(rename = "autoDelete")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted."]
    pub auto_delete: ::std::option::Option<StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted."]
pub enum StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum {
    #[serde(rename = "NEVER")]
    #[doc = ""]
    Never,
    #[serde(rename = "ON_PERMANENT_INSTANCE_DELETION")]
    #[doc = ""]
    OnPermanentInstanceDeletion,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Subnetwork resource.\n\nA subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read  Virtual Private Cloud (VPC) Network. (== resource_for {$api_version}.subnetworks ==)"]
pub struct Subnetwork {
    #[serde(rename = "aggregationInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN."]
    pub aggregation_interval: ::std::option::Option<SubnetworkAggregationIntervalEnum>,
    #[serde(rename = "allowSubnetCidrRoutesOverlap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether this subnetwork can conflict with static routes. Setting this to true allows this subnetwork's primary and secondary ranges to conflict with routes that have already been configured on the corresponding network. Static routes will take precedence over the subnetwork route if the route prefix length is at least as large as the subnetwork prefix length.\n\nAlso, packets destined to IPs within subnetwork may contain private/sensitive data and are prevented from leaving the virtual network. Setting this field to true will disable this feature.\n\nThe default value is false and applies to all existing subnetworks and automatically created subnetworks.\n\nThis field cannot be set to true at resource creation time."]
    pub allow_subnet_cidr_routes_overlap: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "enableFlowLogs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER."]
    pub enable_flow_logs: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enableL2")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Enables Layer2 communication on the subnetwork."]
    pub enable_l2: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "enablePrivateV6Access")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch."]
    pub enable_private_v6_access: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "externalIpv6Prefix")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The range of external IPv6 addresses that are owned by this subnetwork."]
    pub external_ipv6_prefix: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a Subnetwork."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "flowSampling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported."]
    pub flow_sampling: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "gatewayAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork."]
    pub gateway_address: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipv6AccessType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet cannot enable direct path."]
    pub ipv6_access_type: ::std::option::Option<SubnetworkIpv6AccessTypeEnum>,
    #[serde(rename = "ipv6CidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The range of internal IPv6 addresses that are owned by this subnetwork."]
    pub ipv6_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "subnetwork_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources."]
    pub kind: ::std::string::String,
    #[serde(rename = "logConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging."]
    pub log_config: ::std::option::Option<::std::boxed::Box<SubnetworkLogConfig>>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Options are INCLUDE_ALL_METADATA, EXCLUDE_ALL_METADATA, and CUSTOM_METADATA. Default is INCLUDE_ALL_METADATA."]
    pub metadata: ::std::option::Option<SubnetworkMetadataEnum>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateIpGoogleAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess."]
    pub private_ip_google_access: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "privateIpv6GoogleAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.\n\nThis field can be both set at resource creation time and updated using patch."]
    pub private_ipv6_google_access: ::std::option::Option<SubnetworkPrivateIpv6GoogleAccessEnum>,
    #[serde(rename = "privateIpv6GoogleAccessServiceAccounts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Deprecated in favor of enable PrivateIpv6GoogleAccess on instance directly. The service accounts can be used to selectively turn on Private IPv6 Google Access only on the VMs primary service account matching the value. This value only takes effect when PrivateIpv6GoogleAccess is ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS or ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS."]
    pub private_ipv6_google_access_service_accounts:
        ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "purpose")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER."]
    pub purpose: ::std::option::Option<SubnetworkPurposeEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the region where the Subnetwork resides. This field can be set only at resource creation time."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "role")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request."]
    pub role: ::std::option::Option<SubnetworkRoleEnum>,
    #[serde(rename = "secondaryIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request."]
    pub secondary_ip_ranges:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<SubnetworkSecondaryRange>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "stackType")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The stack type for this subnet to identify whether the IPv6 feature is enabled or not. If not specified IPV4_ONLY will be used.\n\nThis field can be both set at resource creation time and updated using patch."]
    pub stack_type: ::std::option::Option<SubnetworkStackTypeEnum>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated"]
    pub state: ::std::option::Option<SubnetworkStateEnum>,
    #[serde(rename = "vlans")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A repeated field indicating the VLAN IDs supported on this subnetwork. During Subnet creation, specifying vlan is valid only if enable_l2 is true. During Subnet Update, specifying vlan is allowed only for l2 enabled subnets. Restricted to only one VLAN."]
    pub vlans: ::std::option::Option<::std::vec::Vec<::std::primitive::i64>>,
}
mod subnetwork_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#subnetwork")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN."]
pub enum SubnetworkAggregationIntervalEnum {
    #[serde(rename = "INTERVAL_10_MIN")]
    #[doc = ""]
    Interval10Min,
    #[serde(rename = "INTERVAL_15_MIN")]
    #[doc = ""]
    Interval15Min,
    #[serde(rename = "INTERVAL_1_MIN")]
    #[doc = ""]
    Interval1Min,
    #[serde(rename = "INTERVAL_30_SEC")]
    #[doc = ""]
    Interval30Sec,
    #[serde(rename = "INTERVAL_5_MIN")]
    #[doc = ""]
    Interval5Min,
    #[serde(rename = "INTERVAL_5_SEC")]
    #[doc = ""]
    Interval5Sec,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet cannot enable direct path."]
pub enum SubnetworkIpv6AccessTypeEnum {
    #[serde(rename = "EXTERNAL")]
    #[doc = ""]
    External,
    #[serde(rename = "INTERNAL")]
    #[doc = ""]
    Internal,
    #[serde(rename = "UNSPECIFIED_IPV6_ACCESS_TYPE")]
    #[doc = ""]
    UnspecifiedIpv6AccessType,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Options are INCLUDE_ALL_METADATA, EXCLUDE_ALL_METADATA, and CUSTOM_METADATA. Default is INCLUDE_ALL_METADATA."]
pub enum SubnetworkMetadataEnum {
    #[serde(rename = "EXCLUDE_ALL_METADATA")]
    #[doc = ""]
    ExcludeAllMetadata,
    #[serde(rename = "INCLUDE_ALL_METADATA")]
    #[doc = ""]
    IncludeAllMetadata,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.\n\nThis field can be both set at resource creation time and updated using patch."]
pub enum SubnetworkPrivateIpv6GoogleAccessEnum {
    #[serde(rename = "DISABLE_GOOGLE_ACCESS")]
    #[doc = ""]
    DisableGoogleAccess,
    #[serde(rename = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableBidirectionalAccessToGoogle,
    #[serde(rename = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    #[doc = ""]
    EnableOutboundVmAccessToGoogle,
    #[serde(rename = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS")]
    #[doc = ""]
    EnableOutboundVmAccessToGoogleForServiceAccounts,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER."]
pub enum SubnetworkPurposeEnum {
    #[serde(rename = "AGGREGATE")]
    #[doc = ""]
    Aggregate,
    #[serde(rename = "CLOUD_EXTENSION")]
    #[doc = ""]
    CloudExtension,
    #[serde(rename = "INTERNAL_HTTPS_LOAD_BALANCER")]
    #[doc = ""]
    InternalHttpsLoadBalancer,
    #[serde(rename = "PRIVATE")]
    #[doc = ""]
    Private,
    #[serde(rename = "PRIVATE_RFC_1918")]
    #[doc = ""]
    PrivateRfc1918,
    #[serde(rename = "PRIVATE_SERVICE_CONNECT")]
    #[doc = ""]
    PrivateServiceConnect,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request."]
pub enum SubnetworkRoleEnum {
    #[serde(rename = "ACTIVE")]
    #[doc = ""]
    Active,
    #[serde(rename = "BACKUP")]
    #[doc = ""]
    Backup,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The stack type for this subnet to identify whether the IPv6 feature is enabled or not. If not specified IPV4_ONLY will be used.\n\nThis field can be both set at resource creation time and updated using patch."]
pub enum SubnetworkStackTypeEnum {
    #[serde(rename = "IPV4_IPV6")]
    #[doc = ""]
    Ipv4Ipv6,
    #[serde(rename = "IPV4_ONLY")]
    #[doc = ""]
    Ipv4Only,
    #[serde(rename = "UNSPECIFIED_STACK_TYPE")]
    #[doc = ""]
    UnspecifiedStackType,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated"]
pub enum SubnetworkStateEnum {
    #[serde(rename = "DRAINING")]
    #[doc = ""]
    Draining,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworkAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of SubnetworksScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<SubnetworksScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "subnetwork_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SubnetworkAggregatedListWarning>,
}
mod subnetwork_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#subnetworkAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SubnetworkAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SubnetworkAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SubnetworkAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SubnetworkAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworkAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of Subnetwork resources."]
pub struct SubnetworkList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Subnetwork resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Subnetwork>>>,
    #[serde(rename = "kind")]
    #[serde(default = "subnetwork_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<SubnetworkListWarning>,
}
mod subnetwork_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#subnetworkList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct SubnetworkListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SubnetworkListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SubnetworkListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SubnetworkListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworkListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The available logging options for this subnetwork."]
pub struct SubnetworkLogConfig {
    #[serde(rename = "aggregationInterval")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection."]
    pub aggregation_interval: ::std::option::Option<SubnetworkLogConfigAggregationIntervalEnum>,
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging."]
    pub enable: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "filterExpr")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged."]
    pub filter_expr: ::std::option::Option<::std::string::String>,
    #[serde(rename = "flowSampling")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported."]
    pub flow_sampling: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is INCLUDE_ALL_METADATA."]
    pub metadata: ::std::option::Option<SubnetworkLogConfigMetadataEnum>,
    #[serde(rename = "metadataFields")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Can only be specified if VPC flow logs for this subnetwork is enabled and \"metadata\" was set to CUSTOM_METADATA."]
    pub metadata_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection."]
pub enum SubnetworkLogConfigAggregationIntervalEnum {
    #[serde(rename = "INTERVAL_10_MIN")]
    #[doc = ""]
    Interval10Min,
    #[serde(rename = "INTERVAL_15_MIN")]
    #[doc = ""]
    Interval15Min,
    #[serde(rename = "INTERVAL_1_MIN")]
    #[doc = ""]
    Interval1Min,
    #[serde(rename = "INTERVAL_30_SEC")]
    #[doc = ""]
    Interval30Sec,
    #[serde(rename = "INTERVAL_5_MIN")]
    #[doc = ""]
    Interval5Min,
    #[serde(rename = "INTERVAL_5_SEC")]
    #[doc = ""]
    Interval5Sec,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is INCLUDE_ALL_METADATA."]
pub enum SubnetworkLogConfigMetadataEnum {
    #[serde(rename = "CUSTOM_METADATA")]
    #[doc = ""]
    CustomMetadata,
    #[serde(rename = "EXCLUDE_ALL_METADATA")]
    #[doc = ""]
    ExcludeAllMetadata,
    #[serde(rename = "INCLUDE_ALL_METADATA")]
    #[doc = ""]
    IncludeAllMetadata,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a secondary IP range of a subnetwork."]
pub struct SubnetworkSecondaryRange {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rangeName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork."]
    pub range_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworksExpandIpCidrRangeRequest {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworksScopedList {
    #[serde(rename = "subnetworks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of subnetworks contained in this scope."]
    pub subnetworks: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Subnetwork>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An informational warning that appears when the list of addresses is empty."]
    pub warning: ::std::option::Option<SubnetworksScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "An informational warning that appears when the list of addresses is empty."]
pub struct SubnetworksScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<SubnetworksScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<SubnetworksScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum SubnetworksScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworksScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct SubnetworksSetPrivateIpGoogleAccessRequest {
    #[serde(rename = "privateIpGoogleAccess")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub private_ip_google_access: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Subsetting options to make L4 ILB support any number of backend instances"]
pub struct Subsetting {
    #[serde(rename = "policy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub policy: ::std::option::Option<SubsettingPolicyEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
pub enum SubsettingPolicyEnum {
    #[serde(rename = "CONSISTENT_HASH_SUBSETTING")]
    #[doc = ""]
    ConsistentHashSubsetting,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TcpHealthCheck {
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "portSpecification")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, TCP health check follows behavior specified in port and portName fields."]
    pub port_specification: ::std::option::Option<TcpHealthCheckPortSpecificationEnum>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<TcpHealthCheckProxyHeaderEnum>,
    #[serde(rename = "request")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII."]
    pub request: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies how port is selected for health checking, can be one of following values:\nUSE_FIXED_PORT: The port number in port is used for health checking.\nUSE_NAMED_PORT: The portName is used for health checking.\nUSE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.\n\n\nIf not specified, TCP health check follows behavior specified in port and portName fields."]
pub enum TcpHealthCheckPortSpecificationEnum {
    #[serde(rename = "USE_FIXED_PORT")]
    #[doc = ""]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    #[doc = ""]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    #[doc = ""]
    UseServingPort,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum TcpHealthCheckProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A set of instance tags."]
pub struct Tags {
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags.\n\nTo see the latest fingerprint, make get() request to the instance."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target gRPC Proxy resource.\n\nA target gRPC proxy is a component of load balancers intended for load balancing gRPC traffic. Only global forwarding rules with load balancing scheme INTERNAL_SELF_MANAGED can reference a target gRPC proxy. The target gRPC Proxy references a URL map that specifies how traffic is routed to gRPC backend services. (== resource_for {$api_version}.targetGrpcProxies ==)"]
pub struct TargetGrpcProxy {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource type. The server generates this identifier."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_grpc_proxy_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL with id for the resource."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC."]
    pub url_map: ::std::option::Option<::std::string::String>,
    #[serde(rename = "validateForProxyless")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use \"xds:///\" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use \"xds:///\" scheme in the target URI of the service it is connecting to"]
    pub validate_for_proxyless: ::std::option::Option<::std::primitive::bool>,
}
mod target_grpc_proxy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetGrpcProxy")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetGrpcProxyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetGrpcProxy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetGrpcProxy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_grpc_proxy_list_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetGrpcProxyListWarning>,
}
mod target_grpc_proxy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetGrpcProxyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetGrpcProxyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetGrpcProxyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetGrpcProxyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetGrpcProxyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetGrpcProxyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpProxiesScopedList {
    #[serde(rename = "targetHttpProxies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpProxies contained in this scope."]
    pub target_http_proxies:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetHttpProxy>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<TargetHttpProxiesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct TargetHttpProxiesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpProxiesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpProxiesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpProxiesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpProxiesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target HTTP Proxy resource.\n\nGoogle Compute Engine has two Target HTTP Proxy resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/targetHttpProxies) * [Regional](/compute/docs/reference/rest/{$api_version}/regionTargetHttpProxies)\n\nA target HTTP proxy is a component of GCP HTTP load balancers.\n\n* targetHttpProxies are used by external HTTP load balancers and Traffic Director. * regionTargetHttpProxies are used by internal HTTP load balancers.\n\nForwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and  Forwarding rule concepts. (== resource_for {$api_version}.targetHttpProxies ==) (== resource_for {$api_version}.regionTargetHttpProxies ==)"]
pub struct TargetHttpProxy {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "httpFilters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs to networkservices.HttpFilter resources enabled for xDS clients using this configuration. For example, https://networkservices.googleapis.com/v1alpha1/projects/project/locations/locationhttpFilters/httpFilter Only filters that handle outbound connection and stream events may be specified. These filters work in conjunction with a default set of HTTP filters that may already be configured by Traffic Director. Traffic Director will determine the final location of these filters within xDS configuration based on the name of the HTTP filter. If Traffic Director positions multiple filters at the same location, those filters will be in the same order as specified in this list.\nhttpFilters only applies for loadbalancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details."]
    pub http_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_http_proxy_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "proxyBind")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.\n\nWhen this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them.\n\nThe default is false."]
    pub proxy_bind: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL to the UrlMap resource that defines the mapping from URL to the BackendService."]
    pub url_map: ::std::option::Option<::std::string::String>,
}
mod target_http_proxy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpProxy")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpProxyAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpProxiesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<TargetHttpProxiesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "target_http_proxy_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetHttpProxyAggregatedListWarning>,
}
mod target_http_proxy_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpProxyAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetHttpProxyAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpProxyAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpProxyAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpProxyAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpProxyAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A list of TargetHttpProxy resources."]
pub struct TargetHttpProxyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpProxy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetHttpProxy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_http_proxy_list_defaults :: kind")]
    #[doc = "Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetHttpProxyListWarning>,
}
mod target_http_proxy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpProxyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetHttpProxyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpProxyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpProxyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpProxyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpProxyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxiesScopedList {
    #[serde(rename = "targetHttpsProxies")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpsProxies contained in this scope."]
    pub target_https_proxies:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetHttpsProxy>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<TargetHttpsProxiesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct TargetHttpsProxiesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpsProxiesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpsProxiesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpsProxiesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxiesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxiesSetCertificateMapRequest {
    #[serde(rename = "certificateMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the Certificate Map to associate with this TargetHttpsProxy."]
    pub certificate_map: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxiesSetQuicOverrideRequest {
    #[serde(rename = "quicOverride")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "QUIC policy for the TargetHttpsProxy resource."]
    pub quic_override:
        ::std::option::Option<TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "QUIC policy for the TargetHttpsProxy resource."]
pub enum TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum {
    #[serde(rename = "DISABLE")]
    #[doc = ""]
    Disable,
    #[serde(rename = "ENABLE")]
    #[doc = ""]
    Enable,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxiesSetSslCertificatesRequest {
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target HTTPS Proxy resource.\n\nGoogle Compute Engine has two Target HTTPS Proxy resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/targetHttpsProxies) * [Regional](/compute/docs/reference/rest/{$api_version}/regionTargetHttpsProxies)\n\nA target HTTPS proxy is a component of GCP HTTPS load balancers.\n\n* targetHttpsProxies are used by external HTTPS load balancers. * regionTargetHttpsProxies are used by internal HTTPS load balancers.\n\nForwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and  Forwarding rule concepts. (== resource_for {$api_version}.targetHttpsProxies ==) (== resource_for {$api_version}.regionTargetHttpsProxies ==)"]
pub struct TargetHttpsProxy {
    #[serde(rename = "authentication")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Use serverTlsPolicy instead."]
    pub authentication: ::std::option::Option<::std::string::String>,
    #[serde(rename = "authorization")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Deprecated] Use authorizationPolicy instead."]
    pub authorization: ::std::option::Option<::std::string::String>,
    #[serde(rename = "authorizationPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy.\nRefer to the AuthorizationPolicy resource for additional details.\nauthorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED.\nNote: This field currently has no impact."]
    pub authorization_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "certificateMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored."]
    pub certificate_map: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "httpFilters")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs to networkservices.HttpFilter resources enabled for xDS clients using this configuration. For example, https://networkservices.googleapis.com/beta/projects/project/locations/locationhttpFilters/httpFilter Only filters that handle outbound connection and stream events may be specified. These filters work in conjunction with a default set of HTTP filters that may already be configured by Traffic Director. Traffic Director will determine the final location of these filters within xDS configuration based on the name of the HTTP filter. If Traffic Director positions multiple filters at the same location, those filters will be in the same order as specified in this list.\nhttpFilters only applies for loadbalancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details."]
    pub http_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_https_proxy_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "proxyBind")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.\n\nWhen this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them.\n\nThe default is false."]
    pub proxy_bind: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "quicOverride")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.  \n- When quic-override is set to NONE, Google manages whether QUIC is used. \n- When quic-override is set to ENABLE, the load balancer uses QUIC when possible. \n- When quic-override is set to DISABLE, the load balancer doesn't use QUIC. \n- If the quic-override flag is not specified, NONE is implied."]
    pub quic_override: ::std::option::Option<TargetHttpsProxyQuicOverrideEnum>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "serverTlsPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic.\nserverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED.\nIf left blank, communications are not encrypted.\nNote: This field currently has no impact."]
    pub server_tls_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sslPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured."]
    pub ssl_policy: ::std::option::Option<::std::string::String>,
    #[serde(rename = "urlMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map:  \n- https://www.googleapis.compute/v1/projects/project/global/urlMaps/url-map \n- projects/project/global/urlMaps/url-map \n- global/urlMaps/url-map"]
    pub url_map: ::std::option::Option<::std::string::String>,
}
mod target_https_proxy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpsProxy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.  \n- When quic-override is set to NONE, Google manages whether QUIC is used. \n- When quic-override is set to ENABLE, the load balancer uses QUIC when possible. \n- When quic-override is set to DISABLE, the load balancer doesn't use QUIC. \n- If the quic-override flag is not specified, NONE is implied."]
pub enum TargetHttpsProxyQuicOverrideEnum {
    #[serde(rename = "DISABLE")]
    #[doc = ""]
    Disable,
    #[serde(rename = "ENABLE")]
    #[doc = ""]
    Enable,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxyAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpsProxiesScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<TargetHttpsProxiesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "target_https_proxy_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetHttpsProxyAggregatedListWarning>,
}
mod target_https_proxy_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpsProxyAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetHttpsProxyAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpsProxyAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpsProxyAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpsProxyAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxyAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetHttpsProxy resources."]
pub struct TargetHttpsProxyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetHttpsProxy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetHttpsProxy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_https_proxy_list_defaults :: kind")]
    #[doc = "Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetHttpsProxyListWarning>,
}
mod target_https_proxy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetHttpsProxyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetHttpsProxyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetHttpsProxyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetHttpsProxyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetHttpsProxyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetHttpsProxyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target Instance resource.\n\nYou can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances. (== resource_for {$api_version}.targetInstances ==)"]
pub struct TargetInstance {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instance")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs: \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance \n- projects/project/zones/zone/instances/instance \n- zones/zone/instances/instance"]
    pub instance: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_instance_defaults :: kind")]
    #[doc = "[Output Only] The type of the resource. Always compute#targetInstance for target instances."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "natPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported."]
    pub nat_policy: ::std::option::Option<TargetInstanceNatPolicyEnum>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "zone")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub zone: ::std::option::Option<::std::string::String>,
}
mod target_instance_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetInstance")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported."]
pub enum TargetInstanceNatPolicyEnum {
    #[serde(rename = "NO_NAT")]
    #[doc = ""]
    NoNat,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetInstanceAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetInstance resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<TargetInstancesScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "target_instance_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetInstanceAggregatedListWarning>,
}
mod target_instance_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetInstanceAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetInstanceAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetInstanceAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetInstanceAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetInstanceAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetInstanceAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetInstance resources."]
pub struct TargetInstanceList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetInstance resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetInstance>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_instance_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetInstanceListWarning>,
}
mod target_instance_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetInstanceList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetInstanceListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetInstanceListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetInstanceListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetInstanceListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetInstanceListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetInstancesScopedList {
    #[serde(rename = "targetInstances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of target instances contained in this scope."]
    pub target_instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetInstance>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<TargetInstancesScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of addresses when the list is empty."]
pub struct TargetInstancesScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetInstancesScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetInstancesScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetInstancesScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetInstancesScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target Pool resource.\n\nTarget pools are used for network TCP/UDP load balancing. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools. (== resource_for {$api_version}.targetPools ==)"]
pub struct TargetPool {
    #[serde(rename = "backupPool")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1].\n\nbackupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool.\n\nIn case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the \"force\" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy."]
    pub backup_pool: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "failoverRatio")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1].\n\nIf set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool.\n\nIn case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the \"force\" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy."]
    pub failover_ratio: ::std::option::Option<::std::primitive::f64>,
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only one health check may be specified."]
    pub health_checks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_pool_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#targetPool for target pools."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the target pool resides."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLinkWithId")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource with the resource id."]
    pub self_link_with_id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sessionAffinity")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Session affinity option, must be one of the following values:\nNONE: Connections from the same client IP may go to any instance in the pool.\nCLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy.\nCLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy."]
    pub session_affinity: ::std::option::Option<TargetPoolSessionAffinityEnum>,
}
mod target_pool_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetPool")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Session affinity option, must be one of the following values:\nNONE: Connections from the same client IP may go to any instance in the pool.\nCLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy.\nCLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy."]
pub enum TargetPoolSessionAffinityEnum {
    #[serde(rename = "CLIENT_IP")]
    #[doc = ""]
    ClientIp,
    #[serde(rename = "CLIENT_IP_NO_DESTINATION")]
    #[doc = ""]
    ClientIpNoDestination,
    #[serde(rename = "CLIENT_IP_PORT_PROTO")]
    #[doc = ""]
    ClientIpPortProto,
    #[serde(rename = "CLIENT_IP_PROTO")]
    #[doc = ""]
    ClientIpProto,
    #[serde(rename = "GENERATED_COOKIE")]
    #[doc = ""]
    GeneratedCookie,
    #[serde(rename = "HEADER_FIELD")]
    #[doc = ""]
    HeaderField,
    #[serde(rename = "HTTP_COOKIE")]
    #[doc = ""]
    HttpCookie,
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetPool resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<TargetPoolsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "target_pool_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetPoolAggregatedListWarning>,
}
mod target_pool_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetPoolAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetPoolAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetPoolAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetPoolAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetPoolAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolInstanceHealth {
    #[serde(rename = "healthStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub health_status: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthStatus>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_pool_instance_health_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance."]
    pub kind: ::std::string::String,
}
mod target_pool_instance_health_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetPoolInstanceHealth")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetPool resources."]
pub struct TargetPoolList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetPool resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetPool>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_pool_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetPoolList for lists of target pools."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetPoolListWarning>,
}
mod target_pool_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetPoolList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetPoolListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetPoolListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetPoolListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetPoolListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsAddHealthCheckRequest {
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The HttpHealthCheck to add to the target pool."]
    pub health_checks:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheckReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsAddInstanceRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project-id/zones/zone/instances/instance-name \n- projects/project-id/zones/zone/instances/instance-name \n- zones/zone/instances/instance-name"]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsRemoveHealthCheckRequest {
    #[serde(rename = "healthChecks")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs:  \n- https://www.googleapis.com/compute/beta/projects/project/global/httpHealthChecks/health-check \n- projects/project/global/httpHealthChecks/health-check \n- global/httpHealthChecks/health-check"]
    pub health_checks:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HealthCheckReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsRemoveInstanceRequest {
    #[serde(rename = "instances")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs of the instances to be removed from target pool."]
    pub instances: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<InstanceReference>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsScopedList {
    #[serde(rename = "targetPools")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of target pools contained in this scope."]
    pub target_pools: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetPool>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<TargetPoolsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of addresses when the list is empty."]
pub struct TargetPoolsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetPoolsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetPoolsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetPoolsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetPoolsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetReference {
    #[serde(rename = "target")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub target: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetSslProxiesSetBackendServiceRequest {
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the new BackendService resource for the targetSslProxy."]
    pub service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetSslProxiesSetCertificateMapRequest {
    #[serde(rename = "certificateMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the Certificate Map to associate with this TargetSslProxy."]
    pub certificate_map: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetSslProxiesSetProxyHeaderRequest {
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."]
    pub proxy_header: ::std::option::Option<TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."]
pub enum TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetSslProxiesSetSslCertificatesRequest {
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "New set of URLs to SslCertificate resources to associate with this TargetSslProxy. Currently exactly one ssl certificate must be specified."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target SSL Proxy resource.\n\nA target SSL proxy is a component of a SSL Proxy load balancer. Global forwarding rules reference a target SSL proxy, and the target proxy then references an external backend service. For more information, read Using Target Proxies. (== resource_for {$api_version}.targetSslProxies ==)"]
pub struct TargetSslProxy {
    #[serde(rename = "certificateMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored."]
    pub certificate_map: ::std::option::Option<::std::string::String>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_ssl_proxy_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<TargetSslProxyProxyHeaderEnum>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL to the BackendService resource."]
    pub service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sslCertificates")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates."]
    pub ssl_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "sslPolicy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured."]
    pub ssl_policy: ::std::option::Option<::std::string::String>,
}
mod target_ssl_proxy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetSslProxy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum TargetSslProxyProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetSslProxy resources."]
pub struct TargetSslProxyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetSslProxy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetSslProxy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_ssl_proxy_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetSslProxyListWarning>,
}
mod target_ssl_proxy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetSslProxyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetSslProxyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetSslProxyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetSslProxyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetSslProxyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetSslProxyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetTcpProxiesSetBackendServiceRequest {
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The URL of the new BackendService resource for the targetTcpProxy."]
    pub service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetTcpProxiesSetProxyHeaderRequest {
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."]
    pub proxy_header: ::std::option::Option<TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."]
pub enum TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target TCP Proxy resource.\n\nA target TCP proxy is a component of a TCP Proxy load balancer. Global forwarding rules reference target TCP proxy, and the target proxy then references an external backend service. For more information, read TCP Proxy Load Balancing overview. (== resource_for {$api_version}.targetTcpProxies ==)"]
pub struct TargetTcpProxy {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_tcp_proxy_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "proxyBind")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.\n\nWhen this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them.\n\nThe default is false."]
    pub proxy_bind: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "proxyHeader")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
    pub proxy_header: ::std::option::Option<TargetTcpProxyProxyHeaderEnum>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL to the BackendService resource."]
    pub service: ::std::option::Option<::std::string::String>,
}
mod target_tcp_proxy_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetTcpProxy")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."]
pub enum TargetTcpProxyProxyHeaderEnum {
    #[serde(rename = "NONE")]
    #[doc = ""]
    None,
    #[serde(rename = "PROXY_V1")]
    #[doc = ""]
    ProxyV1,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetTcpProxy resources."]
pub struct TargetTcpProxyList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetTcpProxy resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetTcpProxy>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_tcp_proxy_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetTcpProxyListWarning>,
}
mod target_tcp_proxy_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetTcpProxyList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetTcpProxyListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetTcpProxyListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetTcpProxyListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetTcpProxyListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetTcpProxyListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Target VPN Gateway resource.\n\nThe target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview. (== resource_for {$api_version}.targetVpnGateways ==)"]
pub struct TargetVpnGateway {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "forwardingRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway."]
    pub forwarding_rules: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "target_vpn_gateway_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this TargetVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a TargetVpnGateway."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING."]
    pub status: ::std::option::Option<TargetVpnGatewayStatusEnum>,
    #[serde(rename = "tunnels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway."]
    pub tunnels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
mod target_vpn_gateway_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetVpnGateway")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING."]
pub enum TargetVpnGatewayStatusEnum {
    #[serde(rename = "CREATING")]
    #[doc = ""]
    Creating,
    #[serde(rename = "DELETING")]
    #[doc = ""]
    Deleting,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "READY")]
    #[doc = ""]
    Ready,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetVpnGatewayAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetVpnGateway resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<TargetVpnGatewaysScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "target_vpn_gateway_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetVpnGatewayAggregatedListWarning>,
}
mod target_vpn_gateway_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetVpnGatewayAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetVpnGatewayAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetVpnGatewayAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetVpnGatewayAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetVpnGatewayAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetVpnGatewayAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of TargetVpnGateway resources."]
pub struct TargetVpnGatewayList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of TargetVpnGateway resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetVpnGateway>>>,
    #[serde(rename = "kind")]
    #[serde(default = "target_vpn_gateway_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<TargetVpnGatewayListWarning>,
}
mod target_vpn_gateway_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#targetVpnGatewayList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct TargetVpnGatewayListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetVpnGatewayListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetVpnGatewayListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetVpnGatewayListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetVpnGatewayListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetVpnGatewaysScopedList {
    #[serde(rename = "targetVpnGateways")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of target VPN gateways contained in this scope."]
    pub target_vpn_gateways:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TargetVpnGateway>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<TargetVpnGatewaysScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
pub struct TargetVpnGatewaysScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<TargetVpnGatewaysScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<TargetVpnGatewaysScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum TargetVpnGatewaysScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TargetVpnGatewaysScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TestFailure {
    #[serde(rename = "actualOutputUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The actual output URL evaluated by load balancer containing the scheme, host, path and query parameters."]
    pub actual_output_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "actualRedirectResponseCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Actual HTTP status code for rule with `urlRedirect` calculated by load balancer"]
    pub actual_redirect_response_code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "actualService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "BackendService or BackendBucket returned by load balancer."]
    pub actual_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expectedOutputUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters."]
    pub expected_output_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expectedRedirectResponseCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Expected HTTP status code for rule with `urlRedirect` calculated by load balancer"]
    pub expected_redirect_response_code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "expectedService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Expected BackendService or BackendBucket resource the given URL should be mapped to."]
    pub expected_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "HTTP headers of the request."]
    pub headers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UrlMapTestHeader>>>,
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Host portion of the URL."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "path")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Path portion including query parameters in the URL."]
    pub path: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TestPermissionsRequest {
    #[serde(rename = "permissions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."]
    pub permissions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct TestPermissionsResponse {
    #[serde(rename = "permissions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."]
    pub permissions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate."]
pub struct TlsCertificateContext {
    #[serde(rename = "certificatePaths")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH."]
    pub certificate_paths: ::std::option::Option<::std::boxed::Box<TlsCertificatePaths>>,
    #[serde(rename = "certificateSource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines how TLS certificates are obtained."]
    pub certificate_source: ::std::option::Option<TlsCertificateContextCertificateSourceEnum>,
    #[serde(rename = "sdsConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS."]
    pub sds_config: ::std::option::Option<::std::boxed::Box<SdsConfig>>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines how TLS certificates are obtained."]
pub enum TlsCertificateContextCertificateSourceEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "USE_PATH")]
    #[doc = ""]
    UsePath,
    #[serde(rename = "USE_SDS")]
    #[doc = ""]
    UseSds,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key."]
pub struct TlsCertificatePaths {
    #[serde(rename = "certificatePath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The path to the file holding the client or server TLS certificate to use."]
    pub certificate_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "privateKeyPath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The path to the file holding the client or server private key."]
    pub private_key_path: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] The TLS settings for the client or server. The TLS settings for the client or server."]
pub struct TlsContext {
    #[serde(rename = "certificateContext")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the mechanism to obtain the client or server certificate."]
    pub certificate_context: ::std::option::Option<::std::boxed::Box<TlsCertificateContext>>,
    #[serde(rename = "validationContext")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate."]
    pub validation_context: ::std::option::Option<::std::boxed::Box<TlsValidationContext>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate."]
pub struct TlsValidationContext {
    #[serde(rename = "certificatePath")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The path to the file holding the CA certificate to validate the client or server certificate."]
    pub certificate_path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sdsConfig")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS."]
    pub sds_config: ::std::option::Option<::std::boxed::Box<SdsConfig>>,
    #[serde(rename = "validationSource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines how TLS certificates are obtained."]
    pub validation_source: ::std::option::Option<TlsValidationContextValidationSourceEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines how TLS certificates are obtained."]
pub enum TlsValidationContextValidationSourceEnum {
    #[serde(rename = "INVALID")]
    #[doc = ""]
    Invalid,
    #[serde(rename = "USE_PATH")]
    #[doc = ""]
    UsePath,
    #[serde(rename = "USE_SDS")]
    #[doc = ""]
    UseSds,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UdpHealthCheck {
    #[serde(rename = "port")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The UDP port number for the health check request. Valid values are 1 through 65535."]
    pub port: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "portName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence."]
    pub port_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "request")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII."]
    pub request: ::std::option::Option<::std::string::String>,
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII."]
    pub response: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Upcoming Maintenance notification information."]
pub struct UpcomingMaintenance {
    #[serde(rename = "date")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The date when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead."]
    pub date: ::std::option::Option<::std::string::String>,
    #[serde(rename = "startTimeWindow")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The start time window of the maintenance disruption."]
    pub start_time_window: ::std::option::Option<::std::boxed::Box<UpcomingMaintenanceTimeWindow>>,
    #[serde(rename = "time")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The time when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead."]
    pub time: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Defines the type of maintenance."]
    pub _type: ::std::option::Option<UpcomingMaintenanceTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Defines the type of maintenance."]
pub enum UpcomingMaintenanceTypeEnum {
    #[serde(rename = "SCHEDULED")]
    #[doc = ""]
    Scheduled,
    #[serde(rename = "UNKNOWN_TYPE")]
    #[doc = ""]
    UnknownType,
    #[serde(rename = "UNSCHEDULED")]
    #[doc = ""]
    Unscheduled,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a window of time using two timestamps: `earliest` and `latest`. This timestamp values are in RFC3339 text format."]
pub struct UpcomingMaintenanceTimeWindow {
    #[serde(rename = "earliest")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub earliest: ::std::option::Option<::std::string::String>,
    #[serde(rename = "latest")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub latest: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a URL Map resource.\n\nGoogle Compute Engine has two URL Map resources:\n\n* [Global](/compute/docs/reference/rest/{$api_version}/urlMaps) * [Regional](/compute/docs/reference/rest/{$api_version}/regionUrlMaps)\n\nA URL map resource is a component of certain types of GCP load balancers and Traffic Director.\n\n* urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers.\n\nFor a list of supported URL map features by load balancer type, see the  Load balancing features: Routing and traffic management table.\n\nFor a list of supported URL map features for Traffic Director, see the  Traffic Director features: Routing and traffic management table.\n\nThis resource defines mappings from host names and URL paths to either a backend service or a backend bucket.\n\nTo use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts."]
pub struct UrlMap {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultRouteAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "defaultRouteAction takes effect when none of the  hostRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any  weightedBackendServices.\nOnly one of defaultRouteAction or defaultUrlRedirect must be set.\nUrlMaps for external HTTP(S) load balancers support only the urlRewrite action within defaultRouteAction.\ndefaultRouteAction has no effect when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub default_route_action: ::std::option::Option<::std::boxed::Box<HttpRouteAction>>,
    #[serde(rename = "defaultService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified.\nOnly one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set.\ndefaultService has no effect when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub default_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "defaultUrlRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect.\nIf defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.\nNot supported when the URL map is bound to target gRPC proxy."]
    pub default_url_redirect: ::std::option::Option<::std::boxed::Box<HttpRedirectAction>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "fingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a UrlMap."]
    pub fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies changes to request and response headers that need to take effect for the selected backendService.\nThe headerAction specified here take effect after headerAction specified under pathMatcher.\nNote that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub header_action: ::std::option::Option<::std::boxed::Box<HttpHeaderAction>>,
    #[serde(rename = "hostRules")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of HostRules to use against the URL."]
    pub host_rules: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<HostRule>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "url_map_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#urlMaps for url maps."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "pathMatchers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of named PathMatchers to use against the URL."]
    pub path_matchers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<PathMatcher>>>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "tests")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test cases pass. You can specify a maximum of 100 tests per UrlMap.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub tests: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UrlMapTest>>>,
}
mod url_map_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#urlMap")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of UrlMap resources."]
pub struct UrlMapList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of UrlMap resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UrlMap>>>,
    #[serde(rename = "kind")]
    #[serde(default = "url_map_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<UrlMapListWarning>,
}
mod url_map_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#urlMapList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct UrlMapListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<UrlMapListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<UrlMapListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum UrlMapListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapReference {
    #[serde(rename = "urlMap")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub url_map: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message for the expected URL mappings."]
pub struct UrlMapTest {
    #[serde(rename = "backendServiceWeight")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting."]
    pub backend_service_weight: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Description of this test case."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expectedOutputUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters.\nFor rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored.\nFor rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters.\nexpectedOutputUrl is optional when service is specified."]
    pub expected_output_url: ::std::option::Option<::std::string::String>,
    #[serde(rename = "expectedRedirectResponseCode")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response.\nexpectedRedirectResponseCode cannot be set when service is set."]
    pub expected_redirect_response_code: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "expectedUrlRedirect")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead."]
    pub expected_url_redirect: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headers")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "HTTP headers for this request. If headers contains a host header, then host must also match the header value."]
    pub headers: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UrlMapTestHeader>>>,
    #[serde(rename = "host")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Host portion of the URL. If headers contains a host header, then host must also match the header value."]
    pub host: ::std::option::Option<::std::string::String>,
    #[serde(rename = "path")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Path portion of the URL."]
    pub path: ::std::option::Option<::std::string::String>,
    #[serde(rename = "service")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Expected BackendService or BackendBucket resource the given URL should be mapped to.\nservice cannot be set if expectedRedirectResponseCode is set."]
    pub service: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "HTTP headers used in UrlMapTests."]
pub struct UrlMapTestHeader {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Header name."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Header value."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Message representing the validation result for a UrlMap."]
pub struct UrlMapValidationResult {
    #[serde(rename = "loadErrors")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub load_errors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "loadSucceeded")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons."]
    pub load_succeeded: ::std::option::Option<::std::primitive::bool>,
    #[serde(rename = "testFailures")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub test_failures: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<TestFailure>>>,
    #[serde(rename = "testPassed")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure."]
    pub test_passed: ::std::option::Option<::std::primitive::bool>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of UrlMapsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<UrlMapsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "url_maps_aggregated_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<UrlMapsAggregatedListWarning>,
}
mod url_maps_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#urlMapsAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct UrlMapsAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<UrlMapsAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<UrlMapsAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum UrlMapsAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsScopedList {
    #[serde(rename = "urlMaps")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of UrlMaps contained in this scope."]
    pub url_maps: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UrlMap>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of backend services when the list is empty."]
    pub warning: ::std::option::Option<UrlMapsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of backend services when the list is empty."]
pub struct UrlMapsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<UrlMapsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<UrlMapsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum UrlMapsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsValidateRequest {
    #[serde(rename = "resource")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Content of the UrlMap to be validated."]
    pub resource: ::std::option::Option<::std::boxed::Box<UrlMap>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UrlMapsValidateResponse {
    #[serde(rename = "result")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub result: ::std::option::Option<::std::boxed::Box<UrlMapValidationResult>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The spec for modifying the path before sending the request to the matched backend service."]
pub struct UrlRewrite {
    #[serde(rename = "hostRewrite")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite.\nThe value must be between 1 and 255 characters."]
    pub host_rewrite: ::std::option::Option<::std::string::String>,
    #[serde(rename = "pathPrefixRewrite")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite.\nThe value must be between 1 and 1024 characters."]
    pub path_prefix_rewrite: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Subnetwork which the current user has compute.subnetworks.use permission on."]
pub struct UsableSubnetwork {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The range of internal addresses that are owned by this subnetwork."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Network URL."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "secondaryIpRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Secondary IP ranges."]
    pub secondary_ip_ranges:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UsableSubnetworkSecondaryRange>>>,
    #[serde(rename = "subnetwork")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Subnetwork URL."]
    pub subnetwork: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Secondary IP range of a usable subnetwork."]
pub struct UsableSubnetworkSecondaryRange {
    #[serde(rename = "ipCidrRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The range of IP addresses belonging to this subnetwork secondary range."]
    pub ip_cidr_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "rangeName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork."]
    pub range_name: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UsableSubnetworksAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output] A list of usable subnetwork URLs."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<UsableSubnetwork>>>,
    #[serde(rename = "kind")]
    #[serde(default = "usable_subnetworks_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<UsableSubnetworksAggregatedListWarning>,
}
mod usable_subnetworks_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#usableSubnetworksAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct UsableSubnetworksAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<UsableSubnetworksAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<UsableSubnetworksAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum UsableSubnetworksAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct UsableSubnetworksAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix."]
pub struct UsageExportLocation {
    #[serde(rename = "bucketName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket."]
    pub bucket_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "reportNamePrefix")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions."]
    pub report_name_prefix: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contain information of Nat mapping for a VM endpoint (i.e., NIC)."]
pub struct VmEndpointNatMappings {
    #[serde(rename = "instanceName")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the VM instance which the endpoint belongs to"]
    pub instance_name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "interfaceNatMappings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub interface_nat_mappings: ::std::option::Option<
        ::std::vec::Vec<::std::boxed::Box<VmEndpointNatMappingsInterfaceNatMappings>>,
    >,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contain information of Nat mapping for an interface of this endpoint."]
pub struct VmEndpointNatMappingsInterfaceNatMappings {
    #[serde(rename = "drainNatIpPortRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"]."]
    pub drain_nat_ip_port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "natIpPortRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"]."]
    pub nat_ip_port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "numTotalDrainNatPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges."]
    pub num_total_drain_nat_ports: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numTotalNatPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges."]
    pub num_total_nat_ports: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ruleMappings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Information about mappings provided by rules in this NAT."]
    pub rule_mappings: ::std::option::Option<
        ::std::vec::Vec<
            ::std::boxed::Box<VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings>,
        >,
    >,
    #[serde(rename = "sourceAliasIpRange")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: \"10.33.4.55/32\", or \"192.168.5.0/24\"."]
    pub source_alias_ip_range: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sourceVirtualIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Primary IP of the VM for this NIC."]
    pub source_virtual_ip: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains information of NAT Mappings provided by a NAT Rule."]
pub struct VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {
    #[serde(rename = "drainNatIpPortRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of all drain IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"]."]
    pub drain_nat_ip_port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "natIpPortRanges")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of all IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"]."]
    pub nat_ip_port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "numTotalDrainNatPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain_nat_ip_port_ranges."]
    pub num_total_drain_nat_ports: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "numTotalNatPorts")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat_ip_port_ranges."]
    pub num_total_nat_ports: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "ruleNumber")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Rule number of the NAT Rule."]
    pub rule_number: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of VmEndpointNatMappings."]
pub struct VmEndpointNatMappingsList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "vm_endpoint_nat_mappings_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "result")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of Nat mapping information of VM endpoints."]
    pub result: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VmEndpointNatMappings>>>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<VmEndpointNatMappingsListWarning>,
}
mod vm_endpoint_nat_mappings_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vmEndpointNatMappingsList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct VmEndpointNatMappingsListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VmEndpointNatMappingsListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VmEndpointNatMappingsListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VmEndpointNatMappingsListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VmEndpointNatMappingsListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a HA VPN gateway.\n\nHA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see  Cloud VPN topologies . (== resource_for {$api_version}.vpnGateways ==)"]
pub struct VpnGateway {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_gateway_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnGateway for VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve an VpnGateway."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "network")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created."]
    pub network: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the VPN gateway resides."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "vpnInterfaces")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of interfaces on this VPN gateway."]
    pub vpn_interfaces:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnGatewayVpnGatewayInterface>>>,
}
mod vpn_gateway_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnGateway")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewayAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of VpnGateway resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<VpnGatewaysScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_gateway_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnGateway for VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<VpnGatewayAggregatedListWarning>,
}
mod vpn_gateway_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnGatewayAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct VpnGatewayAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnGatewayAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnGatewayAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnGatewayAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewayAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of VpnGateway resources."]
pub struct VpnGatewayList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of VpnGateway resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnGateway>>>,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_gateway_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnGateway for VPN gateways."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<VpnGatewayListWarning>,
}
mod vpn_gateway_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnGatewayList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct VpnGatewayListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnGatewayListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnGatewayListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnGatewayListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewayListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewayStatus {
    #[serde(rename = "vpnConnections")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of VPN connection for this VpnGateway."]
    pub vpn_connections:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnGatewayStatusVpnConnection>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway."]
pub struct VpnGatewayStatusHighAvailabilityRequirementState {
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET."]
    pub state: ::std::option::Option<VpnGatewayStatusHighAvailabilityRequirementStateStateEnum>,
    #[serde(rename = "unsatisfiedReason")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE."]
    pub unsatisfied_reason: ::std::option::Option<
        VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum,
    >,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET."]
pub enum VpnGatewayStatusHighAvailabilityRequirementStateStateEnum {
    #[serde(rename = "CONNECTION_REDUNDANCY_MET")]
    #[doc = ""]
    ConnectionRedundancyMet,
    #[serde(rename = "CONNECTION_REDUNDANCY_NOT_MET")]
    #[doc = ""]
    ConnectionRedundancyNotMet,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE."]
pub enum VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum {
    #[serde(rename = "INCOMPLETE_TUNNELS_COVERAGE")]
    #[doc = ""]
    IncompleteTunnelsCoverage,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains some information about a VPN tunnel."]
pub struct VpnGatewayStatusTunnel {
    #[serde(rename = "localGatewayInterface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The VPN gateway interface this VPN tunnel is associated with."]
    pub local_gateway_interface: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "peerGatewayInterface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway."]
    pub peer_gateway_interface: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "tunnelUrl")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL reference to the VPN tunnel."]
    pub tunnel_url: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be a external VPN gateway or GCP VPN gateway."]
pub struct VpnGatewayStatusVpnConnection {
    #[serde(rename = "peerExternalGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway."]
    pub peer_external_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerGcpGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway."]
    pub peer_gcp_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "HighAvailabilityRequirementState for the VPN connection."]
    pub state:
        ::std::option::Option<::std::boxed::Box<VpnGatewayStatusHighAvailabilityRequirementState>>,
    #[serde(rename = "tunnels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of VPN tunnels that are in this VPN connection."]
    pub tunnels: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnGatewayStatusTunnel>>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "A VPN gateway interface."]
pub struct VpnGatewayVpnGatewayInterface {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The numeric ID of this VPN gateway interface."]
    pub id: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "interconnectAttachment")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the interconnect attachment resource. When the value of this field is present, the VPN Gateway will be used for IPsec-encrypted Cloud Interconnect; all Egress or Ingress traffic for this VPN Gateway interface will go through the specified interconnect attachment resource."]
    pub interconnect_attachment: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ipAddress")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The external IP address for this VPN gateway interface."]
    pub ip_address: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewaysGetStatusResponse {
    #[serde(rename = "result")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    pub result: ::std::option::Option<::std::boxed::Box<VpnGatewayStatus>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewaysScopedList {
    #[serde(rename = "vpnGateways")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of VPN gateways contained in this scope."]
    pub vpn_gateways: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnGateway>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<VpnGatewaysScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning which replaces the list of addresses when the list is empty."]
pub struct VpnGatewaysScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnGatewaysScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnGatewaysScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnGatewaysScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnGatewaysScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Cloud VPN Tunnel resource.\n\nFor more information about VPN, read the  the Cloud VPN Overview. (== resource_for {$api_version}.vpnTunnels ==)"]
pub struct VpnTunnel {
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "An optional description of this resource. Provide this property when you create the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "detailedStatus")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Detailed status message for the VPN tunnel."]
    pub detailed_status: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ikeVersion")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2."]
    pub ike_version: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_tunnel_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels."]
    pub kind: ::std::string::String,
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A fingerprint for the labels being applied to this VpnTunnel, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve a VpnTunnel."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
    #[serde(rename = "localTrafficSelector")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported."]
    pub local_traffic_selector: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerExternalGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway."]
    pub peer_external_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerExternalGatewayInterface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created."]
    pub peer_external_gateway_interface: ::std::option::Option<::std::primitive::i64>,
    #[serde(rename = "peerGcpGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway."]
    pub peer_gcp_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "peerIp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "IP address of the peer VPN gateway. Only IPv4 is supported."]
    pub peer_ip: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "remoteTrafficSelector")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported."]
    pub remote_traffic_selector: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "router")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the router resource to be used for dynamic routing."]
    pub router: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sharedSecret")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway."]
    pub shared_secret: ::std::option::Option<::std::string::String>,
    #[serde(rename = "sharedSecretHash")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Hash of the shared secret."]
    pub shared_secret_hash: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The status of the VPN tunnel, which can be one of the following: \n- PROVISIONING: Resource is being allocated for the VPN tunnel. \n- WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. \n- FIRST_HANDSHAKE: Successful first handshake with the peer VPN. \n- ESTABLISHED: Secure session is successfully established with the peer VPN. \n- NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS \n- AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). \n- NEGOTIATION_FAILURE: Handshake failed. \n- DEPROVISIONING: Resources are being deallocated for the VPN tunnel. \n- FAILED: Tunnel creation has failed and the tunnel is not ready to be used. \n- NO_INCOMING_PACKETS: No incoming packets from peer. \n- REJECTED: Tunnel configuration was rejected, can be result of being blacklisted. \n- ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. \n- STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. \n- PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. \n- TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel."]
    pub status: ::std::option::Option<VpnTunnelStatusEnum>,
    #[serde(rename = "targetVpnGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created."]
    pub target_vpn_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "vpnGateway")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created."]
    pub vpn_gateway: ::std::option::Option<::std::string::String>,
    #[serde(rename = "vpnGatewayInterface")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The interface ID of the VPN gateway with which this VPN tunnel is associated."]
    pub vpn_gateway_interface: ::std::option::Option<::std::primitive::i64>,
}
mod vpn_tunnel_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnTunnel")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] The status of the VPN tunnel, which can be one of the following: \n- PROVISIONING: Resource is being allocated for the VPN tunnel. \n- WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. \n- FIRST_HANDSHAKE: Successful first handshake with the peer VPN. \n- ESTABLISHED: Secure session is successfully established with the peer VPN. \n- NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS \n- AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). \n- NEGOTIATION_FAILURE: Handshake failed. \n- DEPROVISIONING: Resources are being deallocated for the VPN tunnel. \n- FAILED: Tunnel creation has failed and the tunnel is not ready to be used. \n- NO_INCOMING_PACKETS: No incoming packets from peer. \n- REJECTED: Tunnel configuration was rejected, can be result of being blacklisted. \n- ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. \n- STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. \n- PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. \n- TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel."]
pub enum VpnTunnelStatusEnum {
    #[serde(rename = "ALLOCATING_RESOURCES")]
    #[doc = ""]
    AllocatingResources,
    #[serde(rename = "AUTHORIZATION_ERROR")]
    #[doc = ""]
    AuthorizationError,
    #[serde(rename = "DEPROVISIONING")]
    #[doc = ""]
    Deprovisioning,
    #[serde(rename = "ESTABLISHED")]
    #[doc = ""]
    Established,
    #[serde(rename = "FAILED")]
    #[doc = ""]
    Failed,
    #[serde(rename = "FIRST_HANDSHAKE")]
    #[doc = ""]
    FirstHandshake,
    #[serde(rename = "NEGOTIATION_FAILURE")]
    #[doc = ""]
    NegotiationFailure,
    #[serde(rename = "NETWORK_ERROR")]
    #[doc = ""]
    NetworkError,
    #[serde(rename = "NO_INCOMING_PACKETS")]
    #[doc = ""]
    NoIncomingPackets,
    #[serde(rename = "PROVISIONING")]
    #[doc = ""]
    Provisioning,
    #[serde(rename = "REJECTED")]
    #[doc = ""]
    Rejected,
    #[serde(rename = "STOPPED")]
    #[doc = ""]
    Stopped,
    #[serde(rename = "WAITING_FOR_FULL_CONFIG")]
    #[doc = ""]
    WaitingForFullConfig,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnTunnelAggregatedList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of VpnTunnelsScopedList resources."]
    pub items: ::std::option::Option<
        ::std::collections::BTreeMap<String, ::std::boxed::Box<VpnTunnelsScopedList>>,
    >,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_tunnel_aggregated_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "unreachables")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unreachable resources."]
    pub unreachables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<VpnTunnelAggregatedListWarning>,
}
mod vpn_tunnel_aggregated_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnTunnelAggregatedList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct VpnTunnelAggregatedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnTunnelAggregatedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnTunnelAggregatedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnTunnelAggregatedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnTunnelAggregatedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of VpnTunnel resources."]
pub struct VpnTunnelList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of VpnTunnel resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnTunnel>>>,
    #[serde(rename = "kind")]
    #[serde(default = "vpn_tunnel_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<VpnTunnelListWarning>,
}
mod vpn_tunnel_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#vpnTunnelList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct VpnTunnelListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnTunnelListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnTunnelListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnTunnelListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnTunnelListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnTunnelsScopedList {
    #[serde(rename = "vpnTunnels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of VPN tunnels contained in this scope."]
    pub vpn_tunnels: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<VpnTunnel>>>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Informational warning which replaces the list of addresses when the list is empty."]
    pub warning: ::std::option::Option<VpnTunnelsScopedListWarning>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Informational warning which replaces the list of addresses when the list is empty."]
pub struct VpnTunnelsScopedListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<VpnTunnelsScopedListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<VpnTunnelsScopedListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum VpnTunnelsScopedListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct VpnTunnelsScopedListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct WafExpressionSet {
    #[serde(rename = "aliases")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like \"stable\" is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can't be used for more than one entity set."]
    pub aliases: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "expressions")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "List of available expressions."]
    pub expressions:
        ::std::option::Option<::std::vec::Vec<::std::boxed::Box<WafExpressionSetExpression>>>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Google specified expression set ID. The format should be: - E.g. XSS-20170329"]
    pub id: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct WafExpressionSetExpression {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive."]
    pub id: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "In contrast to a single BackendService in  HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService"]
pub struct WeightedBackendService {
    #[serde(rename = "backendService")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight."]
    pub backend_service: ::std::option::Option<::std::string::String>,
    #[serde(rename = "headerAction")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies changes to request and response headers that need to take effect for the selected backendService.\nheaderAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.\nNote that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.\nNot supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true."]
    pub header_action: ::std::option::Option<::std::boxed::Box<HttpHeaderAction>>,
    #[serde(rename = "weight")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) .\nThe selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy.\nThe value must be between 0 and 1000"]
    pub weight: ::std::option::Option<::std::primitive::i64>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct XpnHostList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A list of shared VPC host project URLs."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Project>>>,
    #[serde(rename = "kind")]
    #[serde(default = "xpn_host_list_defaults :: kind")]
    #[doc = "[Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<XpnHostListWarning>,
}
mod xpn_host_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#xpnHostList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct XpnHostListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<XpnHostListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<XpnHostListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum XpnHostListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct XpnHostListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Service resource (a.k.a service project) ID."]
pub struct XpnResourceId {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678)."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The type of the service resource."]
    pub _type: ::std::option::Option<XpnResourceIdTypeEnum>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "The type of the service resource."]
pub enum XpnResourceIdTypeEnum {
    #[serde(rename = "PROJECT")]
    #[doc = ""]
    Project,
    #[serde(rename = "XPN_RESOURCE_TYPE_UNSPECIFIED")]
    #[doc = ""]
    XpnResourceTypeUnspecified,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Represents a Zone resource.\n\nA zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones. (== resource_for {$api_version}.zones ==)"]
pub struct Zone {
    #[serde(rename = "availableCpuPlatforms")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Available cpu/platform selections for the zone."]
    pub available_cpu_platforms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "creationTimestamp")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Creation timestamp in RFC3339 text format."]
    pub creation_timestamp: ::std::option::Option<::std::string::String>,
    #[serde(rename = "deprecated")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The deprecation status associated with this zone."]
    pub deprecated: ::std::option::Option<::std::boxed::Box<DeprecationStatus>>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Textual description of the resource."]
    pub description: ::std::option::Option<::std::string::String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] The unique identifier for the resource. This identifier is defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "kind")]
    #[serde(default = "zone_defaults :: kind")]
    #[doc = "[Output Only] Type of the resource. Always compute#zone for zones."]
    pub kind: ::std::string::String,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Name of the resource."]
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(rename = "region")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Full URL reference to the region which hosts the zone."]
    pub region: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for the resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Status of the zone, either UP or DOWN."]
    pub status: ::std::option::Option<ZoneStatusEnum>,
    #[serde(rename = "supportsPzs")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Reserved for future use."]
    pub supports_pzs: ::std::option::Option<::std::primitive::bool>,
}
mod zone_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#zone")
    }
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] Status of the zone, either UP or DOWN."]
pub enum ZoneStatusEnum {
    #[serde(rename = "DOWN")]
    #[doc = ""]
    Down,
    #[serde(rename = "UP")]
    #[doc = ""]
    Up,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ZoneInstantSnapshotsExportRequest {
    #[serde(rename = "exportParams")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Parameters to export the changed blocks."]
    pub export_params: ::std::option::Option<::std::boxed::Box<InstantSnapshotExportParams>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "Contains a list of zone resources."]
pub struct ZoneList {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Unique identifier for the resource; defined by the server."]
    pub id: ::std::option::Option<::std::string::String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "A list of Zone resources."]
    pub items: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Zone>>>,
    #[serde(rename = "kind")]
    #[serde(default = "zone_list_defaults :: kind")]
    #[doc = "Type of resource."]
    pub kind: ::std::string::String,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results."]
    pub next_page_token: ::std::option::Option<::std::string::String>,
    #[serde(rename = "selfLink")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Server-defined URL for this resource."]
    pub self_link: ::std::option::Option<::std::string::String>,
    #[serde(rename = "warning")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Informational warning message."]
    pub warning: ::std::option::Option<ZoneListWarning>,
}
mod zone_list_defaults {
    pub fn kind() -> ::std::string::String {
        String::from("compute#zoneList")
    }
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
#[doc = "[Output Only] Informational warning message."]
pub struct ZoneListWarning {
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
    pub code: ::std::option::Option<ZoneListWarningCodeEnum>,
    #[serde(rename = "data")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] Metadata about this warning in key: value format. For example:\n\"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" }"]
    pub data: ::std::option::Option<::std::vec::Vec<ZoneListWarningData>>,
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A human-readable description of the warning code."]
    pub message: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, PartialEq, Copy, Clone, serde :: Serialize, serde :: Deserialize)]
#[doc = "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."]
pub enum ZoneListWarningCodeEnum {
    #[serde(rename = "CLEANUP_FAILED")]
    #[doc = ""]
    CleanupFailed,
    #[serde(rename = "DEPRECATED_RESOURCE_USED")]
    #[doc = ""]
    DeprecatedResourceUsed,
    #[serde(rename = "DEPRECATED_TYPE_USED")]
    #[doc = ""]
    DeprecatedTypeUsed,
    #[serde(rename = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    #[doc = ""]
    DiskSizeLargerThanImageSize,
    #[serde(rename = "EXPERIMENTAL_TYPE_USED")]
    #[doc = ""]
    ExperimentalTypeUsed,
    #[serde(rename = "EXTERNAL_API_WARNING")]
    #[doc = ""]
    ExternalApiWarning,
    #[serde(rename = "FIELD_VALUE_OVERRIDEN")]
    #[doc = ""]
    FieldValueOverriden,
    #[serde(rename = "INJECTED_KERNELS_DEPRECATED")]
    #[doc = ""]
    InjectedKernelsDeprecated,
    #[serde(rename = "LARGE_DEPLOYMENT_WARNING")]
    #[doc = ""]
    LargeDeploymentWarning,
    #[serde(rename = "MISSING_TYPE_DEPENDENCY")]
    #[doc = ""]
    MissingTypeDependency,
    #[serde(rename = "NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    #[doc = ""]
    NextHopAddressNotAssigned,
    #[serde(rename = "NEXT_HOP_CANNOT_IP_FORWARD")]
    #[doc = ""]
    NextHopCannotIpForward,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_FOUND")]
    #[doc = ""]
    NextHopInstanceNotFound,
    #[serde(rename = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    #[doc = ""]
    NextHopInstanceNotOnNetwork,
    #[serde(rename = "NEXT_HOP_NOT_RUNNING")]
    #[doc = ""]
    NextHopNotRunning,
    #[serde(rename = "NOT_CRITICAL_ERROR")]
    #[doc = ""]
    NotCriticalError,
    #[serde(rename = "NO_RESULTS_ON_PAGE")]
    #[doc = ""]
    NoResultsOnPage,
    #[serde(rename = "PARTIAL_SUCCESS")]
    #[doc = ""]
    PartialSuccess,
    #[serde(rename = "REQUIRED_TOS_AGREEMENT")]
    #[doc = ""]
    RequiredTosAgreement,
    #[serde(rename = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    #[doc = ""]
    ResourceInUseByOtherResourceWarning,
    #[serde(rename = "RESOURCE_NOT_DELETED")]
    #[doc = ""]
    ResourceNotDeleted,
    #[serde(rename = "SCHEMA_VALIDATION_IGNORED")]
    #[doc = ""]
    SchemaValidationIgnored,
    #[serde(rename = "SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    #[doc = ""]
    SingleInstancePropertyTemplate,
    #[serde(rename = "UNDECLARED_PROPERTIES")]
    #[doc = ""]
    UndeclaredProperties,
    #[serde(rename = "UNREACHABLE")]
    #[doc = ""]
    Unreachable,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ZoneListWarningData {
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."]
    pub key: ::std::option::Option<::std::string::String>,
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "[Output Only] A warning data value corresponding to the key."]
    pub value: ::std::option::Option<::std::string::String>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ZoneSetLabelsRequest {
    #[serde(rename = "labelFingerprint")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint."]
    pub label_fingerprint: ::std::option::Option<::std::string::String>,
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "The labels to set for this resource."]
    pub labels: ::std::option::Option<::std::collections::BTreeMap<String, ::std::string::String>>,
}
#[derive(Debug, Default, PartialEq, Clone, serde :: Serialize, serde :: Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ZoneSetPolicyRequest {
    #[serde(rename = "bindings")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings."]
    pub bindings: ::std::option::Option<::std::vec::Vec<::std::boxed::Box<Binding>>>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."]
    pub etag: ::std::option::Option<::std::string::String>,
    #[serde(rename = "policy")]
    #[serde(skip_serializing_if = "::std::option::Option::is_none")]
    #[doc = "REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them."]
    pub policy: ::std::option::Option<::std::boxed::Box<Policy>>,
}
